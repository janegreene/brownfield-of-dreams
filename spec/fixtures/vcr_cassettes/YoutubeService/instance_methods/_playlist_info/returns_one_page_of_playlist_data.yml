---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&part=contentDetails,snippet&playlistId=PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 09 Jul 2020 06:34:41 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "zaQSjswWuQdLxSA-zscxlOWamLY",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "zSEBCULuvD7y_39i-KkLfvzW2tg",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4xMTg1QzhEQTkwRTVFMzUy",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:07Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Lady Gaga, Ariana Grande - Rain On Me (Official Music Video)",
        "description": "“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT NOW\nhttp://smarturl.it/Chromatica\n\n\"RAIN ON ME”\nTHE NEW SINGLE FROM LADY GAGA WITH ARIANA GRANDE\nOUT NOW\nhttp://smarturl.it/RainOnMeChromatica\n\nDIRECTED BY ROBERT RODRIGUEZ\n\nSHOP THE OFFICIAL CHROMATICA COLLECTION: http://smarturl.it/GagaStore\n\nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News\n\nFOLLOW ARIANA GRANDE:\nFacebook: http://ArianaGrande.lnk.to/FacebookYT\nInstagram: http://ArianaGrande.lnk.to/InstagramYT\nTwitter: http://ArianaGrande.lnk.to/TwitterYT\nWebsite: http://ArianaGrande.lnk.to/WebsiteYT\nOfficial Store: http://ArianaGrande.lnk.to/ShopYT\nEmail List: http://ArianaGrande.lnk.to/SignUpYT\n\nMusic video by Lady Gaga, Ariana Grande performing Rain On Me. © 2020 Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/AoAm4om0wTs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AoAm4om0wTs"
        }
      },
      "contentDetails": {
        "videoId": "AoAm4om0wTs",
        "videoPublishedAt": "2020-05-22T17:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xxx9vrbCwhhT14G9vtzfACnIr_0",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS42ODM2Qzk4MTBCQTY0MDNB",
      "snippet": {
        "publishedAt": "2020-01-28T09:03:47Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Justin Bieber - Yummy (Official Video)",
        "description": "Changes Out Now: https://justinbieber.lnk.to/Changes\n \nFollow Justin:\nhttp://facebook.com/justinbieber\nhttp://twitter.com/justinbieber\nhttp://instagram.com/justinbieber\n \nSign up for Justin’s newsletter: http://justinbiebermusic.com\n \nProduction Company: OBB Pictures\nDirected by: Nick DeMoura\nCo-Directed by: Jordan Taylor\nExecutive Producers: Justin Bieber, Scooter Braun, Allison Kaye, Michael D. Ratner, Scott Ratner, Miranda Sherman, Kfir Goldberg\nChoreography by: Sienna Lalau\nEditor: Jordan Taylor\n\n#Yummy #Changes\n\nMusic video by Justin Bieber performing Yummy (Official Video). © 2020 Def Jam Recordings, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/8EJ3zbKTWQ8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "8EJ3zbKTWQ8"
        }
      },
      "contentDetails": {
        "videoId": "8EJ3zbKTWQ8",
        "videoPublishedAt": "2020-01-04T17:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9gMV7W3huBKY9JyQ0aK0yeIlyI4",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43Mzg1NEZCNzQ5NDlEQTQz",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:08Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Powfu - death bed (coffee for your head) (Official Video) ft. beabadoobee",
        "description": "Thank u to every single person that used this song in a YouTube video or tiktok or just shared it with your friends. I had a lot of fun filming this video! Love is all we need ❤ - Powfu \n\nOfficial video for \"death bed\" by Powfu featuring beabadoobee.  \n\nListen & Download “death bed” out now: https://powfu.lnk.to/deathbed\nListen to Powfu's new EP \"poems of the past\" out now: https://Powfu.lnk.to/POTP\n\nAmazon - https://powfu.lnk.to/deathbed/amazonmusic  \nApple Music - https://powfu.lnk.to/deathbed/applemusic \niTunes - https://powfu.lnk.to/deathbed/itunes\nSpotify - https://powfu.lnk.to/deathbed/spotify\nYouTube Music - https://powfu.lnk.to/deathbed/youtubemusic\n\n(Beabadoobee) \nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head I\n'll get you up and going out of bed \n\n(Powfu) \nYeah, I don’t wanna fall asleep \nI don’t wanna pass away \nI've been thinking of our future \n'Cause I'll never see those days \n\nI don’t know why this has happened \nBut I probably deserve it \nI tried to do my best \nBut you know that I’m not perfect \n\nI've been praying for forgiveness \nYou’ve been praying for my health \nWhen I leave this earth \nHoping you’ll find someone else \n\n'Cause yeah we still young \nThere's so much we haven’t done \nGetting married \nStart a family \nWatch your husband with his son \n\nI wish it could be me \nBut I won’t make it off this bed \nHope I go to heaven so I see you once again \n\nMy life was kind of short \nBut I got so many blessings \nHappy you were mine \nIt sucks that its all ending \n\nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head \nI'll get you up and going out of bed \n\nDont stay awake for too long \nDont go to bed \nI'll make a cup of coffee for your head \nI'll get you up and going out of bed \n\nI'm happy that you here with me \nI'm sorry if I tear up \nWhen me and you were younger \nYou would always make me cheer up \n\nTaking goofy videos \nAnd walking through the park \nYou would jump into my arms \nEvery time you heard a bark \n\nCuddle in your sheets \nSing me sound asleep \nAnd sneak out through your kitchen at exactly 1:03 \n\nSundays went to church \nOn Mondays watched a movie \nSoon you’ll be alone \nSorry that you have to lose me\n\nDirector: bedroom (@bedroom.projects)\nProduction Company: COMPULSORY (@compulsoryview)\nExec. Producer: Kiran Mandla (@kir.m_)\nProducer: Joseph J Goldman (@thewarthog)\nProducer/Commissioner: Saul Levitz\n \nProduction Service Co: BOLDLY (@filmboldly)\nProducer: Sebastien Galina (@sebastiengalina)\nDOP: Kaayla Whachell (@kaayla_whachell)\nDOP: Meliodic (@meliodic)\n1st AC: Thomas Wang (@wangerthomas)\nGaffer: Brandon Y Lee (@brandon_y_lee)\nKey Grip: Tom Armstrong (@armstronggrip93)\nGear: Primary Imaging (@primaryimaging)\nColourist: Thomas Mangham (@thomasmangham) @ The Mill\n\nFollow Powfu\nInstagram - https://www.instagram.com/pow.fu/\nTwitter - https://twitter.com/powfu\n\n#deathbed #Powfu #beabadoobee",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jJPMnTXl63E/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jJPMnTXl63E"
        }
      },
      "contentDetails": {
        "videoId": "jJPMnTXl63E",
        "videoPublishedAt": "2020-04-01T17:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "v2LKb0QfcngxwdwvseEAHP6kpo8",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5CRUZFODkzN0YzMDAxMzU3",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:09Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Drake - Toosie Slide",
        "description": "Music video by Drake performing Toosie Slide. © 2020 OVO, under exclusive license to Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/xWggTb45brM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "xWggTb45brM"
        }
      },
      "contentDetails": {
        "videoId": "xWggTb45brM",
        "videoPublishedAt": "2020-04-03T04:15:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qL7lxekrSTMYVHkD5W56kE_DZAA",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43MkM4NTE4MEJBNkUxODhE",
      "snippet": {
        "publishedAt": "2020-06-24T08:26:01Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Tiësto - Lose You feat. ILIRA (Lyric Video)",
        "description": "Tiësto - Lose You feat. Ilira (Lyric Video) \n\nStream/download Tiësto’s album ‘The London Sessions’ now: http://tsto.co/thelondonsessions \n\nCreate a video on TikTok with Lose You: https://vm.tiktok.com/J1GMTEL/\n\nVideo by Timo Helgert http://www.vacades.com\n\nFollow Tiësto\nhttp://www.Tiesto.com/\nFacebook: http://tsto.co/Facebook \nInstagram: http://tsto.co/Instagram \nTwitter: http://tsto.co/Twitter \nYouTube: http://tsto.co/YTSubscribe \nSoundcloud: http://tsto.co/Soundcloud\nWeibo: http://tsto.co/Weibo\n\nFollow Ilira \nFacebook: https://www.facebook.com/iliraa\nInstagram: https://www.instagram.com/iliramusic\nTwitter: https://twitter.com/iliramusic\nYouTube: https://www.youtube.com/channel/UCjMMIFthkLpJ7VZKf_pXEiw\nSoundcloud: https://soundcloud.com/iliramusic\n\nLYRICS \n\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\n\nAnd I know, if I leave you like that, leave you like that, leave you like that, leave you like that\nI know, we can never go back\n\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\n\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\n\nHold me one last time\nAlways been like home to me but I must have lost the key\nOnly one last time\nPour a drink and make it strong cuz tomorrow I’ll be gone\n\n‘Fore I let you go, we got the night\nGotta let you know, you got me like “uh” I’m like “uh” ah na na na\n‘Fore I let you go, we got the night\nNo one's ever known my body like you I’m like “uh” ah na na na\n\nAnd I know, if I leave you like that, leave you like that, leave you like that, leave you like that\nI know, we can never go back\n\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\n\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself\n\nAnd I know, if I leave you like that, leave you like that \nYeah, I know, we can never go back (never go back)\nI don’t wanna lose you\nBut if I don’t, Imma lose myself, Imma lose myself",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/h9xbIgY2eKw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/h9xbIgY2eKw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/h9xbIgY2eKw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/h9xbIgY2eKw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/h9xbIgY2eKw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "h9xbIgY2eKw"
        }
      },
      "contentDetails": {
        "videoId": "h9xbIgY2eKw",
        "videoPublishedAt": "2020-06-17T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "lofAqIXJ6qG_ZmwVpDbVQSbk2PE",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS41ODEyQTk5ODZDMDcxNkQy",
      "snippet": {
        "publishedAt": "2020-06-29T11:55:24Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Trevor Daniel, Selena Gomez - Past Life [Lyrics]",
        "description": "Listen to \"Past Life\" by Trevor Daniel and Selena Gomez:\nhttps://smarturl.it/PastLifeOutNow\n\nFollow Trevor Daniel: \nInstagram: https://www.instagram.com/iamtrevordaniel/\nTwitter: https://twitter.com/Iamtrevordaniel\nFacebook: https://www.facebook.com/iamtrevordaniel/\nTik Tok: https://www.tiktok.com/@iamtrevordaniel?lang=en\nYouTube: https://www.youtube.com/channel/UCLvAxkjgDXIrO-IDNIBgnEg\n\nFollow Selena Gomez:\nInstagram: https://www.instagram.com/selenagomez/\nTwitter: https://twitter.com/selenagomez\nFacebook: https://www.facebook.com/Selena\nTik Tok: https://www.tiktok.com/@selenagomez\nYouTube: https://smarturl.it/SelenaYT\n\n#PastLife #TrevorDaniel #SelenaGomez\n\nMusic video by Trevor Daniel, Selena Gomez performing Past Life (Lyric Video). © 2020 Alamo/Interscope Records\n\nhttp://vevo.ly/oavIqb",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/d3QWmEeKO0w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/d3QWmEeKO0w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/d3QWmEeKO0w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/d3QWmEeKO0w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/d3QWmEeKO0w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "d3QWmEeKO0w"
        }
      },
      "contentDetails": {
        "videoId": "d3QWmEeKO0w",
        "videoPublishedAt": "2020-06-26T04:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0iWRTyqFBq368ZUjivJ8Za8sCxs",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4zQTFGQzIyRDREREUzOEJF",
      "snippet": {
        "publishedAt": "2020-06-26T07:59:37Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Lady Gaga, BLACKPINK - Sour Candy (Lyric Video)",
        "description": "“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT NOW\nhttp://smarturl.it/Chromatica\n\nSHOP THE SOUR CANDY COLLECTION: https://smarturl.it/LGStore\n\nSHOP THE OFFICIAL CHROMATICA COLLECTION: http://smarturl.it/GagaStore\n \nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News\n\nFOLLOW BLACKPINK:\nFacebook: http://www.facebook.com/BLACKPINKOFFICIAL\nInstagram: http://www.instagram.com/BLACKPINKOFFICIAL\nTwitter: http://www.twitter.com/ygent_official\nWebsite: http://www.blackpinkofficial.com\nYouTube: http://www.youtube.com/BLACKPINKOFFICIAL\n\nDirector, Lead Animator: Sam Rolfes \nLead Animator: Andy Rolfes \nProducer, AI Artist: Kara Kittel\nProduction Company: Team Rolfes\n3D Technical Artists: Nicole Ruggiero, Alex Baumann, Damien Blaise\nOverlay Design: Kristyna Kulikova, Simon Kounovsky\nFX: Travis Treadway, Derric Eady, David Johnson, Undertone FX",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Fc2qWBIToKU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Fc2qWBIToKU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Fc2qWBIToKU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Fc2qWBIToKU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Fc2qWBIToKU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Fc2qWBIToKU"
        }
      },
      "contentDetails": {
        "videoId": "Fc2qWBIToKU",
        "videoPublishedAt": "2020-06-16T16:00:29Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uM4kjEWXfzTWa8BJHdZ8FV56l9o",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5FQzdGOUY0ODgyMzA3MUVC",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:11Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Megan Thee Stallion - Savage Remix (feat. Beyoncé) [Lyric Video]",
        "description": "The official lyric video for Megan Thee Stallion's \"Savage Remix\" featuring Beyoncé - Out Now! With all artists’ proceeds benefitting Bread Of Life Houston's COVID-19 Relief efforts in their hometown.\nStream \"Savage Remix (feat. Beyoncé)\" on all platforms now:\nhttps://megantheestallion.ffm.to/savageremix \n\nVisual by 7Lemons\n\nStream 'SUGA': \nhttps://megantheestallion.ffm.to/suga\n\nFollow Megan Thee Stallion:\nhttps://www.instagram.com/theestallion\nhttps://twitter.com/theestallion\nhttps://www.facebook.com/theestallionn\n\nFollow Beyoncé:\nhttps://www.Beyonce.com\nhttps://www.instagram.com/Beyonce\nhttps://www.facebook.com/Beyonce\nhttps://twitter.com/Beyonce\n\nLYRICS:\nIntro (Beyoncé):\nQueen B, want no smoke with me (okay)\nBeen turnt this motherfucker up 800 degrees\nThe whole team eat, chef kiss cause she’s a treat (muah) Oh she’s so bougie bougie, bon appétit\n\nVerse 1 (Megan):\nI’m a savage\nAttitude nasty\nTalk big shit but my bank account match it\nHood but I’m classy, rich but I’m ratchet\nHaters kept my name in they mouth now they gaggin, ah Bougie, he said the way that thing move is a movie\nI told that boy we gotta keep it low, leave me the room key I done bled the block and now it’s hot , bitch I’m Tunchie\nA mood and I’m moody\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch\nWhat's happening? Bitch\nI'm a savage, (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\n\nVerse 2 (Beyoncé):\nHips tick tock when I dance (dance)\nOn that demon time she might start a Only Fans \nBig B and that B stand for bands \nIf you wanna see some real ass baby here's your chance\nI said left cheek, right cheek, drop it low and then swang \nTexas up in this thang, put you up on this game\nIvy Park on my frame, gang, gang, gang, gang\nIf you don't jump to put jeans on, baby you don't feel my pain (hold up) Please don't get me hyped, write my name in ice \nCan't argue with these lazy bitches , I just raise my price\nI’m a BOSS, I'm a leader, I pull up in my 2 seater\nAnd my mama was a Savage \nNigga got the shit from Tina\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? Bitch (whoa, whoa) I'm a savage, yeah\nClassy, bougie, ratchet, (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch What's happening? (whoa, whoa)\n\nPost Chorus (Megan and Beyoncé):\nLike Beyoncé, like me (like me)\nHe want a bitch like the Stallion with the knees\nHe be like damn how that thang moving in them jeans Even D4L couldn’t do it like me\n\nBridge (Beyoncé):\nOoh..\nI done got this body ready just for you\nGirl I hope he don’t catch me messing around with you Talking to myself in the mirror like bitch you my boo\n\nPre (Megan):\nI’m the shit ou\nI need a mop to clean the floor, it’s too much drip ou I keep a knot, I keep a watch ou\nLets play a game ,Simon says I’m still that bitch aye I’m still that bitch\n\nChorus (Megan and Beyoncé):\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch (whoa, whoa) What's happening? Bitch (whoa, whoa)\nI'm a savage (okay)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (nasty)\nActing stupid, what's happening? Bitch\nWhat's happening?\n\nVerse 3 (Beyoncé):\nI heard they asking for the queen , they brought some cameras in here I’m a bad bitch, she’s a savage, no comparison here\nI’ma flip my hair and look back while I twerk in the mirror\nAll this money in the room, think some scammers in here\nI’m coming straight up out the third Whip the whip like I stirred it\nWood grain, we swerving\nKeeping his mind all on these curves Coupe fly like a bird\nCold on ‘em like burrrr\nAlways keep my word\nNo I don’t do cross word\nStallion when I ride he like them hot girls with them hips huh...\nI hopped that shit the way I hopped out and slid\nI pop my shit now watch me pop up again\nI mop the floor now watch me sweep up these Ms\n\nChorus (Megan and Beyoncé):\nI'm a savage (yeah)\nClassy, bougie, ratchet (okay)\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay), What's happening? Bitch (whoa, whoa)\nI'm a savage, yeah\nClassy, bougie, ratchet, yeah\nSassy, moody, nasty (okay)\nActing stupid, what's happening? Bitch (okay)\n\nOutro (Beyoncé):\nIt’s the Stallion and the Bee H-Town going down\n\n--\n#MeganTheeStallion #Savage #Beyonce #SUGA #LyricVideo\n\n© 2020 1501 Certified Ent LLC under exclusive license to 300 Entertainment",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FatzlG2DNdY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FatzlG2DNdY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FatzlG2DNdY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FatzlG2DNdY/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FatzlG2DNdY"
        }
      },
      "contentDetails": {
        "videoId": "FatzlG2DNdY",
        "videoPublishedAt": "2020-05-07T23:11:27Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9W1PwZc8rhOQxV4a4sEvNuKX3PQ",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS41NzQxREMyRUE3RTM1NkQ1",
      "snippet": {
        "publishedAt": "2020-06-05T18:30:07Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "The 1975 - If You’re Too Shy (Let Me Know) (Official Live Video)",
        "description": "SUPPORTED BY YOUTUBE MUSIC\nThe 1975 - If You're Too Shy (Let Me Know) \n\nThe new album from The 1975 ‘Notes On A Conditional Form’ is Out Now - https://The1975.lnk.to/NOACFID\n\nDirected by Adam Powell \n\nhttps://www.The1975.com\n\n#The1975 \n\nIf You’re Too Shy (Let Me Know). © 2020 Dirty Hit, under exclusive licence to Polydor Records and Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wYYQpTbBSBM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wYYQpTbBSBM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wYYQpTbBSBM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wYYQpTbBSBM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wYYQpTbBSBM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wYYQpTbBSBM"
        }
      },
      "contentDetails": {
        "videoId": "wYYQpTbBSBM",
        "videoPublishedAt": "2020-04-23T19:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ZPpI0b3YiZx7xXsyAbT4lTIYPZ4",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5ENzRGRTY2MUM0M0MwRDQ3",
      "snippet": {
        "publishedAt": "2020-06-04T18:28:07Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Ellie Goulding - Power",
        "description": "Listen to 'Power' now: https://EllieGoulding.lnk.to/PowerID\nGet the effects from the video for your Instagram Stories: https://ellie.lnk.to/PowerFilterID\n \nThe official video for Ellie Goulding - Power\n \nFollow Ellie:\nTik Tok: https://EllieGoulding.lnk.to/TikTokID\nInstagram: https://instagram.com/elliegoulding\nFacebook: https://facebook.com/elliegoulding\nTwitter: https://twitter.com/elliegoulding\nWebsite: https://EllieGoulding.com\n \nSign Up: http://Ellie.lnk.to/signup\n\nDirectors - Imogen & Riccardo @isstudioworld\nEdit and Grade - @rememberyouweremadetobeused\nProduction - @isstudioworld \n\nLyrics\n \nPainted to pure perfection\nWe had a real connection\nBodies, aching, overtaken\n \nYou kept me at a distance, \nNot asking any questions \nFingers, Pressing\nLearning, lessons\n \nBeautiful lies on a Friday night\nStarting to wonder where we lost the magic\nHead in the clouds, talking so loud, all I hear is static\nI’m not a material girl, everything in your world just feels like plastic, \nWearing your crown, it’s pulling me down\nYou just want the power, you’re not really down for love\nYou just want the power\n \nThe power\n \nNo I’m not chasing paper and I’m not faking neither\nTake me higher or this will expire\nYour self obsessions boring, sorry if I’m ignoring \nMindless actions lead to destruction\n \nBeautiful lies on a Friday night\nStarting to wonder where we lost the magic\nHead in the clouds, talking so loud, all I hear is static\nI’m not a material girl, everything in your world just feels like plastic, \nWearing your crown, it’s pulling me down\nYou just want the power, you’re not really down for love\nYou just want the power\n \nThe power\n \nEverything you do is so cruel\nTaking me for a fool\nMaking me need a new fix\nMaking me worship you\nEverything you do is so cruel\nTaking me for a fool\nMaking me need a new fix\nMaking me worship you\n \nBeautiful lies on a Friday night\nStarting to wonder where we lost the magic\nHead in the clouds, talking so loud, all I hear is static\nI’m not a material girl, everything in your world just feels like plastic, \nWearing your crown, it’s pulling me down\nYou just want the power, you’re not really down for love\nYou just want the power\n\n#EllieGoulding\n\nMusic video by Ellie Goulding performing Power. © 2020 Polydor Limited",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/hKtP8GMM7Bg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/hKtP8GMM7Bg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/hKtP8GMM7Bg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/hKtP8GMM7Bg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/hKtP8GMM7Bg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "hKtP8GMM7Bg"
        }
      },
      "contentDetails": {
        "videoId": "hKtP8GMM7Bg",
        "videoPublishedAt": "2020-05-21T16:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nvIDEV9CKO7qNo4VtdzP179sOH0",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43QTFGOUM1ODJBMzdGMUIy",
      "snippet": {
        "publishedAt": "2020-05-27T18:14:23Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Deante' Hitchcock - Attitude (Official Video) ft. Young Nudy",
        "description": "Deanté Hitchcock 'Better' out now!: https://DeanteHitchcock.lnk.to/Better\n\nSubscribe for more Deante Hitchcock Content:\nhttps://DeanteHitchcock.lnk.to/YouTubeSubscribe\n\nFollow Deanté Hitchcock:\nhttps://www.deantehitchcock.com/\nhttp://instagram.com/DeanteVH\nhttp://twitter.com/DeanteVH\nhttp://facebook.com/DeanteVH\nhttps://soundcloud.com/deante-hitchcock\n\nFollow Young Nudy: \nhttps://twitter.com/PDE_YOUNGNUDY\nhttps://www.instagram.com/youngnudy/\nhttps://www.facebook.com/youngnudy/\n\n#DeanteHitchcock #Better #YoungNudy",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0Xp83iTraTc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0Xp83iTraTc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0Xp83iTraTc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0Xp83iTraTc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0Xp83iTraTc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0Xp83iTraTc"
        }
      },
      "contentDetails": {
        "videoId": "0Xp83iTraTc",
        "videoPublishedAt": "2020-05-20T15:32:22Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "jhyLTnl7Dmun5WJCW9spzh9vYA8",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5DNDI2NDVDQ0Y5OTE1NzhD",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:13Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "The Weeknd - Blinding Lights (Official Music Video)",
        "description": "Official music video for The Weeknd \"Blinding Lights\" - available everywhere now: http://theweeknd.co/blindinglightsYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Get exclusive merch: https://shop.theweeknd.com/\n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd\nhttps://www.facebook.com/theweeknd\nhttps://www.instagram.com/theweeknd\nhttps://www.theweeknd.com\nSubscribe to YouTube Music: http://theweeknd.co/blindinglightsYD/youtubemusic \n\nDirector: Anton Tammi\n\nProduction Company: Somesuch \nExecutive Producer: Saskia Whinney\nProducer: Sarah Park\n\nDirector of Photography: Oliver Millar\n2nd Unit DP: Devin “Daddy” Karringten\nSteadicam Op: Niels Lindelien\nGaffer: Nizar Najm\nKey Grip: Marlow Nunez\nProduction Designer: Adam William Wilson\n\n1st AD: Kenneth Taylor\n\nEditor: Janne Vartia & Tim Montana\nPost Production Supervisor: Alec Ernest\nVFX: Mathematic\nColorist: Nicke Jacobsson\nSound Designer: Akseli Soini\n3D: Oscar Böckerman\nTitle Design: Aleksi Tammi\n\n\n►\"Blinding Lights\" Lyrics:\n\nYeah\nI been tryna call\nI been on my own for long enough\nMaybe you can show me how to love, maybe\nI'm going through withdrawals\nYou don't even have to do too much\nYou can turn me on with just a touch, baby\nI look around and Sin City's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nHey, hey, hey\nI'm running out of time\n'Cause I can see the sun light up the sky\nSo I hit the road in overdrive, baby\nOh, the city's cold and empty (oh)\nNo one's around to judge me (oh)\nI can't see clearly when you're gone\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nI said, ooh, I'm drowning in the night\nOh, when I'm like this, you're the one I trust\nI'm just walking by to let you know (by to let you know)\nI can never say it on the phone (say it on the phone)\nWill never let you go this time (ooh)\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\nHey, hey, hey\nHey, hey, hey\nI said, ooh, I'm blinded by the lights\nNo, I can't sleep until I feel your touch\n\n#TheWeeknd #BlindingLights\n\n\nMusic video by The Weeknd performing Blinding Lights. © 2020 The Weeknd XO, Inc., manufactured and marketed by Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/4NRXx6U8ABQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "4NRXx6U8ABQ"
        }
      },
      "contentDetails": {
        "videoId": "4NRXx6U8ABQ",
        "videoPublishedAt": "2020-01-21T18:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "AE8FDMVSW8pEYhHz7IzWF9BpUDY",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5GQjVGNDkzMjIxMkIxNEQz",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:14Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Dua Lipa - Break My Heart (Official Video)",
        "description": "Stream Break My Heart : https://dualipa.co/breakmyheart\n\nGet the new album Future Nostalgia : https://dualipa.co/futurenostalgia\n\nLyrics:\n\n[Verse 1]\nI’ve always been the one to say the first goodbye\nHad to love and lose a hundred million times\nHad to get it wrong to know just what I like\nNow I’m falling\nYou say my name like I have never heard before \nI’m indecisive but this time I know for sure\nI hope I’m not the only one that feels it all\nAre you falling?\n\n[Pre-Chorus]\nCentre of attention\nYou know you can get whatever you want from me\nWhenever you want it baby\nIt’s you in my reflection\nI’m afraid of all the things it could do to me\nIf I woulda known it baby\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\n\n[Verse 2]\nI wonder when you go if I stay on your mind\nTwo can play that game but you win me every time\nEveryone before you was a waste of time\nYeah you got me\n\n[Pre-chorus]\nCentre of attention\nYou know you can get whatever you want from me\nWhenever you want it baby\nIt’s you in my reflection\nI’m afraid of all the things it could do to me\nIf I woulda known it baby\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\n\n[Post-Chorus]\nOoooh break my heart\nOoooh break my heart\nOoooh\nAm I falling in love with the one that could break my heart?\n\n[Chorus]\nI would’ve stayed at home\nCuz I was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm i falling in love with the one that could break my heart?\nOh no\nI was doing better alone\nBut when you said hello\nI knew that was the end of it all\nI should’ve stayed at home\nCuz now there ain’t no letting you go\nAm I falling in love with the one that could break my heart?\n\nFollow me online:\nInstagram:  https://dualipa.co/instagram\nFacebook: http://dualipa.co/facebook\nTwitter: http://dualipa.co/twitter\nYouTube: https://dualipa.co/youtube\nSpotify: http://dualipa.co/spotify\nApple Music: https://dualipa.co/apple-music\nDeezer URL: http://dualipa.co/deezer\nAmazon Music: https://dualipa.co/amazonmusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Nj2U6rhnucI/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Nj2U6rhnucI"
        }
      },
      "contentDetails": {
        "videoId": "Nj2U6rhnucI",
        "videoPublishedAt": "2020-03-26T13:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "RjJw30_W1TZ7_juj7EXdnIagyC0",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4yRUNFQjc0NzZCRTFBOTZF",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:14Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Regard, RAYE - Secrets (Official Video)",
        "description": "Regard & RAYE 'Secrets' is out now listen/download here: https://lnk.to/RRSecretsyd  \n\n\nFollow Regard\nhttps://www.instagram.com/djregardoff...\nhttps://www.facebook.com/DjRegardOffi...\nhttps://twitter.com/DardanRegard\n\nFollow RAYE\nhttps://www.instagram.com/raye/\nhttps://twitter.com/raye\nhttps://www.facebook.com/raye/\n\nDirrected by Harry Lindley, ELS production addition footage by\nLauren Keen \n\nTribal Apes\n\nSekuence \n\n\n#Regard #RAYE #Secrets",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/nPLN5HXsq04/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/nPLN5HXsq04/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/nPLN5HXsq04/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/nPLN5HXsq04/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/nPLN5HXsq04/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "nPLN5HXsq04"
        }
      },
      "contentDetails": {
        "videoId": "nPLN5HXsq04",
        "videoPublishedAt": "2020-06-19T14:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Jf9F18rKQO6lfUP2PbEwHjxKbWo",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS45ODQyNzZDRURGRkMzOUM3",
      "snippet": {
        "publishedAt": "2020-06-17T16:01:26Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Nevi - Invoice (Official Music Video)",
        "description": "Watch the Official Video for \"Invoice\" by Nevi \n\nStream \"Invoice\": \nhttps://lnk.to/Invoice\n\nAlso be sure to stream Nevi's latest single \"Yungin\":\nhttps://lnk.to/NeviYungin\n\nFollow Nevi:\nIG: @nevi444\nLink to IG: https://www.instagram.com/nevi444/\n\nDirected By: \nGalaxyM83\nIG: @galaxym83\nLink to IG: https://www.instagram.com/galaxym83/\n\n#Nevi #Invoice",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/u4Fj7JkgBus/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/u4Fj7JkgBus/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/u4Fj7JkgBus/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/u4Fj7JkgBus/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/u4Fj7JkgBus/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "u4Fj7JkgBus"
        }
      },
      "contentDetails": {
        "videoId": "u4Fj7JkgBus",
        "videoPublishedAt": "2020-06-17T15:59:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Vzag9tkrubVAPf47Lad6BgcQFqQ",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4zRUE4Q0FEOUZENjE2NDhD",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:16Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Harry Styles - Watermelon Sugar (Official Video)",
        "description": "This video is dedicated to touching.\nListen to Harry Styles’ new album ‘Fine Line’ now: https://HStyles.lnk.to/FineLineAY \n\nFollow Harry Styles:\nFacebook: https://HarryStyles.lnk.to/followFI\nInstagram: https://HarryStyles.lnk.to/followII\nTwitter: https://HarryStyles.lnk.to/followTI\nWebsite: https://HarryStyles.lnk.to/followWI\nSpotify: https://HarryStyles.lnk.to/followSI\nYouTube: https://HarryStyles.lnk.to/subscribeYD\n\nLyrics: \n\nTastes like strawberries\nOn a summer evening\nAnd it sounds just like a song\nI want more berries\nAnd that summer feeling\nIt’s so wonderful and warm\nBreathe me in\nBreathe me out\nI don’t know if I could ever go without\nI’m just thinking out loud\nI don’t know if I could ever go without\n \nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar high\nWatermelon sugar\n \nStrawberries\nOn a summer evening\nBaby, you’re the end of June\nI want your belly\nAnd that summer feeling\nGetting washed away in you\nBreathe me in\nBreathe me out\nI don’t know if I could ever go without\n \nWatermelon sugar high\n \nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\n \nTastes like strawberries\nOn a summer evening\nAnd it sounds just like a song\nI want your belly\nAnd that summer feeling\nI don’t know if I could ever go without\n \nWatermelon sugar high\n \nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\nI just wanna taste it\nI just wanna taste it\nWatermelon sugar high\n \nWatermelon Sugar\n\n#HarryStyles #WatermelonSugar #FineLine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/E07s5ZYygMg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "E07s5ZYygMg"
        }
      },
      "contentDetails": {
        "videoId": "E07s5ZYygMg",
        "videoPublishedAt": "2020-05-18T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Szc8WXEPRzNFo62ffI4RQvHFuQY",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS45RkQxNjUzMkYxNDJCMzI5",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:16Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Sam Fischer - This City (Official Video)",
        "description": "Sam Fischer – This City (Official Video)\u202c \u202c\u202c\u202c\n\n\u202aListen here: http://smfschr.com/thiscity\u202c\u202c\u202c\n\u202aApple: http://smfschr.com/thiscity/applemusic \u202c\u202c\u202c\n\u202aiTunes: http://smfschr.com/thiscity/itunes \u202c\u202c\u202c\n\u202aSpotify: http://smfschr.com/thiscity/spotify \u202c\u202c\u202c\n\u202aAmazon: http://smfschr.com/thiscity/amazonmusic \u202c\u202c\u202c\n\u202aDeezer: http://smfschr.com/thiscity/deezer \u202c\u202c\u202c\n\nFollow Sam Fischer:\u202c\u202c\u202c\u202c\n\u202aInstagram - http://smfschr.com/Instagram\n\u202aFacebook -  http://smfschr.com/Facebook\n\u202aTwitter - http://smfschr.com/Twitter\nNewsletter - http://smfschr.com/Newsletter\nTikTok- http://smfschr.com/TikTok\n\u202a \u202c\u202c\u202c\u202c\n\u202aFollow On Spotify - https://open.spotify.com/artist/6L1XC7NrmgWRlwAeLJvVtA \u202c\u202c\u202c\n\u202aListen On Apple Music - https://music.apple.com/us/artist/sam-fischer/1110918227 \u202c\u202c\u202c\n\nWATCH THIS CITY LIVE AT FACEBOOK https://www.youtube.com/watch?v=menDpbnjnpk \nWATCH THE USUAL/SOMEONE LIKE YOU LIVE AT FACEBOOK https://www.youtube.com/watch?v=KKHzfqYgkKc\nWATCH READY LIVE AT FACEBOOK https://www.youtube.com/watch?v=i3mXJSFiooM \nWATCH SAME FRIENDS MUSIC VIDEO https://www.youtube.com/watch?v=p8aMAPx3LQc\nWATCH SHADDOWS WILL FALL https://www.youtube.com/watch?v=x0hnq6ANOOE\n\nLyrics:\nI've been seeing lonely people in crowded rooms\nCovering their old heartbreaks with new tattoos\nIt's all about smoke screens and cigarettes\nLooking through low lights at silhouettes\nBut all I see is lonely people in crowded rooms\nThis city is gonna break my heart\nThis city is gonna love me then leave me alone\nThis city's got me chasin' stars\nIt's been a couple months since I felt like I'm home\nAm I getting closer to knowing where I belong?\nThis city is gonna break my heart\nShe's always gonna break your heart\nI remember mornings where my head didn't hurt\nAnd I remember nights when art didn't feel like work\nShe wakes up at noon and she's up 'til three\nShe leaves her perfume all over me\nBut I remember mornings where my head didn't hurt\nOh, this city is gonna…\n\n#SamFischer #ThisCity #SamFischerThisCity #TikTok #ThisCityTikTok #ThisCityLyrics #SamFischerLyrics\n\nCredits:\n\nDirected by Kimberly Stuckwisch (@stuckwisch)\nProducer: Ian Blair (@ian_swank_nsour_blizair)\n\nProduction Company: Little Ugly (www.littleugly.com)\n\nExec. Producers: Gustavo Leon, Jesse McClung (@whiskycleveland)\nCinematographer: Sam Davis (@samdavisdp)\nProduction Designer: Jade Spiers (@liketheegem)\nEditor: Ian Blair (@ian_swank_nsour_blizair)\nPost Supervisor: Naheem Adio (@naheemadio)\nVFX: Sean Apple & Ryan Ross \nColorist: Dylan Hageman (@dylamhageman)\nChoreographer: Monika Felice Smith (@monikafelicesmith)\nProd. Supervisor: Kristen Brancaccio (@kristensreality)\nDirector’s Asst: Jeff Cobb (@cobb_was_here)\nCommissioner: Kat Catteneo (@kat_catt)\nMusic Video Rep: Reprobates (@obreprobates)",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/s3IAHXP1dfs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/s3IAHXP1dfs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/s3IAHXP1dfs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/s3IAHXP1dfs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/s3IAHXP1dfs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "s3IAHXP1dfs"
        }
      },
      "contentDetails": {
        "videoId": "s3IAHXP1dfs",
        "videoPublishedAt": "2020-01-24T08:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qkS60gZ0z3jzseBlwj0hkd5pN7M",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5DQUQ2QkIzNkE2M0M3Nzcw",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:17Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Ariana Grande & Justin Bieber - Stuck with U (Official Video)",
        "description": "SB Projects along with longtime clients Ariana Grande and Justin Bieber release “Stuck with U” to benefit First Responders Children’s Foundation: https://stuckwithu.lnk.to/agjbPV\n\nIn response to the COVID-19 crisis and to help further bolster relief efforts, all net proceeds from the streams and sales of “Stuck with U” will be donated to First Responders Children’s Foundation to fund grants and scholarships for children of healthcare workers, emergency medical technicians (EMTs), paramedics, police officers and firefighters serving at the front lines during the global pandemic. \n\nThat means that by listening, watching, and sharing – you are helping to support families in need. If you would like to make an additional contribution to First Responders Children's Foundation, click the donate button. \n\nThank you to all the fans, friends and first responders who participated.\n\nCreated & directed by: Rory Kramer, Alfredo Flores, Ariana Grande, Justin Bieber, Scooter Braun \n\nLyrics:\n\nI’m not one to stick around\nOne strike and you’re out baby\nDon’t care if I sound crazy\nBut u never let me down \nNo, no\nThat’s why when the sun’s up I’m stayin\nStill laying in your bed sayin\n\nOoh, ooh, ooh, ooh\nGot all this time on our hands\nMight as well cancel our plans\nI could stay here\nFor a \nLifetime\n\nSo lock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothin I, nothin I \nI can do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead and drive me insane\nBaby run your mouth, I still wouldn’t change\nBeing stuck with u\nStuck with u\nStuck with u\nI’m stuck with u \nStuck with u\nStuck with u baby\n\nThere’s nowhere we need to be\nNo, no, no\nIma get to know u better\nKinda hope we’re here forever\nThere’s nobody on the streets\nAnd if u told me the world’s endin\nAin’t no other way that I can spend it\n\n[Pre-Chorus 2]\nOoh, ooh, ooh, ooh\nGot all this time in my hands\nMight as well cancel our plans\nI could stay here\nForever\n\nSo lock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothin I, nothin I\nI can do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead, and drive me insane\nBaby run your mouth, I still wouldn’t trade\nBeing stuck with u \nStuck with u\nStuck with u\nI’m stuck with u\nStuck with u\nStuck with u\n\nOh-oh-oh-oh\nBaby come take all my time\nGo on make me lose my mind\nWe got all that we need here tonight\n\nLock the door, and throw out the key\nCan’t fight this no more, it’s just u and me\nAnd there’s nothing I\nNothing I’d rather do\nI’m stuck with u\nStuck with u\nStuck with u\nSo go ahead and drive me insane\nBaby run your mouth, I still wouldn’t trade all this\nLovin u, hatin u, wantin u\nI’m stuck with u\nStuck with u\nStuck with \nu\nStuck with u\nStuck with u\nStuck with u\n\n#StuckwithU #ArianaGrande #JustinBieber\n\nMusic video by Ariana Grande, Justin Bieber performing Stuck with U. © 2020 Silent Records Ventures, LLC, Def Jam Recordings, a division of UMG Recordings, Inc., and Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/7lAqPq",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pE49WK-oNjU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pE49WK-oNjU"
        }
      },
      "contentDetails": {
        "videoId": "pE49WK-oNjU",
        "videoPublishedAt": "2020-05-08T04:00:09Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-OqcjA5P7pQ0FFzBxj2F3YIp5hk",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5DQTk2NzQ2QkM3ODM0MzlE",
      "snippet": {
        "publishedAt": "2020-06-18T09:19:01Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Galantis x Ship Wrek x Pink Sweat$ - Only A Fool [Official Music Video]",
        "description": "The Official Music video for Galantis x Ship Wrek x Pink Sweat$ - Only A Fool \n\nReleased via Big Beat Records\nOut now: https://lnk.to/OnlyAFoolID\n\nSubscribe for more official content from Galantis: https://BigBeat.lnk.to/GalantisSubscribe\n\nDirected by: Mero Estudio\nProduced by: Dreambear\n\nLYRICS\nThere’s some things about you I know I don’t like \nBut I can’t stand not having you right by my side \nI would change eternity for just one night \nIt might be crazy but at least I know your mine \n\nJust say that you feel the same \nI’ll show you what I really mean \nBecause even when you're afraid I will be your remedy\n \nOnly a fool would turn down your kiss \nCause girl you got magic all in your lips \nI’m so for real this is not for play \nOnly one touch and I'm not the same \nOnly a fool Only a fool \nOnly a fool Only a fool would let you go \n\nJust say that you feel the same \nI'll show you what I really mean \nBecause even when you're afraid \nI will be your remedy \n\nOnly a fool would turn down your kiss \nCause girl you got magic all in your lips \nI’m so for real this is not for play \nOnly one touch and I'm not the same \n\nOnly a fool Only a fool \nOnly a fool Only a fool \nWould let you go \n\n\nFollow Galantis:\nWebsite: http://smarturl.it/GalantisFb\nFacebook: http://smarturl.it/GalantisFb\nTwitter: http://smarturl.it/GalantisTw\nInstagram: http://smarturl.it/GalantisInsta\nSoundCloud: http://smarturl.it/GalantisSc\nSpotify: http://smarturl.it/GalantisPharmacy_Sp\nYouTube: http://youtube.com/wearegalantis\nSnapchat: WeAreGalantis\n\nFollow Ship Wrek:\nYouTube: https://bit.ly/ShipWrekYT\nFacebook: https://www.facebook.com/ShipWrekDJ\nTwitter: https://twitter.com/ShipWrekDJ\nInstagram: https://www.instagram.com/ShipWrekDJ/\nSoundcloud: https://soundcloud.com/THESHIPWREK\nSpotify: https://bit.ly/ShipWrekSP\n\nFollow Pink Sweat$:\nYouTube: https://bit.ly/PinkSweatsYT\nFacebook: https://facebook.com/pinksweats\nTwitter: https://twitter.com/realpinksweats\nInstagram: https://instagram.com/pinksweats\nSoundcloud: https://soundcloud.com/pinksweats\nSpotify: https://bit.ly/PinkSweatsSP\n\nThe official YouTube channel of Atlantic Records artist Galantis. Subscribe for the latest music videos, performances, and more.\n\n#Galantis #ShipWrek #PinkSweats",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jEOyLRu5C1w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jEOyLRu5C1w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jEOyLRu5C1w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jEOyLRu5C1w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jEOyLRu5C1w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jEOyLRu5C1w"
        }
      },
      "contentDetails": {
        "videoId": "jEOyLRu5C1w",
        "videoPublishedAt": "2020-06-16T19:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "FuuNEKSNsgXlw-1Q9CS2CDkgsnw",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5FQTlCQkU5ODExN0VDMTM1",
      "snippet": {
        "publishedAt": "2020-06-12T07:54:49Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "TROLLZ - 6ix9ine & Nicki Minaj  (Official Music Video)",
        "description": "Stream / Download: https://cmg.ffm.to/TROLLZ\nLimited edition merch OUT NOW: https://www.6ix9inestore.com \n\nTROLLZ - 6ix9ine with Nicki Minaj (Official Music Video)\nDirector: CanonF8 & 6ix9ine, David Wept\nEP/Producer: Omar Reynoso & David Wept \nDP: Parris Stewart\nEditor: 6ix9ine, CanonF8, Omar Jones, Kenny Shimm\nArt Director: Omar Reynoso, 6ix9ine\nColorist: Bryan Smaller\nVFX: Max Colt\nProduction: Co- AT.LAS , FatKing Films\nProduced by: SadPony & Jahnei Clarke\nWritten by: Jeremiah Raisen, Daniel Hernandez, Onika Maraj, Aaron Clarke\nMixed by: Big Juice, Wizard Lee & Jahnei Clarke\nMastered by: Wizard Lee\nCover by: Alex Solis\n\nLyrics:\n6ix9ine:\n\nWatch, Mhm\nGlock, Mhm\nCocked, Mhm\nGot it, Mhm\nYou need that I got it \nThat’s cash in my pockets \nThat’s cash one hunnits \nYou need that I got it \nNeed it I got it \nCash pockets \nBands on me \nSticks on me \nYou need that I got it \nThat’s cash in my pockets \nThat’s cash one hunnits \nYou need that I got it \n\nYeah she like how I throw them racks up yeah x3\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah  x5\n\nVERSE:\n\nI know you don't like me, you wanna fight me\nYou don't want no problems at your party don't invite me\nI don't worry about you nig**,  please stop talking about me\nAlways talking about me cause you looking for the clouty\n6ixtynine the nine neena, riding in the 2 seater\nWith 2 neenas\nBaby got that aquafina, it’s cocaiana\nSmoking on that Og reeefer, no TMZ-a\n\nForgeatos on a Benz truck, make her friends f*ck\nTold her she could get Chanel if she let my friend f*ck\nSlide, shinin in the rolls royce, it got wrecked up\nWait hold up, nah I still dont give a f*ck\nVroom Vroom G5\nVroom Vroom we high\nYou the type of N** that will I never wanna be like\nYou the type of b*tch that will never get a reply\nHi hater, Bye hater, Vroom\n\n\nYeah she like how I throw them racks up yeah x5\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah x 5\n\n\nNicki Minaj:\n\nMinaj:\n\nDolla Dolla Bill come get her\nEven ya man KNOW Nicki's do it betterrrrrrrrrrr\nI know you don't like me, you wanna fight me\nAlways on my page, never double tap like me\nBaddies to my left and my right, never chase a corny N** put that on my life\nJust put it in his face, all this cake\nHe wanted a taste\nHe sippin on that ace \nItty bitty waste, pretty face\nYeah, eat it cookie monsta\nHe a slave to this p*ssy call me Masta\nReal wet, I say slurp it like its pasta\nThey get nervous when its Nicki on the Roster\nSomebody usher this N* into a clinic\nMy flow still sick I ain't talking a pandemic\nI write my own lyrics, a lot of these B*ches gimmicks\nThey study Nicki style now all of them want mimic \nTalking bout Snitches when it’s snitches in your camp\nNever stand alone you always itching for a stamp\nMe, I’m still money wrists light up like a lamp\nThey gon have to send they best fighter for the champ\n\nRacks, I got em. Mary, I’m Poppin\nThey keep hating, but still watching\nCheck the boards, I’m still topping\nBust down or Plain Jane, I got options\nIt's a bunch of mini-me’s, I’m the one they mocking\nShowed you how to get a bag now you going shopping\nWhen I come out all the sneak b*tches start plotting\nWhen I come out its a sweep b*tches start mopping\n\n6ix9ine:\n\nYeah she like how I throw them racks up yeah x5\nKeep on throwing that cash yeah x5\nKeep on throwing that a$$ yeah x5\nBenz truck in the back yeah x 5\n\nWatch, Mhm\nGlock, Mhm\nCocked, Mhm\nGot it, Mhm\n\nNicki Minaj:\nIf you like I throw it fast, real fast fast fast\nHe singing my old song yelling a$$ a$$ a$$\nThey be speeding, trying to be me then they crash crash crash\nStill a hundred like the number on my dash dash dash\n\nThat Real A$$ ain’t keep yo N* home!\n\n\n\n#6ix9ine #nickiminaj #TROLLZ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/oNg3M9IJJlY/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "oNg3M9IJJlY"
        }
      },
      "contentDetails": {
        "videoId": "oNg3M9IJJlY",
        "videoPublishedAt": "2020-06-12T04:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "QHhUmMXiamncY5gNz5sqbonVLCg",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS40RDQ3MEU3MUQzM0E0QkIy",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:18Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "SAINt JHN - Roses (Imanbek Remix) (Official Music Video)",
        "description": "SAINt JHN - Roses (Imanbek Remix) (Ghetto Lenny One Takes) [Lyric Video]\nStream/Download/Buy: https://marvellousmusic.lnk.to/rosesID\nOfficial Video at @Marvellous: https://www.youtube.com/watch?v=jOMHWVv0xX4&lc\n\n\n+ SUBSCRIBE HERE ▶ https://www.youtube.com/channel/UCxmkHW42679-8rLTAsRyIgA?sub_confirmation=1\n\n\n---Saint Jhn Music\nListen to Ghetto Lenny’s Love Song ▶https://saintjhn.lnk.to/GhettoLennysLoveSongs\n\n\n\nWATCH TRAP MUSIC VIDEO ▶ https://youtu.be/Mf6oZPPYIXI\nWATCH ROSES MUSIC VIDEO ▶ https://youtu.be/XHA-QM-q-3E\nWATCH BORDERS MUSIC VIDEO ▶ https://youtu.be/FPHpS34xNf0\nWATCH LUST MUSIC VIDEO ▶ https://youtu.be/N8Ykxh9n5Hg\nWATCH 3 BELOW MUSIC VIDEO ▶ https://youtu.be/R5GNIZP0ceE\nWATCH 1999 MUSIC VIDEO ▶ https://youtu.be/ubWN0peTgHI\nWATCH BEEN THRU THIS BEFORE MUSIC VIDEO ▶ https://youtu.be/9A6QrnFpFjI\nWATCH WEDDING DAY ONE TAKE ▶ https://youtu.be/bu7E2Y_GfVM\nWATCH 5 THOUSAND SINGLES ONE TAKE ▶ https://youtu.be/2N7YPXr326w\nWATCH WHO DO YOU BLAME ONE TAKE ▶ https://youtu.be/Nqm3u3Lsnas\nWATCH 94 BENTLEY ONE TAKE▶ https://youtu.be/o5E65bO9exA\nWATCH MONICA LEWINSKY ONE TAKE ▶ https://youtu.be/yx34SxwfkmU\nWATCH BERETTA LAKE MUSIC VIDEO ▶ https://youtu.be/AfC1Ax1moNc\n\n\n\nSaintJhn:\nChristian Sex Club | https://christiansexclub.com/\nSpotify | https://open.spotify.com/artist/0H39MdGGX6dbnnQPt6NQkZ?si=ifxhkVxIRje1dmUc6cF5Ag\nApple Music | https://music.apple.com/us/artist/saint-jhn/1133442919\nSoundCloud | http://soundcloud.com/SaintJhn\nInstagram | http://instagram.com/SaintJhn\nTwitter | http://twitter.com/SaintJhn\nTikTok | https://tiktok.com/@SaintJhn\nFacebook | https://facebook.com/saintjhn\nWebsite | http://saintjhn.com\n\n\n\n#SAINtJHN #RosesImanbekRemix #HipHop",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2zToEPpFEN8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2zToEPpFEN8"
        }
      },
      "contentDetails": {
        "videoId": "2zToEPpFEN8",
        "videoPublishedAt": "2020-03-06T00:30:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bTxjTZb5ibJ6o_i17QvB0oDqZfQ",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4wNTY1NzNDMDBBODM5NzI1",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:19Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Little Mix - Break Up Song (Official Video)",
        "description": "Little Mix - Break Up Song (Official Video)\n\nListen to our new single 'Break Up Song' Here: https://smarturl.it/BreakUpSongLM\nApple Music: https://smarturl.it/BreakUpSongLM/applemusic\nSpotify: https://smarturl.it/BreakUpSongLM/spotify\nItunes: https://smarturl.it/BreakUpSongLM/itunes\nYouTube Music: https://smarturl.it/BreakUpSongLM/youtubemusic\nAmazon Music: https://smarturl.it/BreakUpSongLM/amazonmusic\nDeezer: https://smarturl.it/BreakUpSongLM/deezer\n\n\u202aFollow Us On Spotify - https://spoti.fi/2Qk4m4E\u202c\n\u202aListen On Apple Music -https://smarturl.it/LittleMix_AppleMusic\n\u202aListen On Amazon Music - https://smarturl.it/LittleMix_Amazon\u202c\nSubscribe on YouTube - http://lttlmx.com/SubscribeYT\nSign up to our newsletter: http://lttlmx.com/Newsletter \n\nWATCH WASABI MUSIC VIDEO ► https://smarturl.it/LMWasabi\nWATCH ONE I'VE BEEN MISSING MUSIC VIDEO ► https://smarturl.it/LittleMixOIBM\nWATCH BOUNCE BACK MUSIC VIDEO ►\u202c http://smarturl.it/LMBounceBack/youtube\u202c\n\u202aWATCH THINK ABOUT US MUSIC VIDEO ► http://smarturl.it/ThinkAboutUs/youtube\u202c\n\u202aWATCH WOMAN LIKE ME MUSIC VIDEO ► https://smarturl.it/LittleMix-WLM\u202c\n\u202aWATCH THINK ABOUT US MUSIC VIDEO ► https://smarturl.it/ThinkAboutUs/yout...\u202c\n\u202aWATCH TOUCH MUSIC VIDEO ► https://smarturl.it/LittleMix-T\u202c\n\u202aWATCH BLACK MAGIC MUSIC VIDEO ► https://smarturl.it/LittleMix-BM\u202c\n\u202aWATCH POWER MUSIC VIDEO ► https://smarturl.it/LittleMix-P\u202c\n\u202aWATCH SECRET LOVE SONG MUSIC VIDEO ► https://smarturl.it/LittleMix-SLS\u202c\n\n\u202aFollow Little Mix:\u202c\n\u202aInstagram - https://www.instagram.com/littlemix/\u202c\n\u202aFacebook - https://facebook.com/LittleMixOfficial/\u202c\n\u202aTwitter - https://twitter.com/LittleMix\u202c\nTikTok - https://smarturl.it/LMTikTok\n\nLyrics:\nThis is not a second chance no, no baby \nThis is not a new romance not tonight (uh uh uh) \nThis is for all the nights I cried for ya baby\nHoping you could be the one that could love me right \n\nI’ll be good all by myself\nYeah I’ll find a way to dance without you \nIn the middle of the crowd\nI’ll forget all of the pain inside, oh \n\nSo tonight I’ll sing another\nAnother break up song\nSo turn it up, let it play on and on and on and on \nFor all the times they screwed us over\nLet it play on and on and on \nJust another break up song \n\nAin’t no more tears\nAin’t gonna cry\nBoy I’ll do anything to get you off my mind \nI’m gonna dance\nUnder the lights\nBoy I’ll do anything to get you off my mind \n\nI ain’t even gonna call ya\nNo baby  \nThe best thing I ever did was to let you go (uh uh uh)\nDid you think you were the only one who could save me?\nI ain’t gonna take you back like I did before, no \n\nCos I’ll be good all by myself\nYeah I’ll find a way to dance without you \nIn the middle of the crowd\nI’ll forget all of the pain inside, oh \n\nSo tonight I’ll sing another\nAnother break up song\nSo turn it up, let it play on and on and on and on \nFor all the times they screwed us over\nLet it play on and on and on \nJust another break up song \n\nAin’t no more tears\nAin’t gonna cry\nBoy I’ll do anything to get you off my mind \nI’m gonna dance\nUnder the lights\nBoy I’ll do anything to get you off my mind \n\nI don’t wanna turn back time \nCos what’s another lonely night?\nI know under these lights I’m good without you \nFor all those tears that I cried \nI sing it louder tonight \nLet it play on and on and on and on and on \n\n\u202a#LittleMix #BreakUpSong #LittleMixBreakUpSong #Wasabi #LittleMixWasabi #LittleMixOfficial #LittleMixShoutOutToMyEx #LittleMixTopTracks #BounceBack #LittleMixOfficialVideo #LittleMixEssentials #LittleMixLive #BestOfLittleMix #BlackMagic  #ShoutOutToMyEx #LittleMixLyrics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Zte1KtYNx6Y/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Zte1KtYNx6Y/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Zte1KtYNx6Y/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Zte1KtYNx6Y/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Zte1KtYNx6Y/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Zte1KtYNx6Y"
        }
      },
      "contentDetails": {
        "videoId": "Zte1KtYNx6Y",
        "videoPublishedAt": "2020-05-08T08:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7GC7sNGhgZnzaSzdSflmD1orBhI",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4wQjQxMUNCQkEwMjc4MENC",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:20Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Lady Gaga - Stupid Love (Official Music Video)",
        "description": "\"RAIN ON ME” \nTHE NEW SINGLE & VIDEO FROM LADY GAGA WITH ARIANA GRANDE\nOUT NOW\nhttp://smarturl.it/RainOnMeChromatica\nWATCH THE VIDEO: https://youtu.be/AoAm4om0wTs\n\n“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT MAY 29\nPRE-ORDER NOW\nhttp://smarturl.it/Chromatica\n\nShot entirely on the iPhone 11 Pro\nDirected by Daniel Askill\n\nListen On @applemusic #ShotOniPhone: http://apple.co/StupidLoveYT\nListen on Spotify: http://smarturl.it/StupidLove/spotify\nListen on Amazon: http://smarturl.it/StupidLove/amazonunlimited\nListen on YouTube Music: http://smarturl.it/StupidLove/youtubemusic\n\nSHOP THE OFFICIAL CHROMATICA COLLECTION: http://smarturl.it/GagaStore\n\nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News\n\nMusic video by Lady Gaga performing Stupid Love. © 2020 Interscope Records\n\nhttp://vevo.ly/5UJ8jb",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5L6xyaeiV58/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5L6xyaeiV58"
        }
      },
      "contentDetails": {
        "videoId": "5L6xyaeiV58",
        "videoPublishedAt": "2020-02-28T05:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "4YSBaWnRV270zAC3ZBi2jKwYb_o",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4xMzY0MzI4NTZEQ0ExMDMy",
      "snippet": {
        "publishedAt": "2020-01-28T09:03:47Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Harry Styles - Adore You (Official Video)",
        "description": "Listen to Harry Styles’ new album ‘Fine Line’ now: https://HStyles.lnk.to/FineLineAY \n\nHARRY STYLES. LOVE ON TOUR. 2020.\nhttps://hstyles.co.uk/tour\n\nFollow Harry Styles:\nFacebook: https://HarryStyles.lnk.to/followFI\nInstagram: https://HarryStyles.lnk.to/followII\nTwitter: https://HarryStyles.lnk.to/followTI\nWebsite: https://HarryStyles.lnk.to/followWI\nSpotify: https://HarryStyles.lnk.to/followSI\nYouTube: https://HarryStyles.lnk.to/subscribeYD\n\nDirected by Dave Meyers\nWritten by Chris Shafer & Dave Meyers\nStarring Harry Styles\nScore by Kid Harpoon\nProduced by Nathan Scherrer\nLine Produced by Jo Coombes, Ellen De Faux, & Tom Gardner\nCinematographer Scott Cunningham\nProduction Designer Laura Ellis Cricks\nMr. Styles Styling by Harry Lambert\nCast Styling by Verity May Lane\nEdited by Alyssa Oh\nTelecine Stefan Sonnenfeld\nVFX by Mathematic \nSound Design Chris Afzal at Wave Studios\nPost Produced by Adam Parker & Nathan Scherrer\nVideo Commissioner Bryan Younce\n \nA Freenjoy Production \n \nFull Stop Management\nColumbia Records\nContent Creative\n \nThanks:\nAudri Kenley\nLS Productions\nSomesuch\nEntire cast and crew\n\nLyrics:\n\nWalk in your rainbow paradise\nStrawberry lipstick state of mind\nI get so lost inside your eyes\nWould you believe it?\n\nYou don’t have to say you love me\nYou don’t have to say nothing\nYou don’t have to say you’re mine\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nYour wonder under summer skies\nBrown skin and lemon over ice\nWould you believe it?\n\nYou don't have to say you love me\nI just wanna tell you something\nLately you’ve been on my mind\n\nHoney\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\nLike it’s the only thing I’ll ever do\n\nIt’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\nI’d walk through fire for you\nJust let me adore you\nOh honey\nOh honey\n\nI’d walk through fire for you\nJust let me adore you\nLike it’s the only thing I’ll ever do\n\n#HarryStyles #AdoreYou #FineLine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VF-r5TtlT9w/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VF-r5TtlT9w"
        }
      },
      "contentDetails": {
        "videoId": "VF-r5TtlT9w",
        "videoPublishedAt": "2020-01-09T14:00:03Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "TuK1HsG-U-6CJdUcvsM5a86ImVY",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5ENzdFQUJCNjQwQjM5MDQz",
      "snippet": {
        "publishedAt": "2020-06-05T18:30:09Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "The 1975 - Guys (Official Video)",
        "description": "The 1975 - Guys (Official Video)\n\nThe new album from The 1975 ‘Notes On A Conditional Form’ is Out Now - https://The1975.lnk.to/NOACFID\n\n\nhttps://www.The1975.com \n\nhttps://www.mindshower.ai\n\n#The1975\n\nMusic video by The 1975 performing Guys. © 2020 Dirty Hit, under exclusive licence to Polydor Records and Interscope Records",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/X0mzMd17jG0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/X0mzMd17jG0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/X0mzMd17jG0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/X0mzMd17jG0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/X0mzMd17jG0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "X0mzMd17jG0"
        }
      },
      "contentDetails": {
        "videoId": "X0mzMd17jG0",
        "videoPublishedAt": "2020-05-21T18:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "eV_tbZpuKthR70IOJUF1hyUYg_c",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4zMjYzOThCMjI5Mzc2ODhF",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:21Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Doja Cat - Say So (Official Video)",
        "description": "Hot Pink out now! https://smarturl.it/xHotPink \n\nConnect To Unlock Special “Say So” Content: https://smarturl.it/HowJuicyAreYou?IQid=yt\n\nSubcribe to Doja Cat's Official YoutTube Channel: https://smarturl.it/DojaYTSubcribe \n\nDirector: Hannah Lux Davis @hannahluxdavis\nExecutive Producer: Brandon Bonfiglio @bbonfiglio\nCommissioner: Sam Houston @samhoustonishere\nChoreographer: Cortland Brown @fulloutcortland\nProduction Company: London Alley @londonalley\nCameos: @donte.colley and @yodelinghaley\n\nFollow Doja Cat:\nhttps://www.facebook.com/DojaCat\nhttps://www.instagram.com/dojacat/\nhttp://www.dojacat.com/\n\n#HotPink #DojaCat #SaySo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pok8H_KF1FA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pok8H_KF1FA"
        }
      },
      "contentDetails": {
        "videoId": "pok8H_KF1FA",
        "videoPublishedAt": "2020-02-27T15:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "uIT-syqUvLCOUkb0EKK-ru5z5J8",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5CODc2NjAwMzkzMjQ0QTkx",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:21Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Ava Max - Kings & Queens [Official Music Video]",
        "description": "\"Kings & Queens\" Available Now\nDownload/Stream: https://AvaMax.lnk.to/Kings-QueensID \n\r\nSubscribe for more official content from Ava Max: https://Atlantic.lnk.to/AvaMaxSubscribe\r\n\r\nFollow Ava Max\r\nFacebook - https://www.facebook.com/avamaxofficial\r\nInstagram - https://www.instagram.com/avamax\r\nTwitter - https://twitter.com/avamax\r\nhttp://avamax.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jH1RNk8954Q/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jH1RNk8954Q/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jH1RNk8954Q/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jH1RNk8954Q/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jH1RNk8954Q"
        }
      },
      "contentDetails": {
        "videoId": "jH1RNk8954Q",
        "videoPublishedAt": "2020-03-27T07:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "roJS5qk6F3n5WyoEmXNg2DgNNZ4",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS41RkVDODE4RkU3RkNEOThD",
      "snippet": {
        "publishedAt": "2020-06-30T16:17:00Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "KILLBOY - 666 (prod. by KILLBOY) [OFFICIAL VIDEO]",
        "description": "STREAM 666: https://KILLBOY.lnk.to/666ID\n\nSUBSCRIBE: https://KILLBOY.lnk.to/SubscribeID\n\nJOIN MY MAILING LIST: https://www.killboymusic.com/\n\nFOLLOW:\nhttps://www.facebook.com/killboy\nhttps://www.twitter.com/killboy\nhttps://www.instagram.com/killboy\nhttps://www.soundcloud.com/itskillboybich\nhttps://www.tiktok.com/@itskillboybich\n\nLYRICS: \nWhen you coming home\nWhere you at? Homie who you with?\nProbably with that bitch\nWatching stories like it's Netflix\nYou know I'm just kidding\nNaw for real, hey it's been a minute\nSee my dot dot dot getting hot\nYou better catch up with it\n\nYou know from the jump\nI'm crazy as fuck\n1 AM you know I'm kinda drunk\nI just want yo love\nCut you up and put you in the trunk\nIf you fucking up\nNah, you know that shit aint really nothin\nI just want your love\n\nIt's just one of the 6 6 6 ways that I love you, bitch\nYou when I be acting out, I'm tryna get that reaction\nSo when you're with your friends\nAnd I'm blowing up the phone\nYou know I do that shit to get you back home\nIt's just one of the 6 6 6 ways that I love you,\nbitch\n\nHe out with his friends, afterhours\nHe might hit my line\nI aint doing shit\nBut I'm lit & so I hit decline\nHe say SWEAR TO GOD\nI WILL KILL U IF YOU EVER TRY\nBut I don't fuck around\nI just like fuckin' with his mind\n\nYou know from the jump\nWe crazy as fuck\n4 AM got yayo in the bag\nPerri in the cup\nOne year ago we was in the trap\nNow it's blowing up\nAlways knew that shit aint really nothing\nI just want your love\n\nIt's just one of the 6 6 6 ways that I love you, bitch\nYou when I be acting out, I'm tryna get that reaction\nSo when you're with your friends\nAnd I'm blowing up the phone\nYou know I do that shit to get you back home\nIt's just one of the 6 6 6 ways that I love you,\nbitch\n\nEveryone say \"first you must love yourself\"\nand that's cool & shit but you found someone else\nNow I've seen the worst, and from what I can tell\nLove can be Heaven or it can be Hell\n\nIt's just one of the 6 6 6 ways that I love you, bitch\nYou when I be acting out, I'm tryna get that reaction\nSo when you're with your friends\nAnd I'm blowing up the phone\nYou know I do that shit to get you back home\nIt's just one of the 6 6 6 ways that I love you,\nbitch\n\n#KILLBOY",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Mv4ZS3WL2Q8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Mv4ZS3WL2Q8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Mv4ZS3WL2Q8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Mv4ZS3WL2Q8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Mv4ZS3WL2Q8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Mv4ZS3WL2Q8"
        }
      },
      "contentDetails": {
        "videoId": "Mv4ZS3WL2Q8",
        "videoPublishedAt": "2020-06-25T16:00:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Bb27PkktLh-vP6L_y1LrqLOIORY",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS40NkFGNDc5OEI4NkY0NEQw",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:22Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "The Weeknd - In Your Eyes (Official Video)",
        "description": "Official music video by The Weeknd performing \"In Your Eyes\"– 'After Hours\" available everywhere now: http://theweeknd.co/afterhoursYD\n\n►Subscribe to The Weeknd on YouTube: http://theweeknd.co/subscribeYD \n\n►Get tickets: https://www.theweeknd.com/tour\n\n►Get exclusive merch: https://shop.theweeknd.com/\n\n►Follow The Weeknd:\nhttps://twitter.com/theweeknd \nhttps://www.facebook.com/theweeknd \nhttps://www.instagram.com/theweeknd \nhttps://www.theweeknd.com \n\nDirector: Anton Tammi\n\nStarring: Zaina Miuccia\n\nProduction Company: Somesuch\nExecutive Producer: Saskia Whinney\n\nProducer: Sarah Park\n\nDirector of Photography: Oliver Millar\n2nd Unit DP: Devin \"Daddy\" Karringten\nSteadicam Op: Nick Mueller\n\nProduction Designer: Miranda Lorenz\nCostume Designer: Alana Morshead\nSFX Makeup: Koji Ohmura\n\nMake up Artist: Fatma Bendris\nMake up Artist: Christine Nelli\n\n1st AD: Kenneth Taylor\n\nEditor: Andreas Arvidsson\nAssistant Editor: Janne Vartia\n2nd Assistant Editor: Tim Montana\nPost Production Supervisor: Alec Ernest\n\nColorist: Nicke Jacobsson\nAssistant Colorist: Sander van Wijk\nEditorial/Color Talent Mgmt: Sofia Misgena & Helene\nMisgena @ The Talent Group\n\nSound Design: Anton Ahlberg @ Red Pipe Studios\n\nVFX: Mathematic\nTitle Design: Aleksi Tammi\n\nLyrics:\n\nI just pretend that I’m in the dark\nI don’t regret cause my heart can’t take a loss\nI’d rather be so oblivious\nI’d rather be with you\nWhen it’s said, when it’s done yeah\nI don’t ever wanna know\nI can tell what you done yeah\nWhen I look at you\nin your eyes\nI see there’s something burning inside you\nOh inside you\nIn your eyes, I know it hurts to smile\nBut you try to, oh you try to\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes, you lie but I don’t let it define you\nOh define you\nI tried to find love in someone else too many times\nBut I hope you know I mean it\nWhen I tell you you’re the one that was on my mind oh\nWhen it’s said, when it’s done\nI would never let you know\nI’m ashamed of what I done\nWhen I look at you\nIn your eyes\nI see there’s something burning inside you\nOh inside you\nIn your eyes I know it hurts to smile\nBut you try to, oh you try to\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes you lie but I don’t let it define you\nOh define you\nIn your eyes\nI see there’s something burning inside you\nOh inside you\nYou always try to hide the pain\nYou always know just what to say\nI always look the other way\nI’m blind, I’m blind\nIn your eyes you lie but I don’t let it define you\nOh define you\n\n#TheWeeknd #InYourEyes #AfterHours\n\n\nMusic video by The Weeknd performing In Your Eyes. © 2020 The Weeknd XO, Inc., manufactured and marketed by Republic Records, a division of UMG Recordings, Inc.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/dqRZDebPIGs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "dqRZDebPIGs"
        }
      },
      "contentDetails": {
        "videoId": "dqRZDebPIGs",
        "videoPublishedAt": "2020-03-23T16:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "PKqd4UutE8AkExZIPwaPdy05a24",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4yMkNCNDUwMTZGMzQ4NzA3",
      "snippet": {
        "publishedAt": "2020-07-01T08:54:19Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "IV JAY - The Hard Way [Official Music Video]",
        "description": "IV Jay - The Hard Way [Official Music Video]\n\n\"The Hard Way\" Available Now: https://ivjay.lnk.to/TheHardWayID\n\n\"Love Song\" Available Now: https://ivjay.lnk.to/LoveSongID\n\n\"IV\" EP Available Now: https://ivjay.lnk.to/IVAY\n\n\"Pretty Wings\" Available Now: https://ivjay.lnk.to/PrettyWings\n\nKeep Up with IV JAY:\nWebsite: http://www.ivjay.com\nIG: https://www.instagram.com/iv.jay/\nFB: https://www.facebook.com/official.iv.jay\nSoundCloud: https://soundcloud.com/ivjay\n\n#IVJAY #TheHardWay #RnB",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/r-vITf13AP0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/r-vITf13AP0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/r-vITf13AP0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/r-vITf13AP0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/r-vITf13AP0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "r-vITf13AP0"
        }
      },
      "contentDetails": {
        "videoId": "r-vITf13AP0",
        "videoPublishedAt": "2020-06-24T17:59:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xeIFhXRmzFQmh342EkFl6A035OA",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43OERGMEEyMTQxRjlEQ0FB",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:24Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Doja Cat - Boss B*tch (from Birds of Prey: The Album) [Official Music Video]",
        "description": "Doja Cat - Boss B*tch (from Birds of Prey: The Album) \r\nDirected by: Jack Begert @psycho-films\n \nStream/Download: https://BirdsOfPrey.lnk.to/BossBitchID\n\nSubscribe for more official content from Atlantic Records:\nhttps://Atlantic.lnk.to/subscribe\n\nFollow Doja Cat:\nhttps://www.dojacat.com/\nhttps://www.instagram.com/dojacat/\nhttps://twitter.com/DojaCat/\nhttps://www.facebook.com/DojaCat/\n\nFollow Birds of Prey:\nhttps://twitter.com/birdsofpreywb\nhttps://www.instagram.com/birdsofprey/\n\nFollow Birds of Prey Soundtrack:\nhttps://twitter.com/BOPSoundtrack\nhttps://www.instagram.com/birdsofprey...\n \nSubscribe for the latest official music videos, official audio videos, performances, bts and more from our artists and projects.\nhttps://Atlantic.lnk.to/YTSubscribe\n\n#DojaCat #BossBitch #BirdsOfPrey\n\nSing Along At Home with Your Favorite The Greatest Showman Soundtracks ➤ https://bit.ly/AtlanticSing\nBest Sing Along Songs at Home from Atlantic Records ➤ https://bit.ly/AtlanticSingAlong\nHome Workout Music from Atlantic Records ➤ https://bit.ly/AtlanticWorkOut\nRomantic Music To Listen To At Home from Atlantic Records ➤ https://bit.ly/AtlanticRomantic\nWork From Home Music from Atlantic Records ➤ https://bit.ly/AtlanticWork",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RsW66teC0BQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RsW66teC0BQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RsW66teC0BQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RsW66teC0BQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RsW66teC0BQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RsW66teC0BQ"
        }
      },
      "contentDetails": {
        "videoId": "RsW66teC0BQ",
        "videoPublishedAt": "2020-01-23T20:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "qgrLfgSMqqM_xu_qAacwbPId0GE",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS40QzMxOUYzQTI4NzBFOUY2",
      "snippet": {
        "publishedAt": "2020-06-16T08:16:15Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Anna Clendening - Get Me [Official Music Video]",
        "description": "Download/Stream \"Get Me\": https://annaclendening.lnk.to/GetMeID\n\nSubscribe for more official content from Anna Clendening: https://annaclendening.lnk.to/SubscribeFC\n\nProduced and Directed by Weird Life\nVideography by Weird Life & Wallace Morgan\nEdit and Color by Drew Angle\nVFX by Rick Gorge\n \n\nFollow:\nhttp://instagram.com/annaclendening\nhttp://twitter.com/annaclendening\nhttp://facebook.com/annaclendening\nhttp://annaclendening.com\nhttps://vm.tiktok.com/owGYqx/\n\nLyrics\nDo you think about me every night\nWhen you turn out all the lights\nTv on so you don’t have to sleep alone\n\nDo you think back on all of our fights\nStill convinced I’m out my mind\nDid you get a little too drunk and pick up the phone\n\nYeah I got you tattooed on my skin\nTo remind myself that I’m better than this Did you really think you could show up and I’d let you in\n\nYou didn’t get me then\nSo you don’t get me now\nYou don’t get me now\nI didn’t understand\nHow you could just walk out\nBut I do now\nI do now\nNow I’m better\nBetter than I ever was\nBetter than I ever was\n\nYou used to hate when I got sad\nSaid it always made you feel bad\nNever got that it wasnt about you\nAt all\n\nUsed to think we were so good sometimes\nThought that maybe if I gave you your time You’d come around And now you’re coming around\n\nYou didn’t get me then\nSo you don’t get me now\nYou don’t get me now\nI didn’t understand\nHow you could just walk out\nBut I do now\nI do now\nNow I’m better\nBetter than I ever was\nBetter than I ever was\n\n#AnnaClendening #GetMe #OfficialVideo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/r7FtsebJaJQ/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/r7FtsebJaJQ/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/r7FtsebJaJQ/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/r7FtsebJaJQ/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/r7FtsebJaJQ/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "r7FtsebJaJQ"
        }
      },
      "contentDetails": {
        "videoId": "r7FtsebJaJQ",
        "videoPublishedAt": "2020-06-12T04:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nq8xFxxjHwP4sfBHOXoAbsMB4as",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5FNTI2MEVDMzEzMzIxNjIx",
      "snippet": {
        "publishedAt": "2020-06-17T16:01:33Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Petit Biscuit - I Leave Again (with Shallou) (Lyrics)",
        "description": "Petit Biscuit collaborates with fellow producer and longtime friend Shallou on their new song “I Leave Again”.\n\n“We first met when Shallou supported me on my first American tour and what I saw on stage was absolutely crazy. Joe is a passionate guy and a nice human being and we became friends. I came to the US in April 2019 for a change of scenery to get some inspiration for my new music and I invited Joe to come to where I was staying to work on some music together. We spent hours listening to a lot of different stuff and tried lots of different things, but it wasn’t until a few months later that we had finally found the perfect tune to collaborate on. \"I Leave Again\" is about the end of a relationship with all of its nostalgia, but we've tried to turn it into \"the song to a new start,\" with all of the excitement that it can bring.” - Petit Biscuit \n\n“In some ways this pandemic has made musicians from all over the world more likely to connect. I have traditionally made music on my own, then sharing the demos with artists over the internet to collaborate with. These past years I’ve made an effort to connect more in person in the studio. Now that it can’t happen, I feel like a lot of bedroom producers are reaching out again the old way. Petit and I connected on this one online and it was really fun to work on something that feels like a true combination of our sounds” - Shallou\n\nDirected by Quentin Deronzier - https://quentinderonzier.studio/\n\n------\n\nThe sky’s so cold\nI feel you slow\nYour mind is not\nLike it was before\n\nI delete all\nPut thoughts on hold\nI try to feel you\nBut you are gone\n\nThe fire’s cold\nInside your soul\nI feel the weight\nOf what we were\n\nI delete all\nPut thoughts on hold\nI try to feel you\n\nYour eyes were bright\nI felt the shine\nMiss the summers\nWe used to hide\nThe city lights\nOn this blue night\nYou used to tell me that its alright\n\nI chill my bones\nOut in the cold\nWalk the pathways\nWe used to know\nThese quiet towns\nWe'll leave behind\nI try to feel you\n\nThere’s no need to stay\nSo it’s time to take a chance\nI don’t want to explain\nTo my friends I leave again,\nI leave again\n\n#PetitBiscuit #Shallou #ILeaveAgain #Lyrics #ILeaveAgainLyrics",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/pjR1wUkBnEg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/pjR1wUkBnEg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/pjR1wUkBnEg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/pjR1wUkBnEg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/pjR1wUkBnEg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "pjR1wUkBnEg"
        }
      },
      "contentDetails": {
        "videoId": "pjR1wUkBnEg",
        "videoPublishedAt": "2020-05-20T15:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Xq6ymFxte-2VC-Enr7J8uKtbotQ",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS5BOEJCMDgxMzcxNkQ0QUIz",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:25Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Lady Gaga, BLACKPINK - Sour Candy (Audio)",
        "description": "“CHROMATICA”\nTHE SIXTH ALBUM BY LADY GAGA\nOUT NOW\nhttp://smarturl.it/Chromatica\n\n“RAIN ON ME” \nTHE NEW SINGLE & VIDEO FROM LADY GAGA WITH ARIANA GRANDE\nOUT NOW\nhttp://smarturl.it/RainOnMeChromatica\nWATCH THE VIDEO: https://youtu.be/AoAm4om0wTs\n\nSHOP THE OFFICIAL CHROMATICA COLLECTION: http://smarturl.it/GagaStore\n\nFOLLOW LADY GAGA:\nFacebook: http://gaga.lk/facebook\nInstagram: http://gaga.lk/Instagram\nSnapchat: http://gaga.lk/Snapchat\nTwitter: http://gaga.lk/Twitter\nWebsite: http://www.ladygaga.com/\nOfficial Store: http://gaga.lk/GagaStore\nEmail List: http://gaga.lk/News",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/fnPn6At3v28/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/fnPn6At3v28/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/fnPn6At3v28/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/fnPn6At3v28/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/fnPn6At3v28/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "fnPn6At3v28"
        }
      },
      "contentDetails": {
        "videoId": "fnPn6At3v28",
        "videoPublishedAt": "2020-05-28T11:00:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "MzvUFmnMivfpUbgOoo6yhwkhQ2k",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43NThCMEM5MDVGRUQzNjAw",
      "snippet": {
        "publishedAt": "2020-06-16T08:16:06Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "HONNE - no song without you",
        "description": "Our new mixtape 'no song without you' is out now: https://lnk.to/NSWY-Mixtape\nSubscribe to our channel: https://atlanti.cr/HONNE-SUBSCRIBE\n\nDirected/Animated by Holly Warburton - https://www.instagram.com/hollywarbs\n\nhttp://hellohonne.com\nhttp://instagram.com/hellohonne\nhttp://twitter.com/hellohonne\nhttp://facebook.com/hellohonne\nhttp://youtube.com/hellohonne\n\n#HONNE #nosongwithoutyou\n\nLyrics:\nOh I’d be nothing without you\nOh there’d be no song without you\nWithout you\n \nWhen I’m down and out and feel like\nThere is nothing left for me\nYou save me\n \nOh I’d feel nothing without you\nOh there’d be no song without you\nWithout you\n \nWhen I got into a fight and \nYou stood right up for me\nYou save me\nYou save me\n \nWhen I worry ‘bout some stupid shit\nYou always reassure me\nYou save me\n \nOh I’d be nothing without you\nOh there’d be no song without you\nWithout you\n \nThere would be no song without you\nThere would be no song without you\nThere would be no song without you\nWithout you, without you, without you",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/WXOlNBDVt0o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/WXOlNBDVt0o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/WXOlNBDVt0o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/WXOlNBDVt0o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/WXOlNBDVt0o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "WXOlNBDVt0o"
        }
      },
      "contentDetails": {
        "videoId": "WXOlNBDVt0o",
        "videoPublishedAt": "2020-06-12T12:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "BGRLjyo9OaP88n0HqaiWxXaQ2nU",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS4zMEZBRDUzOTA5QTc4MDVD",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:26Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Joel Corry -  Lonely [Official Video]",
        "description": "Joel Corry -  Lonely [Official Video]\n\nLonely OUT NOW: https://atluk.lnk.to/Lonely\n\nFollow Joel Online:\nhttps://www.joelcorry.com/\nhttps://www.facebook.com/JoelCorry/\nhttps://www.instagram.com/joelcorry\nhttps://twitter.com/JoelCorry",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/IIG4GgGKdKo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/IIG4GgGKdKo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/IIG4GgGKdKo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/IIG4GgGKdKo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/IIG4GgGKdKo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "IIG4GgGKdKo"
        }
      },
      "contentDetails": {
        "videoId": "IIG4GgGKdKo",
        "videoPublishedAt": "2020-01-24T08:00:51Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "-DTYb-owk2TIWRewpBOr1hBw7HA",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS43NjU1MjFDM0QzMEZCODA5",
      "snippet": {
        "publishedAt": "2020-05-01T17:45:00Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Lewis Capaldi - Before You Go (Official Video)",
        "description": "Get the extended edition of my debut album 'Divinely Uninspired To A Hellish Extent' here: https://lewiscapaldi.lnk.to/DUTAHE_Repack \n\nListen to the “Before You Go” EP here:\nhttps://lewiscapaldi.lnk.to/BYG_Acoustic \n \nTickets: http://tickets.lewiscapaldi.com \n\nDirected by: Kyle Thrash\nProduced by: Stephen Buchanan and Krista Worby\nDP: Frank Mobilio\n\nStarring:\nSasha Lane\nCypress Hayunga\nJack Luceno\nRomey Morello\n\nProduction company: More Media \n\n\nLyrics:\nI fell by the wayside like everyone else\nI hate you, I hate you, I hate you but I was just kidding myself\nOur every moment I start to replace‘\nCos now that they’re gone all I hear are the words that I needed to say\n\nWhen you hurt under the surface\nLike troubled water running cold\nWell time can heal but this won’t\n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWas never the right time whenever you called\nWent little by little by little until there was nothing at all\nOur every moment I start to replay but all I can think about is seeing that look on your face\n\nWhen you hurt under the surface\nLike troubled water running cold \nWell time can heal but this won’t \n\nSo, before you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting\nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nWould we be better off by now\nIf I’d have let my walls come down\nMaybe I guess we’ll never know \nYou know, you know\n\nBefore you go, was there something I could have said to make your heart beat better\nIf only I’d have known you had a storm to weather\nSo, before you go, was there something I could have said to make it all stop hurting \nIt kills me how your mind can make you feel so worthless oh\nBefore you go\n\nMusic video by Lewis Capaldi performing Before You Go. © 2020 Universal Music GmbH\n\nhttp://vevo.ly/FxI3tT",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Jtauh8GcxBY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Jtauh8GcxBY"
        }
      },
      "contentDetails": {
        "videoId": "Jtauh8GcxBY",
        "videoPublishedAt": "2020-01-24T18:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "sKzw4Upp5HXsGxj10Qj0NjYxWng",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS40NEY2MjQ3MjFGQkJCOTIy",
      "snippet": {
        "publishedAt": "2020-07-06T07:18:27Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Marshmello & Halsey - Be Kind (Official Music Video)",
        "description": "Marshmello & Halsey - Be Kind (Official Music Video)\n🌼Stream/Download \"Be Kind\" ▶ http://BeKindXX.com\n\nOfficial Marshmello Merch ▶ https://mellogang.com/collections/new-arrivals/\n\n[✖‿✖] SUBSCRIBE HERE ▶ http://youtube.com/marshmellomusic?sub_confirmation=1\n\nWatch Cooking with Marshmello HERE ▶ http://youtube.com/playlist?list=PLcYK4PlHbZQtXROf5fnrr4dO4ruWiv7ts\n\nWatch How To with Marshmello HERE ▶ https://www.youtube.com/playlist?list=PLcYK4PlHbZQunz2WR7pxPg9jea2vKPtEn\n\nWatch Gaming with Marshmello HERE ▶ http://youtube.com/playlist?list=PLcYK4PlHbZQvk3_Q6fbJy0xklOZ2aH7WP\n\nMarshmello Fortnite Event ▶ https://www.youtube.com/playlist?list=PLcYK4PlHbZQuBdEybTFkZ2IxKPdvPpbne\n\n---MORE Marshmello Music\nListen to Joytime III ▶ https://ffm.to/joytimeiii\nListen to Joytime II ▶ http://smarturl.it/JOYTIMEII\n\n--Top Songs by Marshmello\nWATCH BEEN THRU THIS BEFORE MUSIC VIDEO ▶ https://youtu.be/9A6QrnFpFjI\nWATCH RESCUE ME MUSIC VIDEO ▶ https://youtu.be/lPDw1QexVy4\nWATCH ONE THING RIGHT MUSIC VIDEO ▶ https://youtu.be/29a6o5vRKVM\nWATCH LIGHT IT UP MUSIC VIDEO ▶ https://youtu.be/qGh2e-yqEYQ\nWATCH HERE WITH ME MUSIC VIDEO ▶ https://youtu.be/J3UXp9jIr-U\nWATCH BIBA MUSIC VIDEO ▶ https://youtu.be/UhYRlI_bpJQ\nWATCH PROJECT DREAMS MUSIC VIDEO ▶ https://youtu.be/Hn7WDtF3nKA\nWATCH HAPPIER MUSIC VIDEO ▶ https://youtu.be/m7Bc3pLyij0\nWATCH TOGETHER MUSIC VIDEO ▶ https://youtu.be/JePnQ1gSagc\nWATCH BAYEN HABEIT LYRIC VIDEO ▶ https://youtu.be/jNJCdxMf0t8\nWATCH STARS MUSIC VIDEO ▶ https://youtu.be/A57B7B6w3kw\nWATCH FLASHBACKS MUSIC VIDEO ▶ https://youtu.be/Lj-_mD0w474\nWATCH YOU CAN CRY MUSIC VIDEO ▶ https://youtu.be/2SJ0hgdciNE\nWATCH EVERYDAY MUSIC VIDEO ▶ https://youtu.be/bEdcJY8Emm8\nWATCH FLY MUSIC VIDEO ▶ https://youtu.be/oRArmtMA9AI\nWATCH FRIENDS MUSIC VIDEO ▶ https://youtu.be/jzD_yyEcp0M\nWATCH SPOTLIGHT MUSIC VIDEO ▶ https://youtu.be/7R1N-8SoqcM\nWATCH LOVE U MUSIC VIDEO ▶ https://youtu.be/D-pKeb6Wf4U\nWATCH TAKE IT BACK MUSIC VIDEO ▶ https://youtu.be/P9Ijqa_2eu0\nWATCH SILENCE MUSIC VIDEO ▶ https://youtu.be/Tx1sqYc3qas\nWATCH BLOCKS MUSIC VIDEO ▶ https://youtu.be/5E4ZBSInqUU\nWATCH YOU & ME MUSIC VIDEO ▶ https://youtu.be/fiusxyygqGk\nWATCH FIND ME MUSIC VIDEO ▶ https://youtu.be/ymq1WdGUcw8\nWATCH MOVING ON MUSIC VIDEO ▶ https://youtu.be/yU0tnrEk8H4\nWATCH SUMMER MUSIC VIDEO ▶ https://youtu.be/2vMH8lITTCE\nWATCH ALONE MUSIC VIDEO ▶ https://youtu.be/ALZHF5UqnU4\nWATCH KEEP IT MELLO MUSIC VIDEO ▶ https://youtu.be/_J_VpmXAzqg\n\nMARSHMELLO:\nMerch | https://mellogang.com/collections/new-arrivals/\nSpotify | http://spoti.fi/Marshmello\nApple Music | http://apple.co/2n8Evz6\nSoundCloud | http://soundcloud.com/marshmellomusic\nInstagram | http://instagram.com/marshmellomusic\nFacebook | http://facebook.com/marshmellomusic\nTwitter | http://twitter.com/marshmellomusic\nTwitch | http://twitch.tv/marshmellomusic\nTikTok | https://tiktok.com/@marshmellomusic\n\nHALSEY:\nYouTube | https://youtube.com/halsey\nInstagram | https://instagram.com/iamhalsey\nTwitter | https://twitter.com/halsey\nFacebook | https://facebook.com/HalseyMusic\nSoundCloud | https://soundcloud.com/halseymusic\nWebsite | http://iamhalsey.com/\n\nCredits:\nDirector: Hannah Lux Davis \nProducer: Brandon Bonfiglio \nEP: Luga Podesta, Brandon Bonfiglio, Andrew Lerios, Krista Carnegie\nDP: Rob Witt \nEditor: Eric Wysocki & Hannah Lux Davis \nProduction Company: London Alley, Lit Productions\nJust Bolt Camera: Panny Hire LA\nChoreographer: Dani Vitale \nAssistant choreographer: Scott Myrick\nMakeup: Halsey\n\n#Marshmello #Halsey #BeKind",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/ePao0cTGG-o/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/ePao0cTGG-o/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/ePao0cTGG-o/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/ePao0cTGG-o/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/ePao0cTGG-o/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "ePao0cTGG-o"
        }
      },
      "contentDetails": {
        "videoId": "ePao0cTGG-o",
        "videoPublishedAt": "2020-06-27T14:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ST5f5UI1sjVB_9WW5Ws-XxYuTEs",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS45NDZFMDQ1RkFDOUEzQTAw",
      "snippet": {
        "publishedAt": "2020-07-08T18:43:05Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Dua Lipa - Physical (Official Video)",
        "description": "Get the new album Future Nostalgia : https://dualipa.co/futurenostalgia\n\nStream Break My Heart : https://dualipa.co/breakmyheart\n\nIn collaboration with Dua Lipa, Pepe Jeans London created a selection of coloured jeans for the music video \"Physical\". These jeans will be produced in four colours and incorporated into the SS20 #DUAFORPEPE Collection.\n#DUAFORPEPE Collection: https://www.pepejeans.com/en_int/duaforpepe/collection/dua-lipa-x-pepe-jeans/view-all\n#DUAFORPEPE get ready: https://www.pepejeans.com/en_int/subscription\n\nDirected by CANADA\nProduced by CANADA\n\nProducer: Laura Serra Estorch / Karen Saurí\nMD / Executive Producer: Oscar Romagosa\nHead of Production: Alba Barneda / Julia Carrasco\nDirector of Photography: Niklas Johansson\nProduction Designer: Anna Colomer Nogué\nProduction Manager: Dani Molina\n1st A D: Luis Casacuberta Abril\nStylist - Dua Lipa: Lorenzo Posocco\nStylist: Adrian Bernal / Laura Vandall\nChoreographer: Charm La’Donna\nMake-Up Artist - Dua Lipa: Lisa Eldridge\nHair Artist - Dua Lipa: Anna Cofone\nMake-Up & Hair Artist: Rubén Mármol\nCasting: LANE Casting\nEditor: Carlos Font Clos\nAnimation: MATHEMATIC\nGrading: Marc Morató @Metropolitana\nGraphic Design: Folch\nSound Design: Angel Sound Studio\nPost Production: EIGHTY4\nCasting Coordinator: Noemí Montero\nWardrobe Coordinator: Itsasne Santos\nGlam Team Coordinator: Maria Rubio\nProduction Coordinator: Marta Vega\nPost Production Coordinator: Marga Sardà / Marina M. Campomanes\nProduction Assistant: Aina Salarich\nFocus Puller: Dani Gallardo\nGaffer: Damian Halpern\nKey Grip: David Arrés / Xavi Gordi\nSound Recorder on set: Jordi Salinas\nProduction Designer Assistant: Marina Blasi\nGraphic & Concept Artist: Bea Márquez Picazo\nStylist Assistant - Dua Lipa: Raeanne Hayden\n1st Stylist Assistant: Andrea Ramil\nMake Up Assistant - Dua Lipa: Jessie Richardson\nHair Assistant - Dua Lipa: Anja Bont\n2nd Hair & Make Up Artist: Alizia Moreno\nDancer - Dua Partner: Kane Horn\nCharm La’Donna - Choregrapher Assistant: Alex Clark\nLocal Choreographer Assistant: Natalia Palomares\n\n\nFollow me online:\nInstagram:  https://dualipa.co/instagram\nFacebook: http://dualipa.co/facebook\nTwitter: http://dualipa.co/twitter\nYouTube: https://dualipa.co/youtube\nSpotify: http://dualipa.co/spotify\nApple Music: https://dualipa.co/apple-music\nDeezer URL: http://dualipa.co/deezer\nAmazon Music: https://dualipa.co/amazonmusic",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/9HDEHj2yzew/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/9HDEHj2yzew/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/9HDEHj2yzew/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/9HDEHj2yzew/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "9HDEHj2yzew"
        }
      },
      "contentDetails": {
        "videoId": "9HDEHj2yzew",
        "videoPublishedAt": "2020-01-31T13:00:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kNkoftLGd4ta4i2LkyYEbGIwR0k",
      "id": "UExMZFBKR0hxdWN0RXhVUDdQZUxFdTViS0lqaFdUUlo2bS44MUJEOEYxNDJFRjk5MTkw",
      "snippet": {
        "publishedAt": "2020-06-16T08:16:18Z",
        "channelId": "UCzGj-SpfiR2tEkgGnDExazA",
        "title": "Alaina Castillo - pass you by (Official Video)",
        "description": "limited edition vinyl with Urban Outfitters - https://www.urbanoutfitters.com/shop/alaina-castillo-the-voicenotes-limited-lp\n\nfollow me on spotify - https://spoti.fi/3eA8vx0\nlisten to 'pass you by' - https://alainacastillo.ffm.to/thevoicenotes\n'the voicenotes collection' merch - https://alaina-castillo-official.myshopify.com/\n\nText me: +1 713-842-9511\n\nFollow me:\nSpotify: https://alainacastillo.ffm.to/followonspotify\nYouTube: https://www.youtube.com/alainacastillo\nInstagram: https://www.instagram.com/alaina_castillo\nTikTok: https://www.tiktok.com/@alainacastillo\nFacebook: https://www.facebook.com/alainacastilloofficial\nTwitter: https://twitter.com/alainacastillo5\n\n---------------------------------------\n\nCreative - Spotify, Alaina Castillo, Chosen People\n\n\n©ChosenPeopleLLC 2020\n---------------------------------------\n\nLYRICS\n\nfeel the rain as it falls\nwipe the tears from your face\nfeel the sun kiss your skin\nlike a love so far away\n\nyou let him get his way\nyou carried all his pain\ncan’t waste another day\nwaiting to be loved\n\ndon’t let this moment pass you by\none day your heart might lose its mind\nyou’re scared you don’t deserve to smile\ndon’t let this moment pass you by\n\nyou were young he was cold\nstole the light from your eyes\nand you’ve been trying to let go of him\nbut he’s there, the thorn in your side\n\nyou let him get his way\nyou carried all his pain\ncan’t waste another day\nwaiting to be loved\n\ndon’t let this moment pass you by\none day your heart might lose its mind\nyou’re scared you don’t deserve to smile\ndon’t let this moment pass you by\n\nyou’ve earned the right to know yourself\nand you’ve earned the right to love yourself\nohhhh\n\ndon’t let this moment pass you by\none day your heart might lose its mind\nyou’re scared you don’t deserve to smile\ndon’t let this moment pass you by\n\n#AlainaCastillo #passyouby #thevoicenotes",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Bwq3f5_kMfY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Bwq3f5_kMfY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Bwq3f5_kMfY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Bwq3f5_kMfY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Bwq3f5_kMfY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "#RedMusic: CrazyBeats",
        "playlistId": "PLLdPJGHquctExUP7PeLEu5bKIjhWTRZ6m",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Bwq3f5_kMfY"
        }
      },
      "contentDetails": {
        "videoId": "Bwq3f5_kMfY",
        "videoPublishedAt": "2020-06-15T23:00:02Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 40,
    "resultsPerPage": 50
  }
}

  recorded_at: Thu, 09 Jul 2020 06:34:41 GMT
recorded_with: VCR 6.0.0
