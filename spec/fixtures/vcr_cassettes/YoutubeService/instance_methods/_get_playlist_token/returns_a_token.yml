---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&part=contentDetails,snippet&playlistId=PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 09 Jul 2020 06:34:41 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "97sbJkrqPvdnl6ON9Za87rU082o",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "XzEWm8bdNEN0pT8QW75K2ww3NLU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NDlDQUFFOThDMTAxQjUw",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:43Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Felix Jaehn, VIZE - Close Your Eyes (Official Audio) ft. Miss Li",
        "description": "Felix Jaehn & VIZE feat. Miss Li 'Close Your Eyes' out now!\n\nDownload & stream here: https://umg.lnk.to/closeyoureyes\n\nFollow Felix Jaehn:\n→ Instagram: https://instagram.com/felixjaehn \n→ Facebook: https://facebook.com/FelixJaehnMusic \n→ Twitter: https://twitter.com/felixjaehn \n\nFollow VIZE:\n→ Instagram: https://www.instagram.com/vizemusicofficial\n→ Facebook: https://www.facebook.com/VizeMusicOfficial\n\nFollow Miss Li:\n→ Instagram: https://www.instagram.com/missliofficial\n→ Facebook: https://www.facebook.com/missliofficial\n→ Twitter: https://twitter.com/MissLiOfficial\n\n\nMusic video by Felix Jaehn, VIZE and Miss Li performing Close Your Eyes. © 2019 Collaection GmbH, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/enSINY",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HAUgCZFyxRw"
        }
      },
      "contentDetails": {
        "videoId": "HAUgCZFyxRw",
        "videoPublishedAt": "2019-11-22T14:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rNC-KrY7nN9wYWWKWfTB0Qc_W9Q",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5ERkUyQTM0MzEwQjZCMTY5",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:34Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Riton x Oliver Heldens - Turn Me On ft. Vula (Official Music Video)",
        "description": "Turn Me On by Riton & Oliver Heldens is available now!\n👉 https://lnk.to/TurnMeOnyd\n \nFollow Me\nInstagram: https://instagram.com/oliverheldens\nTwitter: https://twitter.com/oliverheldens\nFacebook: https://facebook.com/oliverheldens\nSoundcloud: https://soundcloud.com/oliverheldens\nSnap: https://snapchat.com/add/oliverheldens\n \nHeldeep Records:\nFacebook: https://facebook.com/heldeeprecords\nInstagram: https://instagram.com/heldeeprecords\nTwitter: https://twitter.com/heldeeprecords\nSoundcloud: https://soundcloud.com/heldeeprecords\n \nRiton:\nInstagram: https://www.instagram.com/RITONTIME\nTwitter: https://twitter.com/Ritontime\nFacebook: https://www.facebook.com/ritontime\nSoundcloud: https://soundcloud.com/ritontime\n \nVula:\nInstagram: https://www.instagram.com/vulavox\nTwitter: https://twitter.com/Vulavox\nFacebook: https://www.facebook.com/Vula-29825878788\n \nMusic video by Riton & Oliver Heldens performing Turn Me On (Official Audio). \n© 2019 Ministry of Sound Records.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ifq4NQWwVpg"
        }
      },
      "contentDetails": {
        "videoId": "Ifq4NQWwVpg",
        "videoPublishedAt": "2019-10-09T11:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "A8R_gTE1ceL7fIAoj8UWnVgr_v4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi43QzNCNkZENzIyMDY2MjZB",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:08Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tiësto - BLUE (Official Video)",
        "description": "Tiësto - BLUE (Official Video) \n \nStream/Download BLUE now: http://tsto.co/blue\n\nDirector: Ben Fee\nDancer/Choreographer: Nico Lonetree\nProducer: Barret Hacia\nProduction Company: Little Ugly \nExecutive Producer: Melora Donoghue\nDirector's Rep: Doug Klinger\nDirector of Photography: Jess Dunlap\nProduction Designers: Courtney and Hillary Andujar\nWardrobe/Costume Designer: Nancy Stella Soto\nProduction Manager: Sean Blau\nPost Supervisor: Naheem Adio\nAC: Ksusha Genenfeld\nGrip/Gaffer/Swing: Alex Yoo, Luis Cardenas\nColorist: Arianna Shining Star Pane @ Apache\nConstruction Coordinator: Westley Thornton\nCarpenter: Kyle Frawley\nArt/Production Assistants: Sunny Mills, Zepha Jackson\nBTS: Matt Boman @ Dadass Films\nMusic Video Rep: Reprobates (@obreprobates)\n \nFollow Tiësto\nhttp://www.Tiesto.com/\nFacebook: http://tsto.co/Facebook \nInstagram: http://tsto.co/Instagram \nTwitter: http://tsto.co/Twitter \nYouTube: http://tsto.co/YTSubscribe \nSoundcloud: http://tsto.co/Soundcloud\nWeibo: http://tsto.co/Weibo \n \nFollow Stevie Appleton \nhttps://www.stevieappleton.com/\nFacebook: https://www.facebook.com/stevieappleton/\nInstagram: https://www.instagram.com/stevieappleton\nTwitter: https://twitter.com/stevieappleton\nYouTube: https://www.youtube.com/user/steveappletonmusic\nSoundCloud: https://soundcloud.com/stevieappleton\n\nLyrics:\nFeeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \n\nJust feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \n\nI dream that you won’t forget me \nThat’s all I really ask of you \nI’d love to talk if you’d let me \nI’d take you back to the start with me \n\nI keep on dreamin’, I don’t know why\nI can’t seem to let it go \nBut I keep on trippin’ on what we had\nIt’s hard not to let you know \n\nI’m feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \nFeeling blue without you \n\nI don’t know what I should do\nFeeling so blue without you \n\nWe built our love on foundations\nWe built a house in the hill, yeah \nOur little rock of salvation \nOh my love’s there still \n\nCause I keep on dreamin’, I don’t know why\nI can’t seem to let it go \nBut I keep on trippin’ on what we had\nIt’s hard not to let you know \n\nI’m feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \nJust feeling blue, yeah \nOh give me one more chance \nGive me one more dance \nI’m blue without you \nTell me who am I\nTo hold you down?\nJust feeling blue without you",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FIw508aafBA"
        }
      },
      "contentDetails": {
        "videoId": "FIw508aafBA",
        "videoPublishedAt": "2020-02-11T17:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ucl7EEq7XYamzlJehoIhumqwY9Y",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wMDFGNzBEOTU4Q0Y1Q0RG",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:33Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Topic, A7S - Breaking Me ft. A7S",
        "description": "Listen to “Breaking Me” from Topic feat. A7S\n\nDownload & stream here: https://umg.lnk.to/breakingme\n\nFollow TOPIC:\nFacebook: https://www.facebook.com/topicproductions\nInstagram: https://www.instagram.com/topic\nTwitter: https://twitter.com/topicmusictv\n\nFollow A7S:\nSpotify: https://spoti.fi/2Py5LWV\nDirected, shot, edited by Daniel Priess\ndanielpriess.com\n\nvfx by Sebastian Bosse\nsebastianbosse.com\n\nStill photography by Jakob Bindert\n\nThanks to Dilara for your great dancing performance in the video, go check her out: \n\nInstagram: dilara.ls  https://www.instagram.com/dilara.ls \nYouTube: DilaraLs  https://www.youtube.com/channel/UC3vzIoZoS8wvVSUvP3W0wcw \nTikTok: @dilara.ls https://www.tiktok.com/@dilara.ls \n\nMusic video by Topic performing Breaking Me (Lyric Video). © 2019 Topic, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/H4p1Ad",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jIoEaTN7GGo"
        }
      },
      "contentDetails": {
        "videoId": "jIoEaTN7GGo",
        "videoPublishedAt": "2019-12-19T16:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SrOMyJTDafWHt8bFcsDphXkYptk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi40MDNEMzA0QTBFRThFMzBE",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:51Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Robin Schulz feat. Alida – In Your Eyes (Official Music Video)",
        "description": "Check out the brandnew single „Alane“ with Wes - Video out now ► https://RobinSchulz.lnk.to/AlaneAY\nChapter 3: The official music video for Robin Schulz' new single \"In Your Eyes\" featuring Alida!\n► Get the single here: http://wmg.click/RobinSchulz_InYourEyesAY\n\nGo to Chapter 1: https://youtu.be/t-ojidEzKuk\nChapter 2: https://youtu.be/uxLs8l5JCNM\n\nVisit Robin Schulz here:\n►http://www.robin-schulz.com\n►https://www.facebook.com/robin.schulz.official\n►https://twitter.com/robin_schulz\n►http://instagram.com/robin__schulz\n►Snapchat: robinschulzreal\n\n►LYRICS: \n\nV1:\nHearing whispers in the night\nVoices filling up your mind\nYour like a ghost of you \n\nYou’ve been drowning in the rain \nSlowly saving up the pain\nSo deep inside of you \n\nPRE:\nSee the colors of the skies\nslowly turn from black and white \nA rising hope, bright as gold \nNow there’s nothing left to lose\nSo we’re breakin all the rules\nAnd they don’t know what we know\n\nCHORUS:\nCause I can hear\nThe thunder from afar\nA lightning in the dark\nI can feel a fire come alive \nSo calm before the storm\nSo dark before the dawn\nOh, I can see the fire in your eyes\n\nV2:\nNow you’ll never be the same\nOnce you’ve felt that burning flame\nYou’re chasing stars alive \n\nWhat was broken’s left behind\nwatch it crumble in the light\nNothing can stop you now,\n\n\nThe dark winter can affect our soul. With his new song “In Your Eyes”, Robin Schulz points us from the darkness back into the light. Our guide:  Norwegian singer-songwriter Alida, whose powerful and uplifting vocals feature in the latest track of the German super-producer.\n“You’re like a ghost of you / You’ve been drowning in the rain / Slowly saving up the pain inside of you“, Alida worriedly observes in a loved person by her side. Time to change tack: “Now there’s nothing left to lose / So we’re breaking all the rules“, she decides, “‘cause I can hear the thunder from afar / A lightning in the dark / I can feel the fire come alive ... Oh I can see the fire in your eyes“. And just like the forces of nature in the lyrics, the atmospheric production now explodes into jubilant strings, soaring melodies and towering basslines. \n\n“This is exactly how I want to start a new year“, says Robin Schulz. “I love the vibe of the track and I'm very happy to have Alida on Board. This collaboration is the beginning of an exciting year, I simply cannot wait to get started.“ Alida, who moved from Norway to L.A. in the summer of 2019 and co-wrote “In Your Eyes” during the process before it made its way to the hands of Robin Schulz later, comments: “It was one of those songs that naturally wrote itself. This is a song I was feeling all year but didn’t know how to articulate until now. Robin Schulz heard the song and brought it to life… I’m very excited for everyone to listen and hopefully it touches people like it touched me.”  \n“In Your Eyes” is accompanied by a music video that builds on the previous visuals for “All This Love“ and “Rather Be Alone“. Once again, Toni Garrn plays the leading role. The most recent video for “Rather Be Alone” ended with Toni Garrn and Robin Schulz’ avatars successfully concluding an intergalactic dance battle. Now, they’re getting beamed into the next level: in the new video, they appear in a dark hall, two futuristic motorbikes right next to them. Level 2 commences…\n\n#robinschulz #inyoureyes #musicvideo #alida #tonigarrn",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mDLiAs5k1oI"
        }
      },
      "contentDetails": {
        "videoId": "mDLiAs5k1oI",
        "videoPublishedAt": "2020-01-10T16:13:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zQzX2pya6mmBou6qSl0uYkCY8Vk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44MkM2RjVEQkQ5N0I2MjVE",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:50Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Slider & Magnit - Morze [Official Video]| #GANGSTERMUSIC",
        "description": "Slider & Magnit - Morze\nSubscribe Gangster Music: http://bit.ly/GangsterMusic \nBuy | Stream https://nda.promo/B8DCED/\n\nArtist \"Slider & Magnit\"\nGenre \" BASS HOUSE\"\nTrack \"Morze\"\n\nFollow Slider & Magnit:\nVK: https://vk.com/slamdjs\nFacebook: https://www.facebook.com/slamdjs\nInstagram: https://www.instagram.com/sliderandmagnit\nYouTube: http://www.youtube.com/slamdjsmusic\nSoundcloud: https://soundcloud.com/slamworxrecords\n\nFollow Gangster Music:\nVK: https://vk.com/gangsterxmusic\nFacebook: https://bit.ly/2RWEZ8v\nInstagram: https://www.instagram.com/gangsterxmusic/\n\nSEND YOUR MUSIC TO US - gangsterxmusic@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kyopTrbleTU"
        }
      },
      "contentDetails": {
        "videoId": "kyopTrbleTU",
        "videoPublishedAt": "2019-08-26T08:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nKmBQHAmk127HhyKi_o6rg7MTuw",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44QTY2MEEzNzBFQUJCMUQ2",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:09Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tungevaag - Knockout (Official Music Video)",
        "description": "Tungevaag - Knockout is OUT NOW! Like this track? Add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://spinninrecords.release.link/knockout-1!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Tungevaag:\nhttps://www.instagram.com/tungevaag/\nhttps://www.youtube.com/channel/UCdgCw1DIZnWZfWv3rDxIYtw\n\nLead actor: Luka Tartaglia\nDirector: Martin Tungevaag & Henry Lipatov\nDirector of Photography: Hugo Will\nChoreography: Johny D\nVFX Supervisor: Henry Lipatov\nMain vfx artist: Ivan Druzhinin\nStarring: Brandon Burciaga, Eirik Uhlen, Sebastian Chwoyka, Espen Nore, Cliff Tan, Irina Dedyuk, Alik Tsiupa, John Leggins, Aj Tai, Henry Lipatov, Ivan Druzhinin\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Tungevaag\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GvK3nq7r69s"
        }
      },
      "contentDetails": {
        "videoId": "GvK3nq7r69s",
        "videoPublishedAt": "2019-12-06T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bOY8oKRYTh_3AreVVFR8tBrn_DE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44QTA1QTQyRTc3M0VGQzYx",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:39Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Rat City, Kiesza - Naked (With My Headphones On)",
        "description": "Rat City & Kiesza - Naked (With My Headphones On) OUT NOW!\n\nListen here: https://ratcity.ffm.to/ratcity_kiesza.qtv\n\nDirector: Anders Paus Hedberg\nExecutive Producer: Shaw Lash\nStudio: Migma Studios\n*** from characters created by Micah Monkey\n\nFollow Kiesza\nhttp://instagram.com/kiesza\nhttps://www.facebook.com/Kiesza\nhttps://twitter.com/kiesza\nhttp://kiesza.com\n\nFollow Rat City:\nhttps://www.instagram.com/ratcityofficial/\nhttps://spoti.fi/2Sqn4fy\nhttps://www.facebook.com/ratcityofficial\n\nhttp://vevo.ly/YSWrAQ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JX_XWyY5y2I"
        }
      },
      "contentDetails": {
        "videoId": "JX_XWyY5y2I",
        "videoPublishedAt": "2019-10-25T04:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "b8iuRIeY2Q1XtjKbRZOuvHTTxmc",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CMEVBRUJERkUyNTBENTkz",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:00Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Don Diablo - Congratulations ft. Brando | Official Music Video",
        "description": "Download & stream song: https://fanlink.to/HEXAGON123\n\nI wrote “Congratulations” in a moment of reflection, while I was recording parts of my upcoming FOREVER album in Los Angeles. Most of my life, I have been working every single day towards an invisible goal that sometimes seems unreachable. There are days when nothing you do seems good enough and the weight on your shoulders gets heavier and heavier. Sometimes you need to look at your life from a helicopter view so you can see all the amazing things that have happened in your past. It will make you enjoy your future even more. This song is about congratulating yourself. Which in essence you should be doing as often as you can in this life. I am super excited I got to work on the song with the supremely talented Brando, whose vocals are the perfect fit for the story I wanted to tell. - Don\n\nDirected by Patrick Van Der Wal\nExecutive Producer: Don Diablo \nSFX: Erik Middendorp \nSteadycam: Jasper Van Gheluwe \nProduction: Sabine Van Der Zon\nGaffer: Michiel Kingma \nGaffer: Blaine Bradley \nColor Correction: Qianwei Tong  \nFocus puller: Isaiah Cedrick\nSecond assistant: Jurgen Corte \nBest Boy: Arthur Gavan \nBest Boy: Aaron Homma \nElectric: Abel Berghuizen\nModel: Nochtli Peralta Alvarez\nSpecial thanks to Thomas Pieket Weeserik, Jessey Bijl and everyone else involved in the making of this video.  \n\n#DonDiablo #Brando #Congratulations \n\n⬡⬢ Don Diablo ⬢⬡\r\nSpotify ⬡ http://Spoti.fi/DonDiablo\r\nMerch ⬡ http://shop.dondiablo.com\r\nInstagram ⬡ http://instagram.com/dondiablo\r\nFacebook ⬡ http://facebook.com/OfficialDonDiablo\r\nTwitter ⬡ http://twitter.com/dondiablo\r\nYouTube ⬡ http://YouTube.com/DonDiablo?sub_confirmation=1\r\nSoundCloud ⬡ http://soundcloud.com/dondiablo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_JlvT19nUQk"
        }
      },
      "contentDetails": {
        "videoId": "_JlvT19nUQk",
        "videoPublishedAt": "2019-12-14T17:16:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "u1CAnj7Odv2c0v7Jh1m1bX7OufY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5FQUY2Qzk4RUFDN0ZFRkZF",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:53Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "SHANGUY - Désolée (Paris/Paname) (Official Video)",
        "description": "SHANGUY - Désolée (Paris/Paname) (Official Video) Out Now.\nAdd to your collection: \nSpotify: ttps://open.spotify.com/album/6DM0lENVuTd1TUVrbFJpmA?si=X9l-zwMvSMOPB5pt8xYA-w\nApple Music: https://music.apple.com/it/album/d%C3%A9sol%C3%A9e-paris-paname-single/1503831842\nAll Stores: https://www.egomusic.net/music/releases/dsole--paris-paname-\n\nListen to more songs like this with our playlist!\nApple Music: https://itunes.apple.com/it/curator/ego/1405705875\nSpotify: http://spoti.fi/2qnkdCG\n\nFollow Ego on Facebook: http://www.fb.com/EgoItaly\nSubscribe to EgoTV NOW: http://bit.ly/1hzlXkS\n#ego \n#shanguy\n#desolee\n\nBig return for the Italian collective Shanguy with their super new single “Désolée (Paris/Paname)”.\nWith over 45 Million total views on YouTube and almost 35 Million total streaming with “La Louze”, “King Of The Jungle” and “Toukassé”, one Platinum and one Gold Award in Poland and continuously on tour through east Europe, they’re back with this huge bomb!\n\nA brilliant mix of French, English, Italian and Spanish framed by gloomy and deep sounds with a fresh rhythm that won’t make you stand still.\n\nBut why ‘Paris/Paname’?\nPaname is a nickname for Paris since the Parisians in the 20th century used to wear the famous Panama hat put in vogue by the workers who, at that time, dug the canal that bears the same name.\nIn this single, however, Shanguy wanted to give a different meaning, indicating ‘Paris’ as the elegant city lived by day among monuments and history and ‘Paname’ as the mysterious and nightly city of the most libertine neighborhoods, a sort of contrast between good and evil.\n\nVideo Director: Roberto Cicogna\nDirector of photography: Simone Yang \nStyling: Federico Rinoldi\nMake up: Anh Duong\nEditing: Roberto Cicogna\nFirst Assistant:Thibault Juillard\nA very special Thanxs to Vittoria Tagini, Gaetana Angiolin di PVH, Tommy Hilfiger, Paola Ruffo di GM/PR, Jarvis Macchi, Iceberg, Maria Campadello, Filippo Bologni di Wearebusy, Scarlett Ros, Giorgia Andreazza.\n\nFOLLOW SHANGUY\nhttps://www.instagram.com/shanguymusic/\nhttps://www.facebook.com/shanguymusic/ \nhttps://twitter.com/shanguymusic\nhttps://vm.tiktok.com/xFjnwn/\nhttps://vk.com/public181180916",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AQK4EHFPsAM"
        }
      },
      "contentDetails": {
        "videoId": "AQK4EHFPsAM",
        "videoPublishedAt": "2019-12-11T13:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3O51S-1Z_UPEk5rlIVkKbVDyTQo",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xNTZBNUQxMDZBQzFGMjkw",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:25Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Marnik & KSHMR - Alone (feat. Anjulie & Jeffrey Jey) [Official Lyric Video]",
        "description": "Best of KSHMR - KSHMR MIX 2020: https://youtu.be/SKXPmV3L3Jo\nMarnik & KSHMR - Alone (feat. Anjulie & Jeffrey Jey) is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/alone-feat-anjulie-jeffrey-jey!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Marnik:\nhttps://www.facebook.com/Marnikofficial/\nhttps://www.instagram.com/marnikofficial\nhttps://twitter.com/marnikofficial\nhttps://soundcloud.com/marnikofficial\n\nFollow KSHMR:\nhttps://www.instagram.com/kshmr/\nhttps://www.facebook.com/KSHMRmusic/\nhttps://twitter.com/KSHMRmusic\nhttps://soundcloud.com/kshmr\n\nFollow Anjulie: \nhttp://www.twitter.com/anjulie\nhttp://www.facebook.com/anjuliemusic\nhttp://www.instagram.com/anjuliemusic\n\nFollow Jeffrey Jey:\nhttps://www.instagram.com/jeffreyjey\nhttps://www.facebook.com/JeffreyJey/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Marnik\n#KSHMR\n#Anjulie\n#JeffreyJey\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wvu4kbARybg"
        }
      },
      "contentDetails": {
        "videoId": "wvu4kbARybg",
        "videoPublishedAt": "2019-11-15T20:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HS-FvMXiCI5IfUpQ1B3fKmPpfBY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4zQTkzRjgxRTY0OEU0MkM3",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "LIZOT ft. Holy Molly - Menage A Trois (Official Video)",
        "description": "Stream & Download \"Menage A Trois\": https://lnk.to/_menageatrois\n\nLIZOT:\nInstagram: https://www.instagram.com/lizot_official/\nFacebook: https://www.facebook.com/djlizotofficial/\n\nHoly Molly: \nInstagram: https://www.instagram.com/holy.molly.guacamolly\n\nVideo by: Sebastian Otto \nWebsite: https://sbstn.tv/\nInstagram: https://www.instagram.com/sbstntv\n\nModell: \nhttps://www.instagram.com/labellebook/\n\n\n______________\nDirected by\nSebastian Otto\n\nDirector of Photography\nSebastian Otto\n\nGaffer\nPhilip Pfechner\nLukas Reubelt\n\n2D Visual Effects \nSebastian Otto\nLukas Reubelt\n\nColor Grading\nRobert Winter\n\nSet Assistent\nRobert Winter\n\nHair & Make-Up\nSophia Elonore Freitag \n\nConcept\nLukas Reubelt\nSebastian Otto\n\n\n Music video by LIZOT, Holy Molly performing Menage A Trois (Official Uncensored Video). (C) 2019 Nitron Music a division of Sony Music Entertainment Germany GmbH\n\nhttp://vevo.ly/32S4ux",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aBcqQsL9dsU"
        }
      },
      "contentDetails": {
        "videoId": "aBcqQsL9dsU",
        "videoPublishedAt": "2019-12-17T19:11:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ADd_IOeSJOnjGPUcyCYLWQwTxlQ",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xNjIyNEE0MDEyRDlCMjBE",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:04Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Lucas & Steve - Perfect (feat. Haris) [LUM!X Remix] (Official Lyric Video)",
        "description": "Spinnin’ Massive Monday is here to make your day a whole lot better with a brand new energetic Dance track! Start your week off with a bang every Monday at 5 PM CET!\n\nLucas & Steve - Perfect (feat. Haris) [LUM!X Remix] is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninremixes.release.link/perfect-feat-haris-lum-x-remix!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVideo Produced By https://www.351studio.com\n\nFollow Lucas & Steve:\nhttp://facebook.com/LucasAndSteve\nhttp://twitter.com/lucasandsteve\nhttps://www.instagram.com/lucasandsteve\nhttp://soundcloud.com/lucasandsteve\nhttps://www.youtube.com/Lucasandsteve\n\nFollow LUM!X:\nhttps://soundcloud.com/lumix_music\nhttps://www.instagram.com/lumix_music/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#LucasSteve\n#LUMIX\n#MassiveMonday\n#SpinninMassiveMonday\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6J9GGFi1irs"
        }
      },
      "contentDetails": {
        "videoId": "6J9GGFi1irs",
        "videoPublishedAt": "2019-12-02T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XWsMX3gjwBTijIUwrKpJTD7LJRg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xN0Y2QjVBOEI2MzQ5OUM5",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:46Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Gianluca Dimeo - Syncopate (Lyric Video)",
        "description": "Gianluca Dimeo - Syncopate (Lyric Video)\n🎧 Stream or Download : https://open.spotify.com/album/5W23E7zT9yYXCfa5mrlNA8?highlight=spotify:track:6ccEYU3hlvgz6YhFMoHDOj\n\n• LIT NETWORK  •\n\nSubscribe! : https://goo.gl/D6Pnv6\n🔔 Turn on the bell for new music :) \nFollow us on Instagram : https://www.instagram.com/lit.network/\n\n• Gianluca Dimeo • \nYouTube: https://www.youtube.com/gianlucadimeo\nInstagram: https://www.instagram.com/dimeomusic\n\ntags:\n#Syncopate #GianlucaDimeo #LyricVideo #LitNetwork #Electronic\n\n✉  Submit your music : itslitnetwork@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UA8x_i0M3TU"
        }
      },
      "contentDetails": {
        "videoId": "UA8x_i0M3TU",
        "videoPublishedAt": "2020-02-26T12:22:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bw0eiSs9Eq8Qegv9mc9vtG8sZMk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yQzk4QTA5QjkzMTFFOEI1",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:19Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "YouNotUs, Janieck, Senex - Narcotic (OFFICIAL MUSIC VIDEO)",
        "description": "Check out the Official Music Video for the new single Narcotic by YouNotUs, Janieck and Senex!\nStream or buy on Spotify, iTunes, Apple Music, Deezer, and Amazon ► https://smg.lnk.to/narcotic\n\nListen & subscribe to the YouNotUs Playlist on Spotify ► https://open.spotify.com/user/younotus/playlist/5IKGAi7pJaFnSHpcDakT54?si=V5jNu2v5SXCKGNJ5JV-l0w\n\nYouNotUs ON SOCIAL MEDIA!\n► Website: https://www.itsyounotus.com/\n► Instagram: https://www.instagram.com/younotus/\n► Facebook: https://www.facebook.com/younotus/\n► Spotify: https://open.spotify.com/artist/67ghKnycRX6VM1xfqJSMlH?si=5tReQ2hkQsaHYBJ7DywoIA\n► Apple Music: https://itunes.apple.com/de/artist/younotus/916079851\n\nYouNotUs LIVE Check out the dates here ► https://www.itsyounotus.com/shows\n\nJANIECK ON SOCIAL MEDIA!\n► Website: https://janieck.com/\n► Instagram: https://www.instagram.com/janieckofficial/\n► Facebook: https://www.facebook.com/janieckofficial\n► Spotify: https://open.spotify.com/artist/1bZDq4po4dMIpN74Zendm0?si=jP7CDamBSQiIdo1pLJuIcw\n► Apple Music: https://itunes.apple.com/us/artist/janieck/1100750686\n\nSENEX ON SOCIAL MEDIA!\n► Instagram: https://www.instagram.com/senex.official/\n► Facebook: https://www.facebook.com/Senex-398714727615212/\n► Spotify: https://open.spotify.com/artist/2n0Qz7ZvKS6kwjPuj9sW4H?si=wbNsk5-rRTO_Rke7t20lsg\n► Apple Music: https://itunes.apple.com/us/artist/senex/1076828808\n\nThe YouNotUs YouTube Channel is part of GUESSTIMATE. \nCheck out the website for more information: \n► http://www.guesstimate.de",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yQoKd5fu3t4"
        }
      },
      "contentDetails": {
        "videoId": "yQoKd5fu3t4",
        "videoPublishedAt": "2019-06-14T12:59:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oW5ajZxw3HHFFrlZTsAMzAmVSnw",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EQkE3RTJCQTJEQkFBQTcz",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:14Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Sam Feldt - Post Malone (feat. RANI) [Official Music Video]",
        "description": "Sam Feldt - Post Malone (feat. RANI) is part of the Magnets EP, OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/magnets-ep!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVIDEO CREDITS:\nDirector: Deni Kukura\nProduction: Hello Daisy\nD.O.P.: Nick Stuy\nGaffer: Leon Valero\nStyling: Melanie Schraa\nMUA: Henrique Dos Santos (AbbyOMG)\nChoreography: Kim van der Voort\nDancers: Bo Dudok, Carmen van Weersel, Gina Agsteribbe\nDragqueens: Abby OMG, Ma’MaQueen & Inga Shubskaya\nPost-production: Hello Daisy\n\nSpecial thanks to: Stijnn van der Schoot\n\nFollow Sam Feldt:\nhttp://facebook.com/officialsamfeldt\nhttp://twitter.com/SamFeldtMusic\nhttps://www.instagram.com/samfeldtmusic/\nhttps://soundcloud.com/samfeldt\nhttp://www.samfeldt.com/\n\nFollow RANI:\nhttps://www.instagram.com/shannonrani_/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#SamFeldt\n#RANI\n#PostMalone\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TewoJFN61mI"
        }
      },
      "contentDetails": {
        "videoId": "TewoJFN61mI",
        "videoPublishedAt": "2019-06-26T18:58:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kuvdNFRc-FNcbsRMyIug6icIZtk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42RTNCOEMxREI3Q0VDMjU2",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:01Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "The Chainsmokers - Call You Mine (Official Video) ft. Bebe Rexha",
        "description": "The Chainsmokers “Call You Mine” ft. Bebe Rexha out now: http://smarturl.it/callyoumine\nAmazon Music: http://smarturl.it/callyoumine/az\nApple Music: http://smarturl.it/callyoumine/applemusic\niTunes: http://smarturl.it/callyoumine/itunes\nSoundcloud: http://smarturl.it/callyoumine/soundcloud\nSpotify: http://smarturl.it/callyoumine/spotify\nYouTube Music: http://smarturl.it/callyoumine/youtubemusic\n \nFollow The Chainsmokers:\nhttp://www.youtube.com/thechainsmokers  \nhttp://www.twitter.com/thechainsmokers   \nhttp://www.facebook.com/thechainsmokers  \nhttp://www.instagram.com/thechainsmokers  \nhttp://www.soundcloud.com/thechainsmokers\n \nFollow Bebe Rexha:\nhttps://www.youtube.com/user/BEBEREXHA\nhttps://twitter.com/BebeRexha\nhttps://www.facebook.com/beberexha/\nhttps://www.instagram.com/beberexha/\nhttps://soundcloud.com/beberexha\n \nDirected by Dano Cerny\n \nLyrics:\n \n2 kids with their hearts on fire\nWho’s gonna save us now?\nWhen we thought that we couldn’t get higher Things started looking down\n \nI look at you and you look at me\nLike nothing but strangers now\n2 kids with their hearts on fire\nDon’t let it burn us out\n \nThink about what you believe in now\nAm I someone you cannot live without out Cause I know I don’t wanna live without you\n \nYeah \n \nCome on let’s turn this all around\nBring it all back to that bar downtown\nWhen you wouldn’t let me walk out on you \n \nYeah\nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine Can I call you mine?\nAnd you said I never regretted the day that I called you mine\n \nBroke kids running through the city\nDrunk on the subway train\nSet free every time you kissed me\nWe couldn’t feel no pain\n \nYou looked at me and I looked at you\nLike we’d never look away\nBroke kids running through the city\nDon’t let the memory fade\n \nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine Can I call you mine?\nAnd you said I never regretted the day that I called you mine\n \nThink about what you believe in now\nAm I someone you cannot live without\nCause I know I don’t wanna live without you\n \nYeah\nCome on let’s turn this all around\nBring it all back to that bar downtown\nWhen you wouldn’t let me walk out on you \n \nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine And you said I never regretted the day that I called you mine Can I call you mine?\nCan I call you mine?\nCan I call you mine?\nCan I call you mine?\n \n#TheChainsmokers #CallYouMine #BebeRexha",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3XCVM3G3pns"
        }
      },
      "contentDetails": {
        "videoId": "3XCVM3G3pns",
        "videoPublishedAt": "2019-05-31T13:58:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "z9icz99HDnYayxZfvBAmhRe7Q2I",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42MjYzMTMyQjA0QURCN0JF",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:47Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "R3HAB & Clara Mae & Frank Walker - More Than OK (Official Music Video)",
        "description": "R3HAB & Clara Mae & Frank Walker - More Than OK (Official Music Video)\n\n▶ Listen now: http://cybr.at/morethanok \n▶ Listen to the CYB3RPVNK Radio playlist: https://cybr.at/radio \n▶ Subscribe to the CYB3RPVNK channel: https://cybr.at/youtube\n\nFollow R3HAB\n\n▶http://www.facebook.com/r3hab\n▶http://www.instagram.com/r3hab\n▶http://www.twitter.com/r3hab\n\nFollow Clara Mae\n\n▶https://www.facebook.com/iamclaramae/\n▶https://www.instagram.com/claramaemusic/\n▶https://twitter.com/claramaemusic\n\nFollow Frank Walker\n\n▶https://www.facebook.com/FrankWalkerMusic/\n▶https://www.instagram.com/frankwalker/\n▶https://twitter.com/DJFrankWalker\n\nFollow CYB3RPVNK\n\n▶ https://www.instagram.com/cyb3rpvnk/ \n▶ https://www.facebook.com/cyb3rpvnklabel/ \n▶ https://soundcloud.com/cyb3rpvnk\n▶ https://www.cyb3rpvnk.com\n\nWeekly Updated Music\n▶ http://www.nightplaylist.com \n\n#R3HAB #ClaraMae #FrankWalker #MoreThanOk #Music #Video\n\nCredit List\n\nDirector: Mario Gonsalves (@gonsalvesmario)\nProducers: Valentino Angela, Nadir Soltane\nProduction Company: Recent (@recent.co)\nDOP: Sean Vogel\n1st AC: Maric Dam\nUnderwater DOP: Bas Andries\nUnderwater Safety: Sjouke Brunia\nLighting Director: Rui Jiang Ong\nGaffer: Kenneth van Bochove\nBest Boy: Joel Woods\nMotion Graphics: Stevenson Lacroes\nArt Dept: Kevin Osepa, Tivjenne Kootes\nMUA & Hair: Vanessa Chan (House of Orange), Mila de Jong\nTechnocrane: Jochem Middelveld (Egripment)\nPA: Valerie Paulina, Julia de Roo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-zYz0OhqzXM"
        }
      },
      "contentDetails": {
        "videoId": "-zYz0OhqzXM",
        "videoPublishedAt": "2020-01-24T09:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IzgbIPTT1zltfu1trOeNX73QB_g",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xM0YyM0RDNDE4REQ1NDA0",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:44Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "R3HAB & ZAYN & Jungleboi - Flames (Official Music Video)",
        "description": "R3HAB & ZAYN & Jungleboi - Flames (Official Music Video) \n\n\n▶ Stream ‘Flames’ here: http://lightmeup.in/flames \n▶ Listen to the CYB3RPVNK Radio playlist: https://cybr.at/radio \n▶ Subscribe to the CYB3RPVNK channel: https://cybr.at/youtube \n\nFollow R3HAB \n▶https://www.facebook.com/r3hab \n▶https://www.instagram.com/r3hab \n▶https://www.twitter.com/r3hab \n\nFollow ZAYN \n▶https://www.facebook.com/zayn \n▶https://www.instagram.com/zayn \n▶https://twitter.com/zaynmalik\n\nFollow Jungleboi \n▶https://www.facebook.com/itsjungleboi \n▶https://www.instagram.com/itsjungleboi \n▶https://twitter.com/itsjungleboi  \n\nFollow CYB3RPVNK \n▶ https://www.instagram.com/cyb3rpvnk/ \n▶ https://www.facebook.com/cyb3rpvnklabel/ \n▶ https://soundcloud.com/cyb3rpvnk \n▶ https://www.cyb3rpvnk.com \n\nWeekly Updated Music \n▶ http://www.nightplaylist.com \n\n*Masks designed by Bob Basset (@bobbasset)\n\nDirector: Frank Borin & Ivanna Borin\nProducer: Daria Ivashchuk\nExecutive Producer: Frank Borin / Ivanna Borin / Vlad Bolyelov\nProduction Company: UnderWonder Content\nService Company Kiev: Limelite\nDOP: Nikita Kuzmenko\nChoreographer: Denis Stulnikov\nStylist: Lena Ignatenko\nEditor: Frank Borin & Ivanna Borin\nVFX Company: CGF Visual Effects Studio\nVFX Producer: Ekaterina Averina\nColorist: Joseph Bicknell @ Company3 NYC\nProduction Designer: Grisha Ermolin\n\n#ZAYN #R3HAB #FLAMES #Musicvideo #Jungleboi",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LWEG5xHgM7c"
        }
      },
      "contentDetails": {
        "videoId": "LWEG5xHgM7c",
        "videoPublishedAt": "2020-01-30T12:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zUUKsUMJxOxNiotDSq5HLpRHhRo",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CNTcxMDQ0NThBNzMxODYz",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:29Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Regard - Ride it (Official Audio)",
        "description": "Regard - Ride It is Out Now:  https://lnk.to/DJRegardRideItIG\nRegard Spotify Playlist: https://smarturl.it/RegardPlaylist  👈👈🏽👈🏿\n\n\nFollow Regard \nhttps://www.instagram.com/djregardofficial\nhttps://www.facebook.com/DjRegardOfficial\nhttps://twitter.com/DardanRegard\nhttps://www.tiktok.com/@djregard\nhttps://open.spotify.com/artist/4ofCBoyEiGSePFAG500xev?si=cl7-rPo_QZC8aTzwCikrVg\n\n\nMusic video by DJ Regard performing Ride It (Official Audio). \n(C) 2019 Ministry of Sound Recordings\n\n\nRegard Management\nwww.leafmanagement.net\nleaf.management1@gmail.com\n\n#regard #rideit",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LoSm6VkplJc"
        }
      },
      "contentDetails": {
        "videoId": "LoSm6VkplJc",
        "videoPublishedAt": "2019-07-26T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0AA93AKFfbsNyb3uwbwvynFERFU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CNTZFOTNGQzZEODg1RUQx",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:22Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Black Eyed Peas, J Balvin - RITMO (Bad Boys For Life)",
        "description": "\"RITMO (Bad Boys For Life)\" single available at: https://smarturl.it/RITMO\n\nFollow Black Eyed Peas online\nFacebook: https://www.facebook.com/blackeyedpeas\nTwitter: https://twitter.com/bep \nInstagram: https://www.instagram.com/bep\nMore Videos: https://www.youtube.com/playlist?list=PLgZwaNdNnwLpNLAN8Kh2DoWsD1ViSlNDN\n\nFollow Bad Boys For Life online\nOfficial Site: https://www.badboysforlife.movie/?hs308=ritmo\nWatch Trailer: https://www.youtube.com/watch?time_continue=1&v=jKCj3XuPG8M\nFacebook: https://www.facebook.com/BadBoysMovie\nTwitter: https://twitter.com/BadBoys\nInstagram: https://www.instagram.com/BadBoys/\n\nLyrics:\nThis is the rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo \n\nNo son ni Reebok ni son Nike (No)\nSin estilista luzco fly (Yes)\nLa Rosalía me dice que luzco guay (La Rosalía)\nNo te lo niego porque yo sé lo que hay (Woo)\nLo que se ve, no se pregunta (Nah)\nSoy próspero y tengo claro que e' mi culpa (Mi culpa, culpa)\nComo Canelo en el ring nada me asusta\nVivo en mi base y la paz no me la tumban (Woo)\nHakuna Matata como Timón y Pumba\nVoy pa' leyenda así que dale zumba\nLos dejo ciego' con la vibra que me alumbra\nHaters pa' la tumba, nosotros pa' la rumba (Ra)\n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\n[Chorus: J Balvin, Corona, will.i.am]\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo \n\nRitmo\n\nThe rhythm, the rebel\nStyles upon styles upon styles, I got several\nBorn to be wild 'cause I live like a daredevil\nLive it up, hit ‘em up, that’s the scenario \n2Pac, I get around like a merry go \nRooftop, I am on top of the pedestal \nFlu shot, I am so sick I need medical \nPuta, I learned that shit down in Mexico (Hahaha!)\nThe rhythm, the rebel\nNew and improved I be on a new level (Oh, yeah)\nThat’s how we do it, we buildin’ like LEGOs (Oh, yeah)\nFuel on the fire, you dealin' with fuego\nCan't stop, I am addicted I never quit\nWon't stop, don't need to speak to no therapist\nDon’t stop, keepin' it movin's the narrative\nNonstop, do it like Whoop! There it is \n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo\nYou like that space?\n\nVisit Bad Boys For Life Official Site\nLink: https://www",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EzKkl64rRbM"
        }
      },
      "contentDetails": {
        "videoId": "EzKkl64rRbM",
        "videoPublishedAt": "2019-10-11T04:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DSsPP8XTHQqoNz5JdZLkyWQEWmY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wRjhFM0MxMTU1MEUzQ0VB",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:19Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker & Ava Max - Alone, Pt. II",
        "description": "Walkers!\nThe music video for my brand new single “Alone, Pt. II” with @Ava Max  is finally here. This is the second chapter, continuing the story from the \"On My Way\" music video revealing many unanswered questions. I hope you like it, and are as excited as I am!\n\n- Alan\n\nCheck out the song here:  https://lnk.to/AWAlonePtII\n#AlonePart2 #AlanWalker #AvaMax #YouAreNotAlone\n\nAnd follow the story from Chapter 1 in the \"On My Way\" music video featuring @Sabrina Carpenter  & @Farruko  here:\nhttps://www.youtube.com/watch?v=dhYOPzcsbGM\n\n_____________________\n\n// LYRICS // Alan Walker & Ava Max - Alone Part 2 // LYRICS //\n\n[Verse 1]\n\nWe were young, posters on the wall\nPraying we're the ones that the teacher wouldn't call\nWe would stare at each other\n'Cause we were always in trouble\nAnd all the cool kids did their own thing\nI was on the outside always looking in\nYeah, I was there but I wasn't\nThey never really cared if I wasn't\n\n[Pre-Chorus]\nWe all need that someone who gets you like no one else\nRight when you need it the most\nWe all need a soul to rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Verse 2]\nThen I saw your face, your forgiving eyes\nLooking back at me from the other side\nLike you understood me\nAnd I'm never letting you go, oh\n\n[Pre-Chorus]\nWe all need that someone who gets you like no one else\nRight when you need it the most\nWe all need a soul to rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Interlude]\nI'm not gonna make it alone (La, la-la-la-la-la, 'lone)\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Pre-Chorus]\n'Cause you are that someone that gets me like no one else\nRight when I need it the most\nAnd I'll be the one you rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it alone\n\n/////////////////////////////////////////\n\nCREDITS:\n*Walker #28300*\n- Susanne Karin Moe\n\n*Main Crew*\n- Director: Kristian Berg\n- Executive Producer: Mikkel Gulliksen (Bleck Film)\n- Producer: Miriam Pedersen Eeg (Bleck Film)\n- DoP: Morten Forsberg\n- Focus Puller: Vi Duc Truong\n- Drone: Ryan Deboot\n- Production Manager: Stine Gundersen\n- Production Designer: Kristian Vestby\n- Costume Designer: Elise Nohr Nystad\n- Documentary DoP: Annicken Aasheim\n- VFX Producer: Eirik Heldal (Apparat)\n- VFX Lead Artist: Wirat Johannessen (Apparat)\n- Color Grading: Thomas Mangham (The Mill)\n- Sound design: Thomas «Tomtom» Haugland\n\n*Vietnam Crew*\n- Line Producer: Shelley Mc Morrow\n- Location Manager: Luke Ford\n- Local Fixer: Le Hong Vi Nghia\n- Production Assistant: Viet Anh Than Thanh\n\n*Son Doong Cave - Oxalis Adventure Tours (www.oxalisadventure.com)*\n- CEO: Chau A Nguyen\n- Technical Direction: Howard Limbert\n- Safety Advisor: Deb Limbert\n- Son Doong Porter Team Leader: Nguyen Tuan Vu\n- Safety Assistant: Hoang Anh Tuan\n\nBig thanks to Son Doong Porter Team!\n\n*Oslo Crew*\n- Scenographer: Petter L. Aker\n- Prop Master: Mari Helene Eios Eriksen\n- Prop Assistant: Jonas Mailand\n- Prop Assistant: Marius Næss\n- Gaffer: Daniel Atkinson\n- Lighting Assistant: Jon Andre Hakvåg\n- Lighting Assistant: Michael Furu Hansen\n- Makeup: Nina Ihrstad Noreng\n- Makeup: Anniken Aarvik\n- Makeup: Helle Kiel Bjørke\n\nThanks to all the extras!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HhjHYkPQ8F0"
        }
      },
      "contentDetails": {
        "videoId": "HhjHYkPQ8F0",
        "videoPublishedAt": "2019-12-27T08:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2Y75-7Lmdw0HSOZoJ3xmC2blxUk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41OURENDc2NEM1MDI5Mjky",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:15Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "TONES AND I - DANCE MONKEY (Dj Dark Remix)",
        "description": "▶ Subcribe to my channel: http://short.djdark.ro/subscribe\n▶ 💰 Donate: http://short.djdark.ro/donate\n▶ DOWNLOAD: http://djdark.ro/?p=13173\n\n▶ Booking: +4 0723 548 116 / booking@bestshow.ro\n🔔 Listen on SoundCloud: http://short.djdark.ro/dancemonkey\n🔔 DOWNLOAD [Extended]: http://short.djdark.ro/dancemonkeyyt\n\n✔️ Follow Dj Dark:\nhttp://short.djdark.ro/facebook\nhttp://short.djdark.ro/youtube\nhttp://short.djdark.ro/soundcloud\nhttp://short.djdark.ro/mixcloud\nhttp://short.djdark.ro/twitter\nhttp://short.djdark.ro/instagram\nhttp://short.djdark.ro/blog\n\n#tonesandi #dancemonkey #remix",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XpcjSnphVHw"
        }
      },
      "contentDetails": {
        "videoId": "XpcjSnphVHw",
        "videoPublishedAt": "2019-10-08T16:47:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "eJoPbMoFdeHbwKB2ydYjJ-8vA4I",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42QzdBMzlBQzQzRjQ0QkQy",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:06Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Meduza, Becky Hill, Goodboys - Lose Control (Official Video)",
        "description": "Watch the official video for \"Lose Control” by Meduza x Becky Hill x Goodboys.\n\nDownload & stream here: https://umg.lnk.to/losecontrol \n\nFollow Meduza:\nInstagram: https://www.instagram.com/MeduzaMusic/\nFacebook: https://www.facebook.com/MeduzaMusic/\nTwitter: https://twitter.com/MeduzaMusic/\n\nFollow Becky Hill:\nInstagram: https://www.instagram.com/beckyhill/\nFacebook: https://www.facebook.com/Beckyhillofficial\nTwitter: https://twitter.com/beckyhill/\n\nFollow Goodboys:\nInstagram https://www.instagram.com/goodboysoff/\nFacebook https://www.facebook.com/goodboysoff/\nTwitter https://twitter.com/goodboysoff\n\nDirected and Edited by 'GRANDMAS' @grandmasdirectors\n\nProducer Manoela Chiabai\nDirector of Photography Nick Morris\nExecutive Producer Martin Roker\nCommissioned by John Hassay\n\n#BlackDogFilms #ridleyscottcreativegroup #azceltic\n\n\nMusic video by Meduza, Becky Hill, Goodboys performing Lose Control. © 2019 Meduza, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/cceDfk",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-3P2USPFDcE"
        }
      },
      "contentDetails": {
        "videoId": "-3P2USPFDcE",
        "videoPublishedAt": "2019-10-24T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UEgsVVR0LUBipOl4snSjnNW6gIk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:02Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "The Chainsmokers with Kygo - Family (Official Video)",
        "description": "“Family” with Kygo OUT NOW ON THE WORLD WAR JOY ALBUM: https://TheChainsmokers.lnk.to/WorldWarJoyky\nAmazon Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/amazonmusic\nApple Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/applemusic\niTunes: https://TheChainsmokers.lnk.to/WorldWarJoyky/itunes\nSoundcloud: https://TheChainsmokers.lnk.to/WorldWarJoyky/soundcloud \nSpotify: https://TheChainsmokers.lnk.to/WorldWarJoyky/spotify\nYouTube Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/youtubemusic \n\nFollow The Chainsmokers:\nhttp://www.youtube.com/thechainsmokers\nhttp://www.twitter.com/thechainsmokers\nhttp://www.facebook.com/thechainsmokers\nhttp://www.instagram.com/thechainsmokers\nhttp://www.soundcloud.com/thechainsmokers\n\nDirected by Jeremiah Davis\nhttps://www.instagram.com/thatoneblondkid/\nhttps://www.youtube.com/thatoneblondkid\nhttps://twitter.com/thatoneblondkid\nhttps://www.facebook.com/thatoneblondkid\n\nLyrics:\n\nI know water that’s thicker than blood that’s deeper than love\nWith my friends\nPeople come and some people go and some people ride to the end\n \nWhen I am blind in my mind\nI swear they be my rescue\nMy lifeline \nI don’t know what I’d do if I, if I’d survive\nMy brothers and my sisters \nIn my life\nYeah\n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family \nFamily \nI’ll say forever my family \nI’ll say forever my family \n \nStolen dreams took our, our childish days \nStill \nAin’t nothing changed now we’re grown\nWe’re still young still got our mindless ways\nAnd our timeless phase kicking songs \n \nWhen I am blind in my mind\nI swear they be my rescue\nMy lifeline \nI don’t know what I’d do if I, if I’d survive\nMy brothers and my sisters \nIn my life\nYeah\n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family \nFamily \nFamily \nI’ll say forever my family \nFamily \nI’ll say forever my family \n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family\n\n#TheChainsmokers #Family #Kygo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mPbFxEGzCaM"
        }
      },
      "contentDetails": {
        "videoId": "mPbFxEGzCaM",
        "videoPublishedAt": "2019-12-12T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CS1luFq-viJ-dPJrMW3FaR9NGWQ",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tujamo & Lukas Vane - Drop It (Official Music Video)",
        "description": "Tujamo & Lukas Vane - Drop It is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/drop-it-1!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Tujamo:\nhttp://instagram.com/tujamo\nhttp://facebook.com/tujamo\nhttp://twitter.com/itstujamo\nhttp://soundcloud.com/tujamo\nhttp://youtube.com/tujamo\nhttp://tujamo.com\n\nFollow Lukas Vane:\nhttps://www.instagram.com/lukasvane\nhttps://www.facebook.com/DJLukasVane\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Tujamo\n#LukasVane\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2QsUBpTt-R0"
        }
      },
      "contentDetails": {
        "videoId": "2QsUBpTt-R0",
        "videoPublishedAt": "2019-10-30T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HFGVar0pFdaNB6uPFPJGqqTajd0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker, K-391, Tungevaag, Mangoo - PLAY (Alan Walker's Video)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nWalkers, \n\nIn 1999, Mangoo put out “Eurodancer” – a track considered to be one of the most iconic electronic tracks of all time.\nIt has now been revived by Mangoo and a new generation of producers from the modern day: Alan Walker, K-391 & Tungevaag.\n\nFollow the release on www.p74y.com\n\n- Alan\nLYRICS:\n\nwe used to hide under the covers \nserenade each other\nwith careless melodies \nsomething buried deep inside us \nthe major and the minor\nwe’re like piano keys\nyou played for me\nyou played for me, oooh \nyou played for me \n\ni swear it even in my sleep \ni hear it like the memory \nof everything we used to be\nyou played for me\n\nwe couldn’t stop the world from turning\nit was like a whirlwind, scattered us like leaves\nbut i’m stuck inside a feeling\nthe song that never leaves we were like a symphony\nyou played for me\nyou played for me, oooh\nyou played for me\n\ni swear it even in my sleep \ni hear it like the memory \nof everything we used to be\nyou played for me\n\n#pressplay\n\nCredits: \nConcept by:                  Alexander Zarate Frez & MER Recordings\nExecutive Producer:    MER Recordings\nDirector:                        Jarand Herdal\nProducer:                      Fredrik Wold-Hansen\nEditor:                            Alexander Zarate Frez\n                                       Mads Neset\nVFX:                               Apparat\nGrade:                           Go Electra v/Håvard Småvik\nAssistant Director:      Henrik Borge\nDOP                               Svarstad Lien\nCamera operator:        Lasse Heggen\nSteadicam operator:   Peder Torp Mathisen \nGaffer:                           Ole Kristian Nilsen\nBest boy:                       Lene Vaagland\nBoom operator            Håkon Solvsvik\nSet decorator              Stine Aas Nundal\nSet decorator ass       Brynhild Dagslott\nMake up:                      Jeanette Møller Lund\nHair                               Studio ALD w/Kathrine Stenholen\nProd. Ass                     Mai Asbjørnsen & Oda Helen Brurberg\n \nTalents: \nYoung Martin Tungevaag:    Henrik Boa Band Nes\nYoung K-391:                          Theodor Gelsdorf\nProducer 2019:                       Mai Asbjørnsen \nVocalist:                                   Torine \n\nThanks to K-391, Tungevaag, Mangoo & Torine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YQRHrco73g4"
        }
      },
      "contentDetails": {
        "videoId": "YQRHrco73g4",
        "videoPublishedAt": "2019-08-30T07:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YzJz7E-qAmSztnNqm5pF9b11U1Y",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tones And I - Dance Monkey (Alex Luciano Remix)",
        "description": "Tones And I - Dance Monkey (Alex Luciano Remix) 🎶🐒\nThank you for listening to our music, we hope you enjoy our channel & subscribe to it 🔔 : )\n🌴 Spotify: https://www.chillyourmind.com/spotify             🌴 Apple Music: http://bit.ly/cymapple   \n\n🎧 YouTube Playlist: http://bit.ly/chillyourminduploads     \n📸 Follow us on Instagram: http://bit.ly/cyminstagram\n\nTones And I - Dance Monkey - https://tonesandi.lnk.to/DanceMonkeyYT\n\nDirected by: Liam Kelly & Nick Kozakis\nDirector of Photography: Carl Allison\nProduced by Visible Studios\nhttps://www.visiblestudios.com.au/\n\n✓ Turn on the '🔔' to get notifications for new releases!\n👕 (New) ChillYourMind Shop: https://www.shopchillyourmind.com\n\n🔊 Stream/Download Tones And I - Dance Monkey (Alex Luciano Remix):\nhttps://hypeddit.com/track/dbt7gh\n\n🌴🕊 Follow ChillYourMind on:\n• Spotify: → https://www.chillyourmind.com/spotify\n  YouTube:  → http://bit.ly/cymyoutube\n• Apple Music: → http://bit.ly/cymapple\n• Instagram: →  http://bit.ly/cyminstagram\n• Facebook → http://bit.ly/facebookcym\n• VK: → https://vk.com/chillyourmindofficial\n• SoundCloud: → http://bit.ly/cymsc\n• Audiomack: →  http://bit.ly/cymaudiomack\n\n• Alex Luciano:\nFacebook : https://www.facebook.com/AlexLucianoMusic/\nInstagram : https://www.instagram.com/alexlucianomusic/\nYoutube : https://www.youtube.com/AlexLucianoMusic\nSoundcloud : https://soundcloud.com/alexlucianomusic\nSpotify: https://open.spotify.com/artist/0axUzm11mWMSfZiiZAn7C4?si=49siFNQISVe2M_jZuvuPAQ\n\nFollow Tones And I\nhttps://www.tonesandi.com\nhttps://www.facebook.com/TONESANDI\nhttps://www.instagram.com/tonesandi\n\nLYRICS:\nThey say oh my god I see the way you shine \nTake your hands my dear and place them both in mine\nYou know you stopped me dead while I was passing by\nAnd now I beg to see you dance just one more time \nOhhh I \nSee you see you seen you every time \nand oh my I, I like you style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh \nI’ve never seen anybody do the things you do before \nThey say\nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again \n\nI said \nOh my god I see you walking by \nTake my hands my dear and look me in my eyes\nJust like a monkey I’ve been dancing my whole life \nBut you just beg to see me dance just one more time \nOoh I \nSee you see you seen you every time\nAnd oh my I, I like your style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\n\nOooooo\n\nThey say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nAll again\n\n\n🎧 Youtube Playlists:\n↪︎  All Uploads: http://bit.ly/chillyourminduploads\n↪︎  Chill Mixes:  http://bit.ly/chillyourmindmixes\n↪︎  Official Releases: http://bit.ly/CYMRecordsReleases\n\n🎧 Spotify\n↪︎  Official Playlist: https://www.chillyourmind.com/spotify\n\n\n•  Picture by MAVRIN:\nhttps://500px.com/mavrin\nhttps://www.facebook.com/art.mavrin\n\nGood Vibes Only.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5TqTZP9Uy8s"
        }
      },
      "contentDetails": {
        "videoId": "5TqTZP9Uy8s",
        "videoPublishedAt": "2019-11-23T13:37:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "T_TpB6A9KE-UvXpm3EyztJ7f4f4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "LUM!X, Gabry Ponte - Monster (Official Music Video)",
        "description": "Austrian rising star LUM!X teams up with Gabry Ponte (known from the 1998 hit ‘Blue (Da Ba Dee)’ with his band Eiffel 65), for the powerful melbourne bounce track ‘Monster’.\n\nLUM!X, Gabry Ponte - Monster is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/monster!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow LUM!X:\nhttps://soundcloud.com/lumix_music\nhttps://www.instagram.com/lumix_music/\n\nFollow Gabry Ponte:\nhttps://www.youtube.com/user/gabryponte\nhttps://www.instagram.com/gabryponte/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#LUMIX\n#GabryPonte\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VWNFj9rm6tc"
        }
      },
      "contentDetails": {
        "videoId": "VWNFj9rm6tc",
        "videoPublishedAt": "2019-05-09T10:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6oC33Scit-ryCvu2aMZubNAG1h0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan x Walkers - Unity",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nFor a month now I’ve had an ongoing production process together with Walkers. This is the final result! It’s called «Unity» and is produced, written and recorded by us. Really proud of what we’ve achieved together from so many different places in the world. This is the anthem to our community!\n\nThank you to all the amazing Walkers for contributing on the different parts of the song.\n\nI hope you enjoy!\n\n- Alan\n#AlanXWalkers\n\n*Credits*\n\nPiano:\nWalker #0\n\nDrums:\nWalker #18677 \n(K4rim from Saudi Arabia)\n \nLead:\nWalker #27678 \n(Haruto Inoue from Japan)\n \nPads & Plucks:\nWalker #17210\n(Ardi Rida from Italy)\n \nHarp:\nWalker #13967\n(Natalie Lo from Hong Kong)  \n \nLyrics:\nWalker #326 #487 #817 #1295 #1862 #1990 #2339 #2436 #4064 #4199 #4348 #4355 #4684 #4744 #4832 #4832 #4852 #4934 #4946 #5060 #5062 #5105 #5107 #5160 #5195 #5202 #5207 #5208 #5235 #5677 #6079 #6145 #6172 #6316 #6356 #6409 #6455 #6851 #6930 #7101 #7400 #7457 #7898 #8598 #8627 #8658 #8711 #8974 #9086 #9343 #9383 #9428 #9979 #10152 #10668 #10702 #10731 #10754 #10781 #10796 #10886 #11132 #11203 #11293 #11325 #11327 #11364 #11404 #11545 #11695 #11719 #11818 #11836 #11993 #11998 #12016 #12176 #12236 #12263 #12270 #12315 #12345 #12597 #12660 #12774 #12834 #12894 #12941 #13006 #13178 #13276 #13292 #13300 #13371 #13598 #13718 #13815 #13899 #13910 #13984 #14058 #14064 #14161 #14183 #14192 #14197 #14251 #14354 #14388 #14435 #14529 #14706 #14714 #14731 #14732 #14791 #14805 #14812 #14897 #14898 #14913 #14984 #15035 #15185 #15247 #15259 #15298 #15338 #15521 #15524 #15572 #15618 #15626 #15680 #15857 #16123 #16153 #16165 #16223 #16230 #16285 #16304 #16396 #16404 #16449 #16513 #16757 #16778 #16895 #16938 #16980 #17058 #17121 #17194 #17196 #17423 #17434 #17559 #17560 #17580 #17652 #17654 #17719 #17733 #17745 #17781 #17795 #17820 #17993 #18028 #18073 #18098#18116#18165 #18184 #18185 #18190 #18217 #18256 #18419 #18466 #18559 #18568 #18844 #18973 #19049 #19097 #19160 #19239 #19318 #19323 #19336 #19349 #19368 #19462 #19494 #19513 #19557 #19597 #19642 #19715 #19850 #19907 #19987 #20003 #20091 #20093 #20205 #20206 #20320 #20364 #20374 #20393 #20409 #20458 #20492 #20500 #20563 #20590 #20638 #20640 #20665 #20700 #20713 #20734 #20740 #20776 #20818 #20868 #20924 #20991 #21137 #21139 #21179 #21276 #21296 #21341 #21342 #21388 #21390 #21437 #21603 #21697 #21800 #21885 #21935 #22018 #22057 #22086 #22133 #22141 #22145 #22150 #22185 #22222 #22290 #22387 #22422 #22447 #22653 #22764 #22999 #23033 #23428 #23528 #23564 #23568 #23640 #23653 #23858 #23869 #23870 #23922 #24066 #24376 #24492 #24553 #24569 #24690 #24758 #24842 #24846 #24901 #24915 #24948 #25095 #25130 #25306 #25314 #25331 #25408 #25444 #25477 #25500 #25587 #25612 #25766 #25833 #25894 #25912 #25949 #25962 #26035 #26058 #26229 #26244 #26494 #26529 #26547 #26662 #26799 #26836 #26846 #26858 #26872 #26900 #27084 #27170 #27218 #27346 #27370 #27372 #27393 #27577 #27583 #27650 #27670 #27730 #27736 #27849 #27868 #27964 #27966 #27973 #27982 #28121 #28129 #28277 #28307 #28397 #28490 #28524 #28529 #28534 #28621 #28623 #28784 #29026 #29195 #29237 #29297 #29465 #29552 #29589 #29641 #29644 #29707 #29907 #29917 #29974 #29998 #30051 #30082 #30201 #30233 #30285 #30500 #30507 #30516 #30626 #30713 #30758 #30766 #31018 #31062 #31064 #31075 #31095 #31107 #31186 #31205 #31419 #31483 #31522 #31608 #31643 #31675 #31679 #31690 #31739 #31754 #31785 #31790 #31818 #31844 #31858 #31882 #31905 #31944 #31991 #32000 #32020 #32097 #32103 #32148 #32176 #32178 #32189 #32195 #32222 #32226 #32229#32243 #32299 #32305 #32339 #32492 #32524 #32538 #32590 #32657 #32668 #32685 #32694 #32702 #32737 #33121 #33179 #33212 #33219 #33251 #33323 #33352 #33372 #33395 #33448 #33457 #33459 #33463 #33496 #33498 #33531 #33564 #33567 #33580 #33586 #33591 #33600 #33610 #33622 #33637 #33638 #33644 #33652 #33654 #33665 #33670 #33677 #33680 #33703 #33711 #33712 #33811\n\nTopline:\nWalker #32176\n(Sapphire from England)\n \nArtwork:\nWalker #7417\n(Jonathan Murray from USA)\n\nMixed by: James Njie",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "E3x_dLVTEuA"
        }
      },
      "contentDetails": {
        "videoId": "E3x_dLVTEuA",
        "videoPublishedAt": "2019-07-20T09:58:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3PVI8dv4nFjcyl1JtgJ-bepuonI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker, Sabrina Carpenter & Farruko - On My Way (Da Tweekaz Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII \n\nWalkers! Here is Da Tweekaz Remix of \"On My Way\".\n\nThere’s nothing that excites me more than performing my songs live for my fans, and I think this remix really captures that feeling! This has been such a crazy journey so far, performing in every corner of the world for crazy audience! Thank you for being such amazing crowds all of you!\n\n- Alan \n\nFootage: Mohammed Sarmadawy & Erik Hem\nEdit: Mads Holm Neset",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1JHXn0LWx50"
        }
      },
      "contentDetails": {
        "videoId": "1JHXn0LWx50",
        "videoPublishedAt": "2019-06-25T10:02:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3BVroe-om8e2Zg-b4ws5jMPHAUY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Darkside (feat. Au/Ra and Tomine Harket)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nWalkers, it's time to finally share the second chapter of the World Of Walker trilogy with you guys. \"Darkside\" is the sequel to \"All Falls Down\" and features the amazing and talented Au/Ra and Tomine Harket. Hope you enjoy the music as well as the music video! Let me know what you think - like, share and leave a comment in the section below! (you can find lyrics at the end of the description)\n- Alan\n\nListen to the single here: https://AlanWalker.lnk.to/Darkside\n#WorldOfWalker\n\nMy debut album, “Different World\" is finally out! \nCheck it out here: https://lnk.to/AW-DW-Album\n\nCheck out the other videos in the trilogy:\nTired (Prologue) - https://www.youtube.com/watch?v=g4hGRvs6HHU\nAll Falls Down (Episode 1) - https://www.youtube.com/watch?v=6RLLOEzdxsM\n\n-\n\nCredits:\nDirector: Kristian Berg (http://www.kristianberg.com)\nConcept: Kristian Berg & MER (http://www.mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://www.viperfilm.com)\nProduced by: Niklas Røseth - iProduksjon (http://www.iproduksjon.com)\nProduced by: Ana Sikavica - Red Production (http://www.redproduction.tv)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\nEditor: Kristian Berg & Jonas Aarø\nVFX: Wirat Johannessen (Knowit Experience)\nGrade: Julien Alary\n\nCostume Designer: Elise N. Nystad\nSet Designer: Krešo Glavinić\nGaffer: Vladimir Slijepčević \n1st AC: Espen Olsen\nDrone Operator: Roger Fosaas\n\nShot on location in Croatia, Montenegro and Bosnia & Herzegovina.\n\nA special thanks to everyone involved!\n\n-\n\nLyrics:\n\n[Verse 1 - Tomine Harket]:\nWe're not in love\nWe share no stories\nJust something in your eyes\nDon't be afraid\nThe shadows know me\nLet's leave the world behind\n\n[Chorus]:\nTake me through the night\nFall into the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side\n\n[Verse 2 - Au/Ra]:\nBeneath the sky\nAs black as diamonds\nWe're running out of time\nDon't wait for truth\nTo come and blind us\nLet's just believe their lies\n\n[Pre-chorus - Au/Ra]:\nBelieve it, I see it\nI know that you can feel\nNo secrets worth keeping\nSo fool me like I'm dreaming\n\n[Chorus]:\nTake me through the night\nFall in to the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side\n\n[Chorus]:\nTake me through the night\nFall into the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "M-P4QBt-FWw"
        }
      },
      "contentDetails": {
        "videoId": "M-P4QBt-FWw",
        "videoPublishedAt": "2018-07-27T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Pp1Dtr1P7gQhoMpp9VPJwbzh3V4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NDk1REZENzhEMzU5MDQz",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Diamond Heart (feat. Sophia Somajo)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nWalkers! I really can´t believe this is happening. It's finally time for me to share the third and final chapter of the World Of Walker trilogy with you all. «Diamond Heart» features the very talented Sophia Somajo. \n\nThis has been such an amazing and crazy journey – thank you to each and everyone of you for the support along the way. Let me know what you think by liking, sharing and commenting in the section below! \n\n- Alan 💎❤️\n\nListen to the single here: https://lnk.to/DiamondHeart \n#DiamondHeart\n\nListen to Spotify: https://spoti.fi/2O2kGZX\n\nCheck out the other videos in the trilogy:\nTired (Prologue) - https://www.youtube.com/watch?v=g4hGR...\nAll Falls Down (Chapter 1) - https://youtu.be/6RLLOEzdxsM\nDarkside (Chapter 2) - https://youtu.be/M-P4QBt-FWw\n\n-\n\nCredits:\nDirector: Kristian Berg (http://kristianberg.com)\nConcept: Kristian Berg & MER (http://mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://viperfilm.com)\n\nProduced by: Guðfinnur Ýmir Harðarson - Hero Productions Iceland (http://hero.is)\n\nProduced by: Roger Pritzke - M for Media (http://mformedia.com)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\n\nEditor: Kristian Berg \nVFX: Erik Ferguson \nGrade: Comany 3\n\nCostume Designer: Elise N. Nystad \nArt department: Freyja Vals Sesseljudóttir \nGaffer: Finnur Þór Hrafnsson \n1st AC: Philip Borgli \nDrone Operator: Vilius Petrikas & Mohanad Ahma\n\nShot on location in Iceland & United Arab Emirates.\n\nA special thanks to everyone involved!\n\n-\n\nLyrics:\n\nhello sweet grief\nI know you will be the death of me\nfeel like the morning after ecstasy\nI am drowning in an endless sea\n\nhello old friend\nhere’s the misery that knows no end\nso I am doing everything I can\nto make sure I never love again\n\nI wish that I did not know \nwhere all broken lovers go\nI wish that my heart was made of stone\n\nYeah if I was bulletproof\nI’d love you black and blue\nIf I was solid like a jewel\n\nIf I had a diamond heart\noh oh\nI’d give you all my love\nIf I was unbreakable\n\nIf I had a diamond heart\noh oh\nYou could shoot me with a gun of gold\nIf I was unbreakable\n\nI’d walk straight through the bullet\nbendin’ like a tulip\nblue-eyed and foolish\nnever mind the bruises\ninto the fire\nbreakin’ through the wires\ngive you all I’ve got\n \nIf I had a diamond heart\n\nI’d walk straight through the dagger\nnever break the pattern\ndiamonds don’t shatter\nbeautiful and battered\ninto the poison\ncry you an ocean\ngive you all I’ve got\n\nIf I had a diamond heart\n\ngoodbye, so long\nI don’t know if this is right or wrong\nam I giving up where I belong?\n’cause every station is playing our song\n\ngoodbye my love\nyou are everything my dreams are made of\nyou’ll be Prince and I’m the crying dove \nIf I only were unbreakable\n\nI wish that I did not know \nwhere all broken lovers go\nI wish that my heart was made of stone\n\nYeah if I was bulletproof\nI’d love you black and blue\nIf I was solid like a jewel\n\nIf I had a diamond heart\noh oh\nI’d give you all my love\nIf I was unbreakable\n\nIf I had a diamond heart\noh oh\nYou could shoot me with a gun of gold\nIf I was unbreakable\n\nI’d walk straight through the bullet\nbendin’ like a tulip\nblue-eyed and foolish\nnever mind the bruises\ninto the fire\nbreakin’ through the wires\ngive you all I’ve got\n \nIf I had a diamond heart\n\n I’d walk straight through the dagger\nnever break the pattern\ndiamonds don’t shatter\nbeautiful and battered\ninto the poison\ncry you an ocean\ngive you all I’ve got\n\nIf I had a diamond heart\n\n#WorldOfWalker",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sJXZ9Dok7u8"
        }
      },
      "contentDetails": {
        "videoId": "sJXZ9Dok7u8",
        "videoPublishedAt": "2018-09-28T07:01:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ghZbhEBUatFu2QOliqriljQNKTI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5GNjNDRDREMDQxOThCMDQ2",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "K-391 & Alan Walker - Ignite (feat. Julie Bergan & Seungri)",
        "description": "See the MOTi Remix of End of Time here: https://youtu.be/5rLVz20t_Ho\n---\nCheck out my new release ”End of Time” with Alan Walker and Ahrix!\nhttps://orcd.co/ENDOFTIME\n\ncheck out the next chapter in the series with my new single \"Mystery\" ft. Wyclef Jean! https://www.youtube.com/watch?v=_8HNJKdI-Sg \n\nlooking forward to seeing all your videos, remixes and covers.\nyou can find the lyrics below.\n \nIIIIXI\n \nListen to the single here: http://radi.al/K391Ignite\n \nAlso, remember to check out the Prologue: \nhttps://www.youtube.com/watch?v=3YpZpJTILuI\n \nCredits:\nDirector: Alexander Zarate Frez\nConcept: MER (www.mer.as)\nProduced by: MER (www.mer.as)\nCo Producer: Good Company (www.goodco.tv)\nD.O.P: Eirik Skarstein\nEditor: Alexander Zarate Frez\nVFX: Steamheads\nGraphics: Simon Diaz\nGrade: Jon Arne Storkås & Axel Rødningen\n \nA special thanks to all feature artists and Thomas Hayes. \n\nMER exclusively licensed to Liquid State\n\nLYRICS:\n[Verse 1 – Julie Bergan]:\nFireflies\nA million little pieces\nFeeds the dying light\nAnd breathes me back to life\n \nIn your eyes \nI see something to believe in\nYour hands are like a flame\nIt brings the sweetest pain (your palms, the sweetest pain)\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nLike a starship speeding into the night\nYou and I get lost in the infinite lights\nBaby tell me one more beautiful lie\nOne touch and I ignite [x3]\n\n[Verse 2 – Julie Bergan]:\nSo alive\nYour touch is like the daylight\nBurning on my skin\nIt turns me on again\n \nYou and I\nSurvivors of the same kind\nAnd we’re the only ones\nDancing on the sun\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nYou’re the demon in my mind             \nLike a fever, feels so right\nBaby tell me one more beautiful lie\nOne touch and I ignite [x3]\n\n[Bridge - Seungri]:\nDiamonds are forever, but all we need is just tonight\nWe’re monumental tremors that can freeze the speed of life\nJust like particles that's falling from heaven all over the stars\nHear you calling for me\nHear you calling me on from afar\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nI feel the heat as we collide\nLike a fever that feels so right\nBaby tell me one more beautiful lie\nOne touch and I ignite [x6]",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Az-mGR-CehY"
        }
      },
      "contentDetails": {
        "videoId": "Az-mGR-CehY",
        "videoPublishedAt": "2018-05-12T07:29:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "i6u1-kkCS6xyUWLIL094U1xmWrg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi40NzZCMERDMjVEN0RFRThB",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "JABBAWOCKEEZ x Tiësto - BOOM with Gucci Mane & Sevenn",
        "description": "In celebration of his birthday, we treated Tiësto to a special surprise performance at MGM Grand Las Vegas! Shortly afterwards, we took over Hakkasan Nightclub to continue the festivities...\n\n\"BOOM\" by Tiësto, Gucci Mane & Sevenn\nClick here to stream and download: http://tsto.co/gucciboom\n\nSpecial thanks to Hakkasan Nightclub, located within MGM Grand Las Vegas. @HakkasanLV #HakkasanLV\n\nConnect with Tiësto:\nhttps://www.facebook.com/tiesto/\nhttps://twitter.com/tiesto\nhttps://www.instagram.com/tiesto/\nhttps://soundcloud.com/tiesto\n\nJabbawockeez new show \"JREAMZ\" now playing in Las Vegas at MGM Grand. Purchase Tickets to the Show: http://www.jbwkz.com\n\nhttp://www.facebook.com/Jabbawockeez\nhttp://www.twitter.com/Jabbawockeez @Jabbawockeez\nhttp://www.instagram.com/Jabbawockeez @Jabbawockeez\n\nProduced by: Jabbawockeez\nDirected by: Joe Larot & Christian Astorga\nSpecial thanks to the efforts of the cast: Rainen Paguio, Kevin Brewer, Brandon Raphael, Austin Gutierrez, Tamasi Avei, Reece Austin, Mike Perez, Chris Buenaventura, Justin David, Brandon Roberts, Sae Cha, Janae Rosebud , Mike Urquhart, Gavin Pecson, JoJo Diggs, Stephan Evans, Xavier Berkeley, Anthony Hatmaker, Lee Ann Goff-Daudet, Richie Tayag, Raphael Hubilla, Jason Magsuci, & Christopher Pangilinan.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QYU18mrBB54"
        }
      },
      "contentDetails": {
        "videoId": "QYU18mrBB54",
        "videoPublishedAt": "2018-02-02T14:03:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "59YXsQyKvf8NpUVnLx0532M2lX0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EMEEwRUY5M0RDRTU3NDJC",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Dimitri Vegas & Like Mike vs W&W & Moguai -  Arcade Mammoth (Official Music Video)",
        "description": "Win a trip to Tomorrowland; https://win.dimitrivegasandlikemike.com ❤  \n\nStream or get a free copy of Arcade Mammoth: https://summerofmadness.com\n\nEstablished from the offset with the biggest festival stage in mind, Tomorrowland residents Dimitri Vegas & Like Mike alongside W&W and Moguai present to you the seismic peak time beast that is ‘Arcade Mammoth’. A mash-up of pure ecstasy and features a pulsating crescendo that drips with power and profound intensity.\n\nEnjoy this festival 2018 favourite in all its glory. As can be seen from the mainstage scaling video, the showcases the magnitude of this gigantic record! All of the artists behind this record have achieved staggering goals within the electronic music scene, so it should come as little surprise than that this beat driven beast contains the perfect recipe for mainstage domination!\n\nreturn to the helm with 7 new ground-breaking releases which combine heavy-duty basslines, impeccable productions, spell binding drops and powerful synths ripping through the tracks throughout, transporting avid listeners to another dimension, whilst remaining true to their iconic sound. \n\n\nFollow Dimitri Vegas & Like Mike on Spotify:\nhttp://dimitrivegasandlikemike.com/spotify\n\nRelive the MADNESS with these exclusive Spotify playlists:\nThe Official Tomorrowland Playlist:\nhttp://tomorrowland.com/spotify\nThe Smash The House Radio Playlist:\nhttp://smashthehouse.com/spotify\n\nSubscribe yourself for more Tomorrowland Music on: \nhttps://www.youtube.com/user/SmashTheHouse\n\nFollow us on social media:\nhttp://www.facebook.com/dimitrivegasandlikemike\nhttp://www.twitter.com/dimitrivegas\nhttp://www.twitter.com/likemike\nhttp://www.instagram.com/dimitrivegasandlikemike\nhttp://www.soundcloud.com/dimitrivegasandlikemike\n\nFollow W&W:\nhttps://www.facebook.com/wandwofficial/\nhttps://twitter.com/WandWmusic\nhttps://www.instagram.com/wandwmusic/\n\nFollow Moguai:\nhttps://www.facebook.com/djmoguai/\nhttps://twitter.com/moguai\nhttps://www.instagram.com/moguai/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3Qq7kNjg-KY"
        }
      },
      "contentDetails": {
        "videoId": "3Qq7kNjg-KY",
        "videoPublishedAt": "2018-08-03T11:57:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "niopTid9OiZoM-C9tuggTCaRsy8",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45ODRDNTg0QjA4NkFBNkQy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Hardwell & Maddix - Bella Ciao (Live Video)",
        "description": "Hardwell & Maddix - Bella Ciao\nListen here ➡️ http://revr.ec/BC-YT\nJoin the 'Bigroom Drops' Spotify Playlist!🔥 https://revr.ec/BIGROOM-DROPS\n\nLabel boss Hardwell teams up with long-time Revealed key player Maddix to present ‘Bella Ciao’ on Revealed Recordings. The track samples the Italian classic ‘Bella Ciao’, made famous by the popular ‘La Casa De Papel’ series, and was premiered by Hardwell during his set at this year’s Tomorrowland, and the hype has been building ever since.\n\nThe track is introduced with the original Italian folk song kicking off proceedings, before electronic elements are added, highlighted by a synth that mirrors the original melody, gliding from note to note. That is layered with multiple stadium ready accompaniments that beef out the track on the drop. Light plucks are introduced in the main break to reduce the heat, quickly switching up as the intensity increases again, the track building towards it’s anthemic finish with a shephard tone riser and expertly programmed snares.\n\nThe anticipation for this track has reached fever pitch since it was first heard, and now fans finally have the chance to grab a copy of ‘Bella Ciao’ when it is released 17th August via Revealed Recordings.\n\nVideo credits: Tomorrowland \n\nGet connected! \nhttp://www.revealedrecordings.com\nhttp://www.facebook.com/revealedrecordings\nhttp://www.twitter.com/revealedrec\nhttp://instagram.com/revealedrec\nhttp://www.soundcloud.com/revealed-recordings\nhttp://open.spotify.com/user/revealedrec\nhttp://www.youtube.com/revealedrec",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0bmE9XY3sOc"
        }
      },
      "contentDetails": {
        "videoId": "0bmE9XY3sOc",
        "videoPublishedAt": "2018-08-17T13:28:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bIqK2seK-Ow6uS4W9kfonLNZys0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41Mzk2QTAxMTkzNDk4MDhF",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Martin Garrix feat. Bonn - High On Life (Official Video)",
        "description": "Martin Garrix feat. Bonn - High On Life (Official Video)\n♫ High On Life feat. Bonn is out now: http://stmpd.co/MGHOLID\n♫ Drown is out now: http://stmpd.co/C6Rq6ID\n\nPremiered my new track High On Life featuring Bonn on Tomorrowland 2018 and the official video is also my aftermovie for this amazing festival. Hope you enjoy it!\n\nClick on subtitles to turn lyrics on/off.\n\nFollow Martin Garrix: \nFacebook: http://facebook.com/MartinGarrix\nTwitter: http://twitter.com/MartinGarrix\nInstagram: http://instagram.com/MartinGarrix\nYouTube: http://youtube.com/MartinGarrix\n\nFollow STMPD RCRDS\nYouTube: http://www.youtube.com/c/stmpdrcrds\nFacebook: https://www.facebook.com/STMPDRCRDS/\nInstagram: https://www.instagram.com/stmpdrcrds/\nTwitter: https://twitter.com/stmpdrcrds\nSpotify: http://stmpd.co/ST50SPID\n\nDirected and edited by: Damian Karsznia\n\nCinematography by: \n- Sjors Ruijters \n- Fabian de Prieëlle\n- Mathias Normann\n- Mees Roozen\n- Joris Hoevenberg\n- Damian Karsznia\n\n#HighOnLife #Garrix #Bonn\n#MartinGarrix #Tomorrowland #Aftermovie #Tomorrowland2018",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Lpjcm1F8tY8"
        }
      },
      "contentDetails": {
        "videoId": "Lpjcm1F8tY8",
        "videoPublishedAt": "2018-07-30T14:51:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "m9nYzYCLMAcUw2mz__fvrQdj1rg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EQUE1NTFDRjcwMDg0NEMz",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Stadiumx - Touch My Soul (Official Music Video)",
        "description": "Stadiumx - 'Touch My Soul' is OUT NOW on Hysteria!\n\nStream or download: https://hysteria.release.link/touch-my-soul\n\n==============\n\nBe part of the Hysteria Family! Subscribe to our channel, hit that Like button and click the bell to be the first to know when we upload a new video. Also, don't forget to share and stay connected through our socials.\n\nSubscribe to Hysteria YouTube: http://bit.ly/1nQGl3e\nHysteria Facebook: https://facebook.com/hysteriarecords\nHysteria Twitter: https://twitter.com/hysteriarecords\nHysteria Instagram: https://instagram.com/hysteriarecords\nHysteria Soundcloud: https://soundcloud.com/hysteriarecords\n\nStadiumx:\nFacebook: https://facebook.com/stadiumxofficial\nTwitter: https://twitter.com/stadiumx\nInstagram: https://instagram.com/stadiumx\nSoundcloud: https://soundcloud.com/stadiumxofficial",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_y1iRn7ITNs"
        }
      },
      "contentDetails": {
        "videoId": "_y1iRn7ITNs",
        "videoPublishedAt": "2019-11-15T11:59:33Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "OC77n-YiXIhSgPlTyNcirunjrDY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41QTY1Q0UxMTVCODczNThE",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "KSHMR x KAAZE - Devil Inside Me (feat. KARRA) [Official Lyric Video]",
        "description": "Best of KSHMR - KSHMR MIX 2020: https://youtu.be/SKXPmV3L3Jo\nSpinnin’ Massive Monday is here to make your day a whole a lot better with a brand new energetic Dance track! Start your week off with a bang every Monday at 5 PM CEST!\n\nKSHMR x KAAZE - Devil Inside Me (feat. KARRA) is OUT NOW on Dharma! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://dharmamusic.release.link/devil-inside-me-feat-karra!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nKSHMR\nInstagram: https://www.instagram.com/kshmr/\nFacebook: https://www.facebook.com/KSHMRmusic/\nTwitter: https://twitter.com/KSHMRmusic\nSoundCloud: https://soundcloud.com/kshmr\nSpotify: https://open.spotify.com/user/kshmrmusic?si=fVfUAZZzSt-66WekFg0Eqg\nYouTube: https://www.youtube.com/user/KSHMRmusic?sub_confirmation=1\n\nKAAZE\nInstagram:  https://www.instagram.com/iamkaaze/\nFacebook: https://www.facebook.com/kaazeofficial/\nTwitter: https://twitter.com/iamkaaze\nSoundCloud: https://soundcloud.com/iamkaaze\nYouTube: https://www.youtube.com/channel/UC4YCVy0ggUoFd2NVU2z04WA\nSpotify:  https://open.spotify.com/artist/6WGE3kO8ULME2ErBcOksSR?si=RcFBP5eeTj2YCHrQNvNOWA\n\nKARRA\nInstagram: https://www.instagram.com/iamkarramusic/\nFacebook: https://www.facebook.com/karramusic/\nTwitter: https://twitter.com/IAMKarraMusic\nSoundCloud: https://soundcloud.com/iamkarramusic\nYouTube: https://www.youtube.com/user/iamkarramusic\nSpotify: https://open.spotify.com/artist/24CzPFC4y3bM4AkUnZfuAU?si=hs-_O7moTFehqxvJogko0w\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#KSHMR\n#KAAZE\n#DevilInsideMe\n#KARRA\n#SpinninMassiveMonday\n#MassiveMonday\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "96n2gRDPWyM"
        }
      },
      "contentDetails": {
        "videoId": "96n2gRDPWyM",
        "videoPublishedAt": "2019-05-27T15:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "D5nBKJPbIo6SZuqnj9Kcm5HOYFk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yMUQyQTQzMjRDNzMyQTMy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Faded",
        "description": "Walkers! Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://youtu.be/cYxAr_NZF9E\n\n#Faded #AlanWalker #EDM #House #YouAreNotAlone\n\n_____________________\n\n// LYRICS // Alan Walker - Faded // LYRICS //\n\nYou were the shadow to my light\nDid you feel us\nAnother start\nYou fade away\nAfraid our aim is out of sight\nWanna see us\nAlive\nWhere are you now\nWhere are you now\nWhere are you now\nWas it all in my fantasy\nWhere are you now\nWere you only imaginary\nWhere are you now\nAtlantis\nUnder the sea\nUnder the sea\nWhere are you now\nAnother dream\nThe monsters running wild inside of me\nI'm faded\nI'm faded\nSo lost\nI'm faded\nI'm faded\nSo lost\nI'm faded\nThese shallow waters, never met\nWhat I needed\nI'm letting go\nA deeper dive\nEternal silence of the sea\nI'm breathing\nAlive\nWhere are you now\nWhere are you now\nUnder the bright\nBut faded lights\nYou set my heart on fire\nWhere are you now\nWhere are you now\nWhere are you now\nAtlantis\nUnder the sea\nUnder the sea\nWhere are you now\nAnother dream\nThe monsters running wild inside of me\nI'm faded\nI'm faded\nSo lost\nI'm faded\nI'm faded\nSo lost\nI'm faded\n\n/////////////////////////////////////////\n\nFrom the beginning. Check out my other earlier songs here: https://www.youtube.com/watch?v=nO77w5KJL3s&list=PLYT4vq6pQVSuiFwl8Vv4XmCpdBDc8HeO6\n\nAlso, BTS footage here, like from my recent Aviation Tour in China: https://www.youtube.com/watch?v=UsprGgsLQNs&list=PLYT4vq6pQVSv_jFjvsMuxr6poP4yBU0VE\n\n/////////////////////////////////////////\n\nCREDITS:\nVocalist: Iselin Solheim\nVideo Location: Tallinn, Estonia\nVideo produced by: Bror Bror\nDirectors: Rikkard & Tobias Häggbom\nD.O.P: Rikkard Häggbom\nEdit and grading: Bror Bror\nActor: Shahab Salehi\n\n_____________________________________\n\nFacebook: http://bit.ly/AlanWalker_Facebook\nInstagram: http://bit.ly/AlanWalker_Instagram\nTwitter: http://bit.ly/AlanWalker_Twitter\n\n______________________________________\n\nVocalist: Iselin Solheim\nVideo Location: Tallinn, Estonia\nVideo produced by: Bror Bror\nDirectors: Rikkard & Tobias Häggbom\nD.O.P: Rikkard Häggbom\nEdit and grading: Bror Bror\nActor: Shahab Salehi\n\n© 2015 Alan Walker & MER Musikk\n℗ 2015 Sony Music Entertainment Sweden AB",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "60ItHLz5WEA"
        }
      },
      "contentDetails": {
        "videoId": "60ItHLz5WEA",
        "videoPublishedAt": "2015-12-04T07:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7w1BRp1jcULBOdKA8h4-dLZqve4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45RTgxNDRBMzUwRjQ0MDhC",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - All Falls Down (feat. Noah Cyrus with Digital Farm Animals)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nI’m extremely excited to finally release the music video for my new single All Falls Down. Let me know what you think - like, share and leave a comment in the section below!\n- Alan\n\n#WorldOfWalker\n\nListen to the single here: https://AlanWalker.lnk.to/AllFallsDown\n\nAlso remember to check out these videos:\n- Tired: https://youtu.be/g4hGRvs6HHU\n- All Falls Down (trailer): https://youtu.be/74EOvSjXrgY\n\nMerch available at http://bit.ly/AlanWalkerMerch\n\n---\nCredits:\nDirector: Kristian Berg (http://www.kristianberg.com)\nConcept: Kristian Berg & MER (http://www.mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://www.viperfilm.com)\nProduced by: Niklas Røseth - iProduksjon (http://www.iproduksjon.com)\nProduced by: Ana Sikavica - Red Production (http://www.redproduction.tv)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\nEditor: Jonas Aarø\nVFX: Wirat Johannessen (Knowit Experience)\nAdditional flag design: Audun Notevarp\nGrade: Julien Alary\nSound design: Fredrik Borch Olsen (http://www.mer.as)\n\nCostume Designer: Elise N. Nystad\nSet Designer: Krešo Glavinić\nGaffer: Vladimir Slijepčević \n1st AC: Espen Olsen\nDrone operator: Roger Fosaas\n\nShot on location in Croatia, Montenegro and Bosnia & Herzegovina\n\nA special thanks to everyone involved!\n\n---\n\nLyrics:\nWhat's the trick I wish I knew \nI'm so done with thinking through \nAll the things I could've been\nAnd I know you wonder too,\nAll it takes is that one look you do\nand I run right back to you\nu crossed the line \n& it's time to say f-u!\n\nWhat’s the point in saying that \nwhen u know how I’ll react \nU think u can just take it back\nbut shit just don’t work like that\nyou’re the drug that I’m addicted to\nAnd I want you so bad\nGuess I’m stuck \nwith you\nand that’s that\n\nCus when it all falls down, then whatever \nWhen it don’t work out for the better\nIf we just ain’t right and it’s time to say goodbye \nwhen it all falls down,\nwhen it all falls down\nI’ll be fine \nI’ll be fine \nI’ll be fine\n\nYou’re the drug that I’m addicted to\nAnd I want you so bad\nBut I’ll be fine\n\nWhy we fight, I don’t know\nWe say what hurts the most \nOh, I try \nstaying cold,\nBut you take it personal, \nAll this firing shots,\nand making grounder \nIt’s way too hard to cope \nBut I still \nCan’t let \nYou go\n\nAll Falls Down,\nAll Falls Down,\nAll Falls Down,\nAll Falls Down.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6RLLOEzdxsM"
        }
      },
      "contentDetails": {
        "videoId": "6RLLOEzdxsM",
        "videoPublishedAt": "2017-10-27T06:59:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "C6jdKbUlKH7VQrrTfBqAxp16CDE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5ENDU4Q0M4RDExNzM1Mjcy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Ina Wroldsen - Strongest (Alan Walker Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII \n\nCheck out my remix of Ina Wroldsens awesome new single Strongest! Hope you like it and let me know what you think in the comments below.\n\n/ Alan\n\nStream the remix on Spotify: http://spoti.fi/2jC8M7f\n\nAlso don’t forget to check out my own lastest single ”All Falls Down” http://www.bit.ly/AFDVideo and make sure to turn notifications ON on YouTube so you don’t miss any of my updates!\n\n#WorldOfWalker\n\nLyrics: \nYou sit there with that look on your face like you won\nLike nothing that I say is gonna change how you feel now\nYou sit there and you tell me you fell outta love\nAnd we are in your way so you just gotta leave now\nAnd we just need to understand your reasons\nAnd you are gonna justify this treason\nBy telling me the promises that we sworn ain't enough\n\nSo now you gonna be another person?\nAnd how do I explain this shit to our son?\nHow'd you tell a toddler about a girlfriend?\nDaddy's gone\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\n\nYou sit there with your phone in your hands and you're hurt\nYou tell me that you feel like you lost me when he came\nI'm sorry but I cannot connect with your words\n'Cause right now what matters isn't yours but it is his name\nAnd we just need to find another income\n'Cause she wants you to help her with her own one\nAnd you want me to tell me that what you've done is okay\n \nSo now you gonna be another father?\nAnd I will be a different kind of mother?\nAnd you'd tell a toddler 'bout step brothers?\nDaddy's strayed\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\n\nLet's talk about family\nLet's talk about family\nLet's talk of the ties and the lies\nAnd the love that we had in this family\nLet's talk about honesty\nYou know nothing about honesty\nI'll let go of your hands and our plans\nAnd the chance that we had with this family\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\nOh na na, we'll leave you alone\n\n\nVideo by: Simon Diaz Compagnet",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-_leYftruXI"
        }
      },
      "contentDetails": {
        "videoId": "-_leYftruXI",
        "videoPublishedAt": "2017-12-01T08:33:51Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xYIUWrB2UKqsYtrEBsuVK4hkbyU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yMDhBMkNBNjRDMjQxQTg1",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Blasterjaxx & Timmy Trumpet - Narco (Official Music Video)",
        "description": "Blasterjaxx & Timmy Trumpet - Narco is OUT NOW on MAXXIMIZE! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://maxximize.lnk.to/Narco\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nBlasterjaxx teams up with the ever pleasing Timmy Trumpet for their banger Narco! Get infected with this addictive tune, bound you bring you in a trance with its massive kicks. The steel drums and mysterious trumpets are gaining curiosity as the uplifting vocals are taking over. It is preparing you for the massive drop that will blast through the sound barrier with immense power. This tune is too hard to handle! \n\nFollow Blasterjaxx:\nhttp://www.facebook.com/BlasterjaxxOfficial\nhttps://www.twitter.com/blasterjaxx \nhttps://www.soundcloud.com/blasterjaxx \nhttps://www.blasterjaxx.com\n\nFollow Timmy Trumpet\nhttp://www.timmytrumpet.com\nhttps://www.facebook.com/timmytrumpet\nhttps://twitter.com/timmytrumpet\n\nPatrick Davelaar\nPatrick Davelaar\n#Hekje\nNetherlands\n---\n\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve and many, many more! Expect daily uploads of official music videos, lyric videos and artwork videos across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Blasterjaxx\n#TimmyTrumpet\n#SpinninRecords\n#Spinnin\n#MAXXIMIZE",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "S73zDvMgGmI"
        }
      },
      "contentDetails": {
        "videoId": "S73zDvMgGmI",
        "videoPublishedAt": "2017-11-23T20:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "k_p5afie8bVd5JCKXn-4bD-dFuM",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5GM0Q3M0MzMzY5NTJFNTdE",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Kygo - Stranger Things ft. OneRepublic (Alan Walker Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nI made a remix of “Stranger Things” for my good friend Kygo & One Republic, what do you guys think? Make sure to leave me a message in the comment section, and share with your friends!\n\n/ Alan\n\nVideo: Simon Compagnet",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-35jibKqbEo"
        }
      },
      "contentDetails": {
        "videoId": "-35jibKqbEo",
        "videoPublishedAt": "2018-02-14T17:00:49Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6vWD8XiZKn5RXFuHTC1tcisJ7Rs",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4zRjM0MkVCRTg0MkYyQTM0",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Dimitri Vegas & Like Mike vs Hardwell - Unity (Official Music Video)",
        "description": "Win a trip to Tomorrowland; https://win.dimitrivegasandlikemike.com ❤  \n\nStream or get a free copy of Unity: https://summerofmadness.com\n\nAs we head full swing into the engrossing festival season, label heads Dimitri Vegas & Like Mike kicked off their recent Tomorrowland EP, 8 tracks spread over the festival’s two weekends, with Hardwell collaboration ‘Unity’. The Belgian brothers and Hardwell both premiered the track at the festival to an unbelievable response, and now fans can watch that moment back with the official video, which spans the festival grounds and soaks up the highlights of both artists sets, individually and collectively, as Dimitri Vegas & Like Mike bring out Hardwell to reveal the track first to the Tomorrowland revellers. \n\nFollow Dimitri Vegas & Like Mike on Spotify:\nhttp://dimitrivegasandlikemike.com/spotify\n\nRelive the MADNESS with these exclusive Spotify playlists:\nThe Official Tomorrowland Playlist:\nhttp://tomorrowland.com/spotify\nThe Smash The House Radio Playlist:\nhttp://smashthehouse.com/spotify\n\nSubscribe yourself for more Tomorrowland Music on: \nhttps://www.youtube.com/user/SmashTheHouse\n\nFollow us on social media:\nhttp://www.facebook.com/dimitrivegasandlikemike\nhttp://www.twitter.com/dimitrivegas\nhttp://www.twitter.com/likemike\nhttp://www.instagram.com/dimitrivegasandlikemike\nhttp://www.soundcloud.com/dimitrivegasandlikemike\n\nFollow Hardwell:\nhttps://www.facebook.com/djhardwell/\nhttps://twitter.com/HARDWELL\nhttps://www.instagram.com/hardwell/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rLlZE_G_fXo"
        }
      },
      "contentDetails": {
        "videoId": "rLlZE_G_fXo",
        "videoPublishedAt": "2018-08-07T14:12:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HupUIeakLLXCSjV7WBUWMAWZDqE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NzUwQkI1M0UxNThBMkU0",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Moska & Brooke Evers - Dance (Official Music Video)",
        "description": "Moska and Brooke Evers join each other on this energetic piece of dance music, aptly titled ‘Dance’. \n\nMoska & Brooke Evers - Dance is OUT NOW on Musical Freedom! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://www.musicalfreedom.com/dance\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVideo by Cody Desmond | Urban Platform\n\nConnect with Moska:\nhttps://www.instagram.com/moskahouse\nhttps://www.facebook.com/moskahouse/\nhttps://www.twitter.com/MoskaHouse\nhttps://soundcloud.com/moskahouse\n\nConnect with Brooke Evers:\nhttps://www.instagram.com/brookeevers\nhttps://www.facebook.com/brookeevers/\nhttps://twitter.com/Brookeevers\nhttps://www.soundcloud.com/djbrookeevers\n\nConnect with Musical Freedom:\nhttps://www.twitter.com/musicalfreedom\nhttps://www.facebook.com/musicalfreedom/\nhttps://www.instagram.com/musicalfreedom/\nhttps://www.youtube.com/user/musicalfreedomrecs\n@musical-freedom\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Moska\n#BrookeEvers\n#Spinnin\n#SpinninRecords\n#MusicalFreedom",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "21mSKE_3uhU"
        }
      },
      "contentDetails": {
        "videoId": "21mSKE_3uhU",
        "videoPublishedAt": "2018-11-03T10:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9jW4EYqrtyZB0QX472qc83vmu40",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DNzE1RjZEMUZCMjA0RDBB",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Ummet Ozcan x Arem Ozguc x Arman Aydin – IZMIR (Official Music Video)",
        "description": "Ummet Ozcan x Arem Ozguc x Arman Aydin – IZMIR is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://release.spinninrecords.com/izmir!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Ummet Ozcan:\nhttp://www.ummetozcan.com\nhttps://www.facebook.com/Ummetozcanofficial\nhttp://twitter.com/UmmetOzcan\nhttp://www.instagram.com/ummetozcan\n\nFollow Arem Ozguc:\nhttps://instagram.com/aremozguc\n\nFollow Arman Aydin:\nhttps://instagram.com/armanaydin\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#UmmetOzcan\n#ArmanAydin\n#AremOzguc\n#izmirmarsi\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RQZQmW-_w5U"
        }
      },
      "contentDetails": {
        "videoId": "RQZQmW-_w5U",
        "videoPublishedAt": "2019-08-30T08:59:48Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "n-dOIGWFqSA9FJYaGE18FAJ81qI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi43MTI1NDIwOTMwQjIxMzNG",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Timmy Trumpet & JETFIRE - Flamenco (feat. Rage) [Official Audio]",
        "description": "Exotic new sounds on KSHMR's Dharma imprint, as Timmy Trumpet and JETFIRE deliver their 'Flamenco', featuring Rage.\n\nTimmy Trumpet & JETFIRE - Flamenco (feat. Rage) is OUT NOW on Dharma! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://dharmamusic.release.link/flamenco-feat-rage!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Timmy Trumpet: \nhttp://www.timmytrumpet.com\nhttps://www.facebook.com/timmytrumpet\nhttps://twitter.com/timmytrumpet\n\nFollow JETFIRE:\nhttp://www.jetfiremusic.com\nhttp://www.facebook.com/jetfiremusic\nhttp://www.twitter.com/jetfiremusic\nhttp://www.instagram.com/jetfiremusic \nhttp://www.soundcloud.com/jetfiremusic \nhttp://www.youtube.com/jetfiremusic \n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#TimmyTrumpet\n#JETFIRE\n#Spinnin\n#SpinninRecords\n#Dharma",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JMIAQiYGbfI"
        }
      },
      "contentDetails": {
        "videoId": "JMIAQiYGbfI",
        "videoPublishedAt": "2018-04-28T09:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mWeiLmqeFzJfF1PxKxfxPfXd_vA",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DQ0MyQ0Y4Mzg0M0VGOEYw",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Hardwell & Blasterjaxx feat. Mitch Crown - Bigroom Never Dies (Official Music Video)",
        "description": "Hardwell & Blasterjaxx feat. Mitch Crown - Bigroom Never Dies (Official Music Video) \nListen here ➡️ http://revr.ec/BND-YT\n\nRevealed label boss Hardwell leads by example with the long awaited release of his collaboration with fellow dance music titans BlasterJaxx for ‘Bigroom Never Dies’, featuring the vocal talents of Mitch Crown, who has worked with the biggest names in electronic music, including Tiësto as well as their previous hook-up on Hardwell’s hugely successful ‘Call Me A Spaceman’. The triumvirate of talents combine to create the anthem you’d expect, a track premiered by Hardwell at Ultra Music Festival 2018 which has been a standout staple in all his sets since. \n\n‘Bigroom Never Dies’  kicks things off with a chunky stab that gets the ball rolling, quickly joined by a reverse vocal breath that demonstrates the production skills of both Hardwell and Blasterjaxx. Mitch joins the action during the first breakdown, urging fans to put their hands up and building the hype before the first drop, where a gritty bass enters proceedings and turns up the tempo, culminating in a track that is set to be one of the top bigroom anthems this year. \n\nHardwell continues to show why he is consistently in the highest tier of dance music superstars, and after the success of previous collaborations with Blasterjaxx such as ‘Going Crazy’ and Hardwell’s edit of ‘Fifteen’ on Revealed, this combination results in a bigroom track that is set to stick around for a while, proof if ever needed that ‘Bigroom Never Dies’. Grab your copy when it is released 13th July via Revealed Recordings!\n\nFor more information check socials:\nhttp://www.djhardwell.com\nhttp://www.instagram.com/hardwell\nhttp://www.facebook.com/djhardwell\nhttp://www.twitter.com/hardwell\nhttp://www.soundcloud.com/hardwell\n\nhttp://www.revealedrecordings.com\nhttp://www.facebook.com/revealedrecor...\nhttp://www.twitter.com/revealedrec\nhttp://instagram.com/revealedrec\nhttp://soundcloud.com/revealed-record...\nhttp://open.spotify.com/user/revealedrec\nhttp://www.youtube.com/revealedrec\n\nVideo directed by Tom van den Berg\nhttp://instagram.com/tmvdbrg\n\nLyrics by KBK Visuals: \nhttp://www.kbkvisuals.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BqzBT2jqQYg"
        }
      },
      "contentDetails": {
        "videoId": "BqzBT2jqQYg",
        "videoPublishedAt": "2018-07-13T16:19:12Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 80,
    "resultsPerPage": 50
  }
}

  recorded_at: Thu, 09 Jul 2020 06:34:41 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&part=contentDetails,snippet&playlistId=PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 09 Jul 2020 06:34:42 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "kind": "youtube#playlistItemListResponse",
  "etag": "pM9QaGA3_YWWYqHsgrEvfh4_Ngg",
  "nextPageToken": "CDIQAA",
  "items": [
    {
      "kind": "youtube#playlistItem",
      "etag": "XzEWm8bdNEN0pT8QW75K2ww3NLU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NDlDQUFFOThDMTAxQjUw",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:43Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Felix Jaehn, VIZE - Close Your Eyes (Official Audio) ft. Miss Li",
        "description": "Felix Jaehn & VIZE feat. Miss Li 'Close Your Eyes' out now!\n\nDownload & stream here: https://umg.lnk.to/closeyoureyes\n\nFollow Felix Jaehn:\n→ Instagram: https://instagram.com/felixjaehn \n→ Facebook: https://facebook.com/FelixJaehnMusic \n→ Twitter: https://twitter.com/felixjaehn \n\nFollow VIZE:\n→ Instagram: https://www.instagram.com/vizemusicofficial\n→ Facebook: https://www.facebook.com/VizeMusicOfficial\n\nFollow Miss Li:\n→ Instagram: https://www.instagram.com/missliofficial\n→ Facebook: https://www.facebook.com/missliofficial\n→ Twitter: https://twitter.com/MissLiOfficial\n\n\nMusic video by Felix Jaehn, VIZE and Miss Li performing Close Your Eyes. © 2019 Collaection GmbH, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/enSINY",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HAUgCZFyxRw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 0,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HAUgCZFyxRw"
        }
      },
      "contentDetails": {
        "videoId": "HAUgCZFyxRw",
        "videoPublishedAt": "2019-11-22T14:00:02Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "rNC-KrY7nN9wYWWKWfTB0Qc_W9Q",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5ERkUyQTM0MzEwQjZCMTY5",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:34Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Riton x Oliver Heldens - Turn Me On ft. Vula (Official Music Video)",
        "description": "Turn Me On by Riton & Oliver Heldens is available now!\n👉 https://lnk.to/TurnMeOnyd\n \nFollow Me\nInstagram: https://instagram.com/oliverheldens\nTwitter: https://twitter.com/oliverheldens\nFacebook: https://facebook.com/oliverheldens\nSoundcloud: https://soundcloud.com/oliverheldens\nSnap: https://snapchat.com/add/oliverheldens\n \nHeldeep Records:\nFacebook: https://facebook.com/heldeeprecords\nInstagram: https://instagram.com/heldeeprecords\nTwitter: https://twitter.com/heldeeprecords\nSoundcloud: https://soundcloud.com/heldeeprecords\n \nRiton:\nInstagram: https://www.instagram.com/RITONTIME\nTwitter: https://twitter.com/Ritontime\nFacebook: https://www.facebook.com/ritontime\nSoundcloud: https://soundcloud.com/ritontime\n \nVula:\nInstagram: https://www.instagram.com/vulavox\nTwitter: https://twitter.com/Vulavox\nFacebook: https://www.facebook.com/Vula-29825878788\n \nMusic video by Riton & Oliver Heldens performing Turn Me On (Official Audio). \n© 2019 Ministry of Sound Records.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Ifq4NQWwVpg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 1,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Ifq4NQWwVpg"
        }
      },
      "contentDetails": {
        "videoId": "Ifq4NQWwVpg",
        "videoPublishedAt": "2019-10-09T11:30:12Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "A8R_gTE1ceL7fIAoj8UWnVgr_v4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi43QzNCNkZENzIyMDY2MjZB",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:08Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tiësto - BLUE (Official Video)",
        "description": "Tiësto - BLUE (Official Video) \n \nStream/Download BLUE now: http://tsto.co/blue\n\nDirector: Ben Fee\nDancer/Choreographer: Nico Lonetree\nProducer: Barret Hacia\nProduction Company: Little Ugly \nExecutive Producer: Melora Donoghue\nDirector's Rep: Doug Klinger\nDirector of Photography: Jess Dunlap\nProduction Designers: Courtney and Hillary Andujar\nWardrobe/Costume Designer: Nancy Stella Soto\nProduction Manager: Sean Blau\nPost Supervisor: Naheem Adio\nAC: Ksusha Genenfeld\nGrip/Gaffer/Swing: Alex Yoo, Luis Cardenas\nColorist: Arianna Shining Star Pane @ Apache\nConstruction Coordinator: Westley Thornton\nCarpenter: Kyle Frawley\nArt/Production Assistants: Sunny Mills, Zepha Jackson\nBTS: Matt Boman @ Dadass Films\nMusic Video Rep: Reprobates (@obreprobates)\n \nFollow Tiësto\nhttp://www.Tiesto.com/\nFacebook: http://tsto.co/Facebook \nInstagram: http://tsto.co/Instagram \nTwitter: http://tsto.co/Twitter \nYouTube: http://tsto.co/YTSubscribe \nSoundcloud: http://tsto.co/Soundcloud\nWeibo: http://tsto.co/Weibo \n \nFollow Stevie Appleton \nhttps://www.stevieappleton.com/\nFacebook: https://www.facebook.com/stevieappleton/\nInstagram: https://www.instagram.com/stevieappleton\nTwitter: https://twitter.com/stevieappleton\nYouTube: https://www.youtube.com/user/steveappletonmusic\nSoundCloud: https://soundcloud.com/stevieappleton\n\nLyrics:\nFeeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \n\nJust feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \n\nI dream that you won’t forget me \nThat’s all I really ask of you \nI’d love to talk if you’d let me \nI’d take you back to the start with me \n\nI keep on dreamin’, I don’t know why\nI can’t seem to let it go \nBut I keep on trippin’ on what we had\nIt’s hard not to let you know \n\nI’m feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \nFeeling blue without you \n\nI don’t know what I should do\nFeeling so blue without you \n\nWe built our love on foundations\nWe built a house in the hill, yeah \nOur little rock of salvation \nOh my love’s there still \n\nCause I keep on dreamin’, I don’t know why\nI can’t seem to let it go \nBut I keep on trippin’ on what we had\nIt’s hard not to let you know \n\nI’m feeling blue without you \nGive me one more chance \nGive me one more dance \nI’m feeling blue without you \nTell me who am I \nTo hold you down? \nJust feeling blue, yeah \nOh give me one more chance \nGive me one more dance \nI’m blue without you \nTell me who am I\nTo hold you down?\nJust feeling blue without you",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/FIw508aafBA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 2,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "FIw508aafBA"
        }
      },
      "contentDetails": {
        "videoId": "FIw508aafBA",
        "videoPublishedAt": "2020-02-11T17:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ucl7EEq7XYamzlJehoIhumqwY9Y",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wMDFGNzBEOTU4Q0Y1Q0RG",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:33Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Topic, A7S - Breaking Me ft. A7S",
        "description": "Listen to “Breaking Me” from Topic feat. A7S\n\nDownload & stream here: https://umg.lnk.to/breakingme\n\nFollow TOPIC:\nFacebook: https://www.facebook.com/topicproductions\nInstagram: https://www.instagram.com/topic\nTwitter: https://twitter.com/topicmusictv\n\nFollow A7S:\nSpotify: https://spoti.fi/2Py5LWV\nDirected, shot, edited by Daniel Priess\ndanielpriess.com\n\nvfx by Sebastian Bosse\nsebastianbosse.com\n\nStill photography by Jakob Bindert\n\nThanks to Dilara for your great dancing performance in the video, go check her out: \n\nInstagram: dilara.ls  https://www.instagram.com/dilara.ls \nYouTube: DilaraLs  https://www.youtube.com/channel/UC3vzIoZoS8wvVSUvP3W0wcw \nTikTok: @dilara.ls https://www.tiktok.com/@dilara.ls \n\nMusic video by Topic performing Breaking Me (Lyric Video). © 2019 Topic, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/H4p1Ad",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/jIoEaTN7GGo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 3,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "jIoEaTN7GGo"
        }
      },
      "contentDetails": {
        "videoId": "jIoEaTN7GGo",
        "videoPublishedAt": "2019-12-19T16:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "SrOMyJTDafWHt8bFcsDphXkYptk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi40MDNEMzA0QTBFRThFMzBE",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:51Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Robin Schulz feat. Alida – In Your Eyes (Official Music Video)",
        "description": "Check out the brandnew single „Alane“ with Wes - Video out now ► https://RobinSchulz.lnk.to/AlaneAY\nChapter 3: The official music video for Robin Schulz' new single \"In Your Eyes\" featuring Alida!\n► Get the single here: http://wmg.click/RobinSchulz_InYourEyesAY\n\nGo to Chapter 1: https://youtu.be/t-ojidEzKuk\nChapter 2: https://youtu.be/uxLs8l5JCNM\n\nVisit Robin Schulz here:\n►http://www.robin-schulz.com\n►https://www.facebook.com/robin.schulz.official\n►https://twitter.com/robin_schulz\n►http://instagram.com/robin__schulz\n►Snapchat: robinschulzreal\n\n►LYRICS: \n\nV1:\nHearing whispers in the night\nVoices filling up your mind\nYour like a ghost of you \n\nYou’ve been drowning in the rain \nSlowly saving up the pain\nSo deep inside of you \n\nPRE:\nSee the colors of the skies\nslowly turn from black and white \nA rising hope, bright as gold \nNow there’s nothing left to lose\nSo we’re breakin all the rules\nAnd they don’t know what we know\n\nCHORUS:\nCause I can hear\nThe thunder from afar\nA lightning in the dark\nI can feel a fire come alive \nSo calm before the storm\nSo dark before the dawn\nOh, I can see the fire in your eyes\n\nV2:\nNow you’ll never be the same\nOnce you’ve felt that burning flame\nYou’re chasing stars alive \n\nWhat was broken’s left behind\nwatch it crumble in the light\nNothing can stop you now,\n\n\nThe dark winter can affect our soul. With his new song “In Your Eyes”, Robin Schulz points us from the darkness back into the light. Our guide:  Norwegian singer-songwriter Alida, whose powerful and uplifting vocals feature in the latest track of the German super-producer.\n“You’re like a ghost of you / You’ve been drowning in the rain / Slowly saving up the pain inside of you“, Alida worriedly observes in a loved person by her side. Time to change tack: “Now there’s nothing left to lose / So we’re breaking all the rules“, she decides, “‘cause I can hear the thunder from afar / A lightning in the dark / I can feel the fire come alive ... Oh I can see the fire in your eyes“. And just like the forces of nature in the lyrics, the atmospheric production now explodes into jubilant strings, soaring melodies and towering basslines. \n\n“This is exactly how I want to start a new year“, says Robin Schulz. “I love the vibe of the track and I'm very happy to have Alida on Board. This collaboration is the beginning of an exciting year, I simply cannot wait to get started.“ Alida, who moved from Norway to L.A. in the summer of 2019 and co-wrote “In Your Eyes” during the process before it made its way to the hands of Robin Schulz later, comments: “It was one of those songs that naturally wrote itself. This is a song I was feeling all year but didn’t know how to articulate until now. Robin Schulz heard the song and brought it to life… I’m very excited for everyone to listen and hopefully it touches people like it touched me.”  \n“In Your Eyes” is accompanied by a music video that builds on the previous visuals for “All This Love“ and “Rather Be Alone“. Once again, Toni Garrn plays the leading role. The most recent video for “Rather Be Alone” ended with Toni Garrn and Robin Schulz’ avatars successfully concluding an intergalactic dance battle. Now, they’re getting beamed into the next level: in the new video, they appear in a dark hall, two futuristic motorbikes right next to them. Level 2 commences…\n\n#robinschulz #inyoureyes #musicvideo #alida #tonigarrn",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mDLiAs5k1oI/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 4,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mDLiAs5k1oI"
        }
      },
      "contentDetails": {
        "videoId": "mDLiAs5k1oI",
        "videoPublishedAt": "2020-01-10T16:13:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zQzX2pya6mmBou6qSl0uYkCY8Vk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44MkM2RjVEQkQ5N0I2MjVE",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:50Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Slider & Magnit - Morze [Official Video]| #GANGSTERMUSIC",
        "description": "Slider & Magnit - Morze\nSubscribe Gangster Music: http://bit.ly/GangsterMusic \nBuy | Stream https://nda.promo/B8DCED/\n\nArtist \"Slider & Magnit\"\nGenre \" BASS HOUSE\"\nTrack \"Morze\"\n\nFollow Slider & Magnit:\nVK: https://vk.com/slamdjs\nFacebook: https://www.facebook.com/slamdjs\nInstagram: https://www.instagram.com/sliderandmagnit\nYouTube: http://www.youtube.com/slamdjsmusic\nSoundcloud: https://soundcloud.com/slamworxrecords\n\nFollow Gangster Music:\nVK: https://vk.com/gangsterxmusic\nFacebook: https://bit.ly/2RWEZ8v\nInstagram: https://www.instagram.com/gangsterxmusic/\n\nSEND YOUR MUSIC TO US - gangsterxmusic@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/kyopTrbleTU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 5,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "kyopTrbleTU"
        }
      },
      "contentDetails": {
        "videoId": "kyopTrbleTU",
        "videoPublishedAt": "2019-08-26T08:00:06Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "nKmBQHAmk127HhyKi_o6rg7MTuw",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44QTY2MEEzNzBFQUJCMUQ2",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:09Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tungevaag - Knockout (Official Music Video)",
        "description": "Tungevaag - Knockout is OUT NOW! Like this track? Add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://spinninrecords.release.link/knockout-1!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Tungevaag:\nhttps://www.instagram.com/tungevaag/\nhttps://www.youtube.com/channel/UCdgCw1DIZnWZfWv3rDxIYtw\n\nLead actor: Luka Tartaglia\nDirector: Martin Tungevaag & Henry Lipatov\nDirector of Photography: Hugo Will\nChoreography: Johny D\nVFX Supervisor: Henry Lipatov\nMain vfx artist: Ivan Druzhinin\nStarring: Brandon Burciaga, Eirik Uhlen, Sebastian Chwoyka, Espen Nore, Cliff Tan, Irina Dedyuk, Alik Tsiupa, John Leggins, Aj Tai, Henry Lipatov, Ivan Druzhinin\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Tungevaag\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/GvK3nq7r69s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 6,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "GvK3nq7r69s"
        }
      },
      "contentDetails": {
        "videoId": "GvK3nq7r69s",
        "videoPublishedAt": "2019-12-06T16:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bOY8oKRYTh_3AreVVFR8tBrn_DE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi44QTA1QTQyRTc3M0VGQzYx",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:39Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Rat City, Kiesza - Naked (With My Headphones On)",
        "description": "Rat City & Kiesza - Naked (With My Headphones On) OUT NOW!\n\nListen here: https://ratcity.ffm.to/ratcity_kiesza.qtv\n\nDirector: Anders Paus Hedberg\nExecutive Producer: Shaw Lash\nStudio: Migma Studios\n*** from characters created by Micah Monkey\n\nFollow Kiesza\nhttp://instagram.com/kiesza\nhttps://www.facebook.com/Kiesza\nhttps://twitter.com/kiesza\nhttp://kiesza.com\n\nFollow Rat City:\nhttps://www.instagram.com/ratcityofficial/\nhttps://spoti.fi/2Sqn4fy\nhttps://www.facebook.com/ratcityofficial\n\nhttp://vevo.ly/YSWrAQ",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JX_XWyY5y2I/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 7,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JX_XWyY5y2I"
        }
      },
      "contentDetails": {
        "videoId": "JX_XWyY5y2I",
        "videoPublishedAt": "2019-10-25T04:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "b8iuRIeY2Q1XtjKbRZOuvHTTxmc",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CMEVBRUJERkUyNTBENTkz",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:00Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Don Diablo - Congratulations ft. Brando | Official Music Video",
        "description": "Download & stream song: https://fanlink.to/HEXAGON123\n\nI wrote “Congratulations” in a moment of reflection, while I was recording parts of my upcoming FOREVER album in Los Angeles. Most of my life, I have been working every single day towards an invisible goal that sometimes seems unreachable. There are days when nothing you do seems good enough and the weight on your shoulders gets heavier and heavier. Sometimes you need to look at your life from a helicopter view so you can see all the amazing things that have happened in your past. It will make you enjoy your future even more. This song is about congratulating yourself. Which in essence you should be doing as often as you can in this life. I am super excited I got to work on the song with the supremely talented Brando, whose vocals are the perfect fit for the story I wanted to tell. - Don\n\nDirected by Patrick Van Der Wal\nExecutive Producer: Don Diablo \nSFX: Erik Middendorp \nSteadycam: Jasper Van Gheluwe \nProduction: Sabine Van Der Zon\nGaffer: Michiel Kingma \nGaffer: Blaine Bradley \nColor Correction: Qianwei Tong  \nFocus puller: Isaiah Cedrick\nSecond assistant: Jurgen Corte \nBest Boy: Arthur Gavan \nBest Boy: Aaron Homma \nElectric: Abel Berghuizen\nModel: Nochtli Peralta Alvarez\nSpecial thanks to Thomas Pieket Weeserik, Jessey Bijl and everyone else involved in the making of this video.  \n\n#DonDiablo #Brando #Congratulations \n\n⬡⬢ Don Diablo ⬢⬡\r\nSpotify ⬡ http://Spoti.fi/DonDiablo\r\nMerch ⬡ http://shop.dondiablo.com\r\nInstagram ⬡ http://instagram.com/dondiablo\r\nFacebook ⬡ http://facebook.com/OfficialDonDiablo\r\nTwitter ⬡ http://twitter.com/dondiablo\r\nYouTube ⬡ http://YouTube.com/DonDiablo?sub_confirmation=1\r\nSoundCloud ⬡ http://soundcloud.com/dondiablo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_JlvT19nUQk/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 8,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_JlvT19nUQk"
        }
      },
      "contentDetails": {
        "videoId": "_JlvT19nUQk",
        "videoPublishedAt": "2019-12-14T17:16:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "u1CAnj7Odv2c0v7Jh1m1bX7OufY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5FQUY2Qzk4RUFDN0ZFRkZF",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:53Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "SHANGUY - Désolée (Paris/Paname) (Official Video)",
        "description": "SHANGUY - Désolée (Paris/Paname) (Official Video) Out Now.\nAdd to your collection: \nSpotify: ttps://open.spotify.com/album/6DM0lENVuTd1TUVrbFJpmA?si=X9l-zwMvSMOPB5pt8xYA-w\nApple Music: https://music.apple.com/it/album/d%C3%A9sol%C3%A9e-paris-paname-single/1503831842\nAll Stores: https://www.egomusic.net/music/releases/dsole--paris-paname-\n\nListen to more songs like this with our playlist!\nApple Music: https://itunes.apple.com/it/curator/ego/1405705875\nSpotify: http://spoti.fi/2qnkdCG\n\nFollow Ego on Facebook: http://www.fb.com/EgoItaly\nSubscribe to EgoTV NOW: http://bit.ly/1hzlXkS\n#ego \n#shanguy\n#desolee\n\nBig return for the Italian collective Shanguy with their super new single “Désolée (Paris/Paname)”.\nWith over 45 Million total views on YouTube and almost 35 Million total streaming with “La Louze”, “King Of The Jungle” and “Toukassé”, one Platinum and one Gold Award in Poland and continuously on tour through east Europe, they’re back with this huge bomb!\n\nA brilliant mix of French, English, Italian and Spanish framed by gloomy and deep sounds with a fresh rhythm that won’t make you stand still.\n\nBut why ‘Paris/Paname’?\nPaname is a nickname for Paris since the Parisians in the 20th century used to wear the famous Panama hat put in vogue by the workers who, at that time, dug the canal that bears the same name.\nIn this single, however, Shanguy wanted to give a different meaning, indicating ‘Paris’ as the elegant city lived by day among monuments and history and ‘Paname’ as the mysterious and nightly city of the most libertine neighborhoods, a sort of contrast between good and evil.\n\nVideo Director: Roberto Cicogna\nDirector of photography: Simone Yang \nStyling: Federico Rinoldi\nMake up: Anh Duong\nEditing: Roberto Cicogna\nFirst Assistant:Thibault Juillard\nA very special Thanxs to Vittoria Tagini, Gaetana Angiolin di PVH, Tommy Hilfiger, Paola Ruffo di GM/PR, Jarvis Macchi, Iceberg, Maria Campadello, Filippo Bologni di Wearebusy, Scarlett Ros, Giorgia Andreazza.\n\nFOLLOW SHANGUY\nhttps://www.instagram.com/shanguymusic/\nhttps://www.facebook.com/shanguymusic/ \nhttps://twitter.com/shanguymusic\nhttps://vm.tiktok.com/xFjnwn/\nhttps://vk.com/public181180916",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/AQK4EHFPsAM/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 9,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "AQK4EHFPsAM"
        }
      },
      "contentDetails": {
        "videoId": "AQK4EHFPsAM",
        "videoPublishedAt": "2019-12-11T13:00:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3O51S-1Z_UPEk5rlIVkKbVDyTQo",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xNTZBNUQxMDZBQzFGMjkw",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:25Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Marnik & KSHMR - Alone (feat. Anjulie & Jeffrey Jey) [Official Lyric Video]",
        "description": "Best of KSHMR - KSHMR MIX 2020: https://youtu.be/SKXPmV3L3Jo\nMarnik & KSHMR - Alone (feat. Anjulie & Jeffrey Jey) is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/alone-feat-anjulie-jeffrey-jey!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Marnik:\nhttps://www.facebook.com/Marnikofficial/\nhttps://www.instagram.com/marnikofficial\nhttps://twitter.com/marnikofficial\nhttps://soundcloud.com/marnikofficial\n\nFollow KSHMR:\nhttps://www.instagram.com/kshmr/\nhttps://www.facebook.com/KSHMRmusic/\nhttps://twitter.com/KSHMRmusic\nhttps://soundcloud.com/kshmr\n\nFollow Anjulie: \nhttp://www.twitter.com/anjulie\nhttp://www.facebook.com/anjuliemusic\nhttp://www.instagram.com/anjuliemusic\n\nFollow Jeffrey Jey:\nhttps://www.instagram.com/jeffreyjey\nhttps://www.facebook.com/JeffreyJey/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Marnik\n#KSHMR\n#Anjulie\n#JeffreyJey\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/wvu4kbARybg/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 10,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "wvu4kbARybg"
        }
      },
      "contentDetails": {
        "videoId": "wvu4kbARybg",
        "videoPublishedAt": "2019-11-15T20:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HS-FvMXiCI5IfUpQ1B3fKmPpfBY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4zQTkzRjgxRTY0OEU0MkM3",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "LIZOT ft. Holy Molly - Menage A Trois (Official Video)",
        "description": "Stream & Download \"Menage A Trois\": https://lnk.to/_menageatrois\n\nLIZOT:\nInstagram: https://www.instagram.com/lizot_official/\nFacebook: https://www.facebook.com/djlizotofficial/\n\nHoly Molly: \nInstagram: https://www.instagram.com/holy.molly.guacamolly\n\nVideo by: Sebastian Otto \nWebsite: https://sbstn.tv/\nInstagram: https://www.instagram.com/sbstntv\n\nModell: \nhttps://www.instagram.com/labellebook/\n\n\n______________\nDirected by\nSebastian Otto\n\nDirector of Photography\nSebastian Otto\n\nGaffer\nPhilip Pfechner\nLukas Reubelt\n\n2D Visual Effects \nSebastian Otto\nLukas Reubelt\n\nColor Grading\nRobert Winter\n\nSet Assistent\nRobert Winter\n\nHair & Make-Up\nSophia Elonore Freitag \n\nConcept\nLukas Reubelt\nSebastian Otto\n\n\n Music video by LIZOT, Holy Molly performing Menage A Trois (Official Uncensored Video). (C) 2019 Nitron Music a division of Sony Music Entertainment Germany GmbH\n\nhttp://vevo.ly/32S4ux",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/aBcqQsL9dsU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 11,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "aBcqQsL9dsU"
        }
      },
      "contentDetails": {
        "videoId": "aBcqQsL9dsU",
        "videoPublishedAt": "2019-12-17T19:11:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ADd_IOeSJOnjGPUcyCYLWQwTxlQ",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xNjIyNEE0MDEyRDlCMjBE",
      "snippet": {
        "publishedAt": "2020-03-11T17:59:04Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Lucas & Steve - Perfect (feat. Haris) [LUM!X Remix] (Official Lyric Video)",
        "description": "Spinnin’ Massive Monday is here to make your day a whole lot better with a brand new energetic Dance track! Start your week off with a bang every Monday at 5 PM CET!\n\nLucas & Steve - Perfect (feat. Haris) [LUM!X Remix] is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninremixes.release.link/perfect-feat-haris-lum-x-remix!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVideo Produced By https://www.351studio.com\n\nFollow Lucas & Steve:\nhttp://facebook.com/LucasAndSteve\nhttp://twitter.com/lucasandsteve\nhttps://www.instagram.com/lucasandsteve\nhttp://soundcloud.com/lucasandsteve\nhttps://www.youtube.com/Lucasandsteve\n\nFollow LUM!X:\nhttps://soundcloud.com/lumix_music\nhttps://www.instagram.com/lumix_music/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#LucasSteve\n#LUMIX\n#MassiveMonday\n#SpinninMassiveMonday\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/6J9GGFi1irs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 12,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6J9GGFi1irs"
        }
      },
      "contentDetails": {
        "videoId": "6J9GGFi1irs",
        "videoPublishedAt": "2019-12-02T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "XWsMX3gjwBTijIUwrKpJTD7LJRg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xN0Y2QjVBOEI2MzQ5OUM5",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:46Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Gianluca Dimeo - Syncopate (Lyric Video)",
        "description": "Gianluca Dimeo - Syncopate (Lyric Video)\n🎧 Stream or Download : https://open.spotify.com/album/5W23E7zT9yYXCfa5mrlNA8?highlight=spotify:track:6ccEYU3hlvgz6YhFMoHDOj\n\n• LIT NETWORK  •\n\nSubscribe! : https://goo.gl/D6Pnv6\n🔔 Turn on the bell for new music :) \nFollow us on Instagram : https://www.instagram.com/lit.network/\n\n• Gianluca Dimeo • \nYouTube: https://www.youtube.com/gianlucadimeo\nInstagram: https://www.instagram.com/dimeomusic\n\ntags:\n#Syncopate #GianlucaDimeo #LyricVideo #LitNetwork #Electronic\n\n✉  Submit your music : itslitnetwork@gmail.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/UA8x_i0M3TU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 13,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "UA8x_i0M3TU"
        }
      },
      "contentDetails": {
        "videoId": "UA8x_i0M3TU",
        "videoPublishedAt": "2020-02-26T12:22:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bw0eiSs9Eq8Qegv9mc9vtG8sZMk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yQzk4QTA5QjkzMTFFOEI1",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:19Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "YouNotUs, Janieck, Senex - Narcotic (OFFICIAL MUSIC VIDEO)",
        "description": "Check out the Official Music Video for the new single Narcotic by YouNotUs, Janieck and Senex!\nStream or buy on Spotify, iTunes, Apple Music, Deezer, and Amazon ► https://smg.lnk.to/narcotic\n\nListen & subscribe to the YouNotUs Playlist on Spotify ► https://open.spotify.com/user/younotus/playlist/5IKGAi7pJaFnSHpcDakT54?si=V5jNu2v5SXCKGNJ5JV-l0w\n\nYouNotUs ON SOCIAL MEDIA!\n► Website: https://www.itsyounotus.com/\n► Instagram: https://www.instagram.com/younotus/\n► Facebook: https://www.facebook.com/younotus/\n► Spotify: https://open.spotify.com/artist/67ghKnycRX6VM1xfqJSMlH?si=5tReQ2hkQsaHYBJ7DywoIA\n► Apple Music: https://itunes.apple.com/de/artist/younotus/916079851\n\nYouNotUs LIVE Check out the dates here ► https://www.itsyounotus.com/shows\n\nJANIECK ON SOCIAL MEDIA!\n► Website: https://janieck.com/\n► Instagram: https://www.instagram.com/janieckofficial/\n► Facebook: https://www.facebook.com/janieckofficial\n► Spotify: https://open.spotify.com/artist/1bZDq4po4dMIpN74Zendm0?si=jP7CDamBSQiIdo1pLJuIcw\n► Apple Music: https://itunes.apple.com/us/artist/janieck/1100750686\n\nSENEX ON SOCIAL MEDIA!\n► Instagram: https://www.instagram.com/senex.official/\n► Facebook: https://www.facebook.com/Senex-398714727615212/\n► Spotify: https://open.spotify.com/artist/2n0Qz7ZvKS6kwjPuj9sW4H?si=wbNsk5-rRTO_Rke7t20lsg\n► Apple Music: https://itunes.apple.com/us/artist/senex/1076828808\n\nThe YouNotUs YouTube Channel is part of GUESSTIMATE. \nCheck out the website for more information: \n► http://www.guesstimate.de",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/yQoKd5fu3t4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 14,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "yQoKd5fu3t4"
        }
      },
      "contentDetails": {
        "videoId": "yQoKd5fu3t4",
        "videoPublishedAt": "2019-06-14T12:59:25Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "oW5ajZxw3HHFFrlZTsAMzAmVSnw",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EQkE3RTJCQTJEQkFBQTcz",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:14Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Sam Feldt - Post Malone (feat. RANI) [Official Music Video]",
        "description": "Sam Feldt - Post Malone (feat. RANI) is part of the Magnets EP, OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/magnets-ep!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVIDEO CREDITS:\nDirector: Deni Kukura\nProduction: Hello Daisy\nD.O.P.: Nick Stuy\nGaffer: Leon Valero\nStyling: Melanie Schraa\nMUA: Henrique Dos Santos (AbbyOMG)\nChoreography: Kim van der Voort\nDancers: Bo Dudok, Carmen van Weersel, Gina Agsteribbe\nDragqueens: Abby OMG, Ma’MaQueen & Inga Shubskaya\nPost-production: Hello Daisy\n\nSpecial thanks to: Stijnn van der Schoot\n\nFollow Sam Feldt:\nhttp://facebook.com/officialsamfeldt\nhttp://twitter.com/SamFeldtMusic\nhttps://www.instagram.com/samfeldtmusic/\nhttps://soundcloud.com/samfeldt\nhttp://www.samfeldt.com/\n\nFollow RANI:\nhttps://www.instagram.com/shannonrani_/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#SamFeldt\n#RANI\n#PostMalone\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/TewoJFN61mI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 15,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "TewoJFN61mI"
        }
      },
      "contentDetails": {
        "videoId": "TewoJFN61mI",
        "videoPublishedAt": "2019-06-26T18:58:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "kuvdNFRc-FNcbsRMyIug6icIZtk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42RTNCOEMxREI3Q0VDMjU2",
      "snippet": {
        "publishedAt": "2020-03-11T17:58:01Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "The Chainsmokers - Call You Mine (Official Video) ft. Bebe Rexha",
        "description": "The Chainsmokers “Call You Mine” ft. Bebe Rexha out now: http://smarturl.it/callyoumine\nAmazon Music: http://smarturl.it/callyoumine/az\nApple Music: http://smarturl.it/callyoumine/applemusic\niTunes: http://smarturl.it/callyoumine/itunes\nSoundcloud: http://smarturl.it/callyoumine/soundcloud\nSpotify: http://smarturl.it/callyoumine/spotify\nYouTube Music: http://smarturl.it/callyoumine/youtubemusic\n \nFollow The Chainsmokers:\nhttp://www.youtube.com/thechainsmokers  \nhttp://www.twitter.com/thechainsmokers   \nhttp://www.facebook.com/thechainsmokers  \nhttp://www.instagram.com/thechainsmokers  \nhttp://www.soundcloud.com/thechainsmokers\n \nFollow Bebe Rexha:\nhttps://www.youtube.com/user/BEBEREXHA\nhttps://twitter.com/BebeRexha\nhttps://www.facebook.com/beberexha/\nhttps://www.instagram.com/beberexha/\nhttps://soundcloud.com/beberexha\n \nDirected by Dano Cerny\n \nLyrics:\n \n2 kids with their hearts on fire\nWho’s gonna save us now?\nWhen we thought that we couldn’t get higher Things started looking down\n \nI look at you and you look at me\nLike nothing but strangers now\n2 kids with their hearts on fire\nDon’t let it burn us out\n \nThink about what you believe in now\nAm I someone you cannot live without out Cause I know I don’t wanna live without you\n \nYeah \n \nCome on let’s turn this all around\nBring it all back to that bar downtown\nWhen you wouldn’t let me walk out on you \n \nYeah\nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine Can I call you mine?\nAnd you said I never regretted the day that I called you mine\n \nBroke kids running through the city\nDrunk on the subway train\nSet free every time you kissed me\nWe couldn’t feel no pain\n \nYou looked at me and I looked at you\nLike we’d never look away\nBroke kids running through the city\nDon’t let the memory fade\n \nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine Can I call you mine?\nAnd you said I never regretted the day that I called you mine\n \nThink about what you believe in now\nAm I someone you cannot live without\nCause I know I don’t wanna live without you\n \nYeah\nCome on let’s turn this all around\nBring it all back to that bar downtown\nWhen you wouldn’t let me walk out on you \n \nYou said hey whatcha doing for the rest of your life And I said I don’t even know what I’m doing tonight\n \nWent from one conversation to your lips on mine And you said I never regretted the day that I called you mine So I call you mine And you said I never regretted the day that I called you mine Can I call you mine?\nCan I call you mine?\nCan I call you mine?\nCan I call you mine?\n \n#TheChainsmokers #CallYouMine #BebeRexha",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3XCVM3G3pns/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 16,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3XCVM3G3pns"
        }
      },
      "contentDetails": {
        "videoId": "3XCVM3G3pns",
        "videoPublishedAt": "2019-05-31T13:58:43Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "z9icz99HDnYayxZfvBAmhRe7Q2I",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42MjYzMTMyQjA0QURCN0JF",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:47Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "R3HAB & Clara Mae & Frank Walker - More Than OK (Official Music Video)",
        "description": "R3HAB & Clara Mae & Frank Walker - More Than OK (Official Music Video)\n\n▶ Listen now: http://cybr.at/morethanok \n▶ Listen to the CYB3RPVNK Radio playlist: https://cybr.at/radio \n▶ Subscribe to the CYB3RPVNK channel: https://cybr.at/youtube\n\nFollow R3HAB\n\n▶http://www.facebook.com/r3hab\n▶http://www.instagram.com/r3hab\n▶http://www.twitter.com/r3hab\n\nFollow Clara Mae\n\n▶https://www.facebook.com/iamclaramae/\n▶https://www.instagram.com/claramaemusic/\n▶https://twitter.com/claramaemusic\n\nFollow Frank Walker\n\n▶https://www.facebook.com/FrankWalkerMusic/\n▶https://www.instagram.com/frankwalker/\n▶https://twitter.com/DJFrankWalker\n\nFollow CYB3RPVNK\n\n▶ https://www.instagram.com/cyb3rpvnk/ \n▶ https://www.facebook.com/cyb3rpvnklabel/ \n▶ https://soundcloud.com/cyb3rpvnk\n▶ https://www.cyb3rpvnk.com\n\nWeekly Updated Music\n▶ http://www.nightplaylist.com \n\n#R3HAB #ClaraMae #FrankWalker #MoreThanOk #Music #Video\n\nCredit List\n\nDirector: Mario Gonsalves (@gonsalvesmario)\nProducers: Valentino Angela, Nadir Soltane\nProduction Company: Recent (@recent.co)\nDOP: Sean Vogel\n1st AC: Maric Dam\nUnderwater DOP: Bas Andries\nUnderwater Safety: Sjouke Brunia\nLighting Director: Rui Jiang Ong\nGaffer: Kenneth van Bochove\nBest Boy: Joel Woods\nMotion Graphics: Stevenson Lacroes\nArt Dept: Kevin Osepa, Tivjenne Kootes\nMUA & Hair: Vanessa Chan (House of Orange), Mila de Jong\nTechnocrane: Jochem Middelveld (Egripment)\nPA: Valerie Paulina, Julia de Roo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-zYz0OhqzXM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 17,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-zYz0OhqzXM"
        }
      },
      "contentDetails": {
        "videoId": "-zYz0OhqzXM",
        "videoPublishedAt": "2020-01-24T09:00:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "IzgbIPTT1zltfu1trOeNX73QB_g",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xM0YyM0RDNDE4REQ1NDA0",
      "snippet": {
        "publishedAt": "2020-03-11T17:57:44Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "R3HAB & ZAYN & Jungleboi - Flames (Official Music Video)",
        "description": "R3HAB & ZAYN & Jungleboi - Flames (Official Music Video) \n\n\n▶ Stream ‘Flames’ here: http://lightmeup.in/flames \n▶ Listen to the CYB3RPVNK Radio playlist: https://cybr.at/radio \n▶ Subscribe to the CYB3RPVNK channel: https://cybr.at/youtube \n\nFollow R3HAB \n▶https://www.facebook.com/r3hab \n▶https://www.instagram.com/r3hab \n▶https://www.twitter.com/r3hab \n\nFollow ZAYN \n▶https://www.facebook.com/zayn \n▶https://www.instagram.com/zayn \n▶https://twitter.com/zaynmalik\n\nFollow Jungleboi \n▶https://www.facebook.com/itsjungleboi \n▶https://www.instagram.com/itsjungleboi \n▶https://twitter.com/itsjungleboi  \n\nFollow CYB3RPVNK \n▶ https://www.instagram.com/cyb3rpvnk/ \n▶ https://www.facebook.com/cyb3rpvnklabel/ \n▶ https://soundcloud.com/cyb3rpvnk \n▶ https://www.cyb3rpvnk.com \n\nWeekly Updated Music \n▶ http://www.nightplaylist.com \n\n*Masks designed by Bob Basset (@bobbasset)\n\nDirector: Frank Borin & Ivanna Borin\nProducer: Daria Ivashchuk\nExecutive Producer: Frank Borin / Ivanna Borin / Vlad Bolyelov\nProduction Company: UnderWonder Content\nService Company Kiev: Limelite\nDOP: Nikita Kuzmenko\nChoreographer: Denis Stulnikov\nStylist: Lena Ignatenko\nEditor: Frank Borin & Ivanna Borin\nVFX Company: CGF Visual Effects Studio\nVFX Producer: Ekaterina Averina\nColorist: Joseph Bicknell @ Company3 NYC\nProduction Designer: Grisha Ermolin\n\n#ZAYN #R3HAB #FLAMES #Musicvideo #Jungleboi",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LWEG5xHgM7c/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 18,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LWEG5xHgM7c"
        }
      },
      "contentDetails": {
        "videoId": "LWEG5xHgM7c",
        "videoPublishedAt": "2020-01-30T12:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "zUUKsUMJxOxNiotDSq5HLpRHhRo",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CNTcxMDQ0NThBNzMxODYz",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:29Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Regard - Ride it (Official Audio)",
        "description": "Regard - Ride It is Out Now:  https://lnk.to/DJRegardRideItIG\nRegard Spotify Playlist: https://smarturl.it/RegardPlaylist  👈👈🏽👈🏿\n\n\nFollow Regard \nhttps://www.instagram.com/djregardofficial\nhttps://www.facebook.com/DjRegardOfficial\nhttps://twitter.com/DardanRegard\nhttps://www.tiktok.com/@djregard\nhttps://open.spotify.com/artist/4ofCBoyEiGSePFAG500xev?si=cl7-rPo_QZC8aTzwCikrVg\n\n\nMusic video by DJ Regard performing Ride It (Official Audio). \n(C) 2019 Ministry of Sound Recordings\n\n\nRegard Management\nwww.leafmanagement.net\nleaf.management1@gmail.com\n\n#regard #rideit",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/LoSm6VkplJc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 19,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "LoSm6VkplJc"
        }
      },
      "contentDetails": {
        "videoId": "LoSm6VkplJc",
        "videoPublishedAt": "2019-07-26T07:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "0AA93AKFfbsNyb3uwbwvynFERFU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5CNTZFOTNGQzZEODg1RUQx",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:22Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Black Eyed Peas, J Balvin - RITMO (Bad Boys For Life)",
        "description": "\"RITMO (Bad Boys For Life)\" single available at: https://smarturl.it/RITMO\n\nFollow Black Eyed Peas online\nFacebook: https://www.facebook.com/blackeyedpeas\nTwitter: https://twitter.com/bep \nInstagram: https://www.instagram.com/bep\nMore Videos: https://www.youtube.com/playlist?list=PLgZwaNdNnwLpNLAN8Kh2DoWsD1ViSlNDN\n\nFollow Bad Boys For Life online\nOfficial Site: https://www.badboysforlife.movie/?hs308=ritmo\nWatch Trailer: https://www.youtube.com/watch?time_continue=1&v=jKCj3XuPG8M\nFacebook: https://www.facebook.com/BadBoysMovie\nTwitter: https://twitter.com/BadBoys\nInstagram: https://www.instagram.com/BadBoys/\n\nLyrics:\nThis is the rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm, rhythm\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo \n\nNo son ni Reebok ni son Nike (No)\nSin estilista luzco fly (Yes)\nLa Rosalía me dice que luzco guay (La Rosalía)\nNo te lo niego porque yo sé lo que hay (Woo)\nLo que se ve, no se pregunta (Nah)\nSoy próspero y tengo claro que e' mi culpa (Mi culpa, culpa)\nComo Canelo en el ring nada me asusta\nVivo en mi base y la paz no me la tumban (Woo)\nHakuna Matata como Timón y Pumba\nVoy pa' leyenda así que dale zumba\nLos dejo ciego' con la vibra que me alumbra\nHaters pa' la tumba, nosotros pa' la rumba (Ra)\n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\n[Chorus: J Balvin, Corona, will.i.am]\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo \n\nRitmo\n\nThe rhythm, the rebel\nStyles upon styles upon styles, I got several\nBorn to be wild 'cause I live like a daredevil\nLive it up, hit ‘em up, that’s the scenario \n2Pac, I get around like a merry go \nRooftop, I am on top of the pedestal \nFlu shot, I am so sick I need medical \nPuta, I learned that shit down in Mexico (Hahaha!)\nThe rhythm, the rebel\nNew and improved I be on a new level (Oh, yeah)\nThat’s how we do it, we buildin’ like LEGOs (Oh, yeah)\nFuel on the fire, you dealin' with fuego\nCan't stop, I am addicted I never quit\nWon't stop, don't need to speak to no therapist\nDon’t stop, keepin' it movin's the narrative\nNonstop, do it like Whoop! There it is \n\nThis is the rhythm, rhythm, rhythm, rhythm, rhythm of the night\n\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, baby\n(This is the rhythm of the night)\nToda la noche rompemo' (The night)\nAl otro día volvemo' (Oh, yeah)\nTú sabes como lo hacemo', baby\n(This is the rhythm of the night)\nBaby, tonight's like fuego (The night)\nWe 'bout to spend the dinero (Oh, yeah)\nWe party to the extremo, extremo, extremo, extremo, extremo\n\nRitmo\nYou like that space?\n\nVisit Bad Boys For Life Official Site\nLink: https://www",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/EzKkl64rRbM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 20,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "EzKkl64rRbM"
        }
      },
      "contentDetails": {
        "videoId": "EzKkl64rRbM",
        "videoPublishedAt": "2019-10-11T04:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "DSsPP8XTHQqoNz5JdZLkyWQEWmY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wRjhFM0MxMTU1MEUzQ0VB",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:19Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker & Ava Max - Alone, Pt. II",
        "description": "Walkers!\nThe music video for my brand new single “Alone, Pt. II” with @Ava Max  is finally here. This is the second chapter, continuing the story from the \"On My Way\" music video revealing many unanswered questions. I hope you like it, and are as excited as I am!\n\n- Alan\n\nCheck out the song here:  https://lnk.to/AWAlonePtII\n#AlonePart2 #AlanWalker #AvaMax #YouAreNotAlone\n\nAnd follow the story from Chapter 1 in the \"On My Way\" music video featuring @Sabrina Carpenter  & @Farruko  here:\nhttps://www.youtube.com/watch?v=dhYOPzcsbGM\n\n_____________________\n\n// LYRICS // Alan Walker & Ava Max - Alone Part 2 // LYRICS //\n\n[Verse 1]\n\nWe were young, posters on the wall\nPraying we're the ones that the teacher wouldn't call\nWe would stare at each other\n'Cause we were always in trouble\nAnd all the cool kids did their own thing\nI was on the outside always looking in\nYeah, I was there but I wasn't\nThey never really cared if I wasn't\n\n[Pre-Chorus]\nWe all need that someone who gets you like no one else\nRight when you need it the most\nWe all need a soul to rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Verse 2]\nThen I saw your face, your forgiving eyes\nLooking back at me from the other side\nLike you understood me\nAnd I'm never letting you go, oh\n\n[Pre-Chorus]\nWe all need that someone who gets you like no one else\nRight when you need it the most\nWe all need a soul to rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Interlude]\nI'm not gonna make it alone (La, la-la-la-la-la, 'lone)\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\n\n[Pre-Chorus]\n'Cause you are that someone that gets me like no one else\nRight when I need it the most\nAnd I'll be the one you rely on, a shoulder to cry on\nA friend through the highs and the lows\n\n[Chorus]\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it a-la, la-la-la-la-la, la, la-la-la-la-la, 'lone\nI'm not gonna make it alone\n\n/////////////////////////////////////////\n\nCREDITS:\n*Walker #28300*\n- Susanne Karin Moe\n\n*Main Crew*\n- Director: Kristian Berg\n- Executive Producer: Mikkel Gulliksen (Bleck Film)\n- Producer: Miriam Pedersen Eeg (Bleck Film)\n- DoP: Morten Forsberg\n- Focus Puller: Vi Duc Truong\n- Drone: Ryan Deboot\n- Production Manager: Stine Gundersen\n- Production Designer: Kristian Vestby\n- Costume Designer: Elise Nohr Nystad\n- Documentary DoP: Annicken Aasheim\n- VFX Producer: Eirik Heldal (Apparat)\n- VFX Lead Artist: Wirat Johannessen (Apparat)\n- Color Grading: Thomas Mangham (The Mill)\n- Sound design: Thomas «Tomtom» Haugland\n\n*Vietnam Crew*\n- Line Producer: Shelley Mc Morrow\n- Location Manager: Luke Ford\n- Local Fixer: Le Hong Vi Nghia\n- Production Assistant: Viet Anh Than Thanh\n\n*Son Doong Cave - Oxalis Adventure Tours (www.oxalisadventure.com)*\n- CEO: Chau A Nguyen\n- Technical Direction: Howard Limbert\n- Safety Advisor: Deb Limbert\n- Son Doong Porter Team Leader: Nguyen Tuan Vu\n- Safety Assistant: Hoang Anh Tuan\n\nBig thanks to Son Doong Porter Team!\n\n*Oslo Crew*\n- Scenographer: Petter L. Aker\n- Prop Master: Mari Helene Eios Eriksen\n- Prop Assistant: Jonas Mailand\n- Prop Assistant: Marius Næss\n- Gaffer: Daniel Atkinson\n- Lighting Assistant: Jon Andre Hakvåg\n- Lighting Assistant: Michael Furu Hansen\n- Makeup: Nina Ihrstad Noreng\n- Makeup: Anniken Aarvik\n- Makeup: Helle Kiel Bjørke\n\nThanks to all the extras!",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/HhjHYkPQ8F0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 21,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "HhjHYkPQ8F0"
        }
      },
      "contentDetails": {
        "videoId": "HhjHYkPQ8F0",
        "videoPublishedAt": "2019-12-27T08:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "2Y75-7Lmdw0HSOZoJ3xmC2blxUk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41OURENDc2NEM1MDI5Mjky",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:15Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "TONES AND I - DANCE MONKEY (Dj Dark Remix)",
        "description": "▶ Subcribe to my channel: http://short.djdark.ro/subscribe\n▶ 💰 Donate: http://short.djdark.ro/donate\n▶ DOWNLOAD: http://djdark.ro/?p=13173\n\n▶ Booking: +4 0723 548 116 / booking@bestshow.ro\n🔔 Listen on SoundCloud: http://short.djdark.ro/dancemonkey\n🔔 DOWNLOAD [Extended]: http://short.djdark.ro/dancemonkeyyt\n\n✔️ Follow Dj Dark:\nhttp://short.djdark.ro/facebook\nhttp://short.djdark.ro/youtube\nhttp://short.djdark.ro/soundcloud\nhttp://short.djdark.ro/mixcloud\nhttp://short.djdark.ro/twitter\nhttp://short.djdark.ro/instagram\nhttp://short.djdark.ro/blog\n\n#tonesandi #dancemonkey #remix",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/XpcjSnphVHw/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 22,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "XpcjSnphVHw"
        }
      },
      "contentDetails": {
        "videoId": "XpcjSnphVHw",
        "videoPublishedAt": "2019-10-08T16:47:05Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "eJoPbMoFdeHbwKB2ydYjJ-8vA4I",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi42QzdBMzlBQzQzRjQ0QkQy",
      "snippet": {
        "publishedAt": "2020-03-11T17:56:06Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Meduza, Becky Hill, Goodboys - Lose Control (Official Video)",
        "description": "Watch the official video for \"Lose Control” by Meduza x Becky Hill x Goodboys.\n\nDownload & stream here: https://umg.lnk.to/losecontrol \n\nFollow Meduza:\nInstagram: https://www.instagram.com/MeduzaMusic/\nFacebook: https://www.facebook.com/MeduzaMusic/\nTwitter: https://twitter.com/MeduzaMusic/\n\nFollow Becky Hill:\nInstagram: https://www.instagram.com/beckyhill/\nFacebook: https://www.facebook.com/Beckyhillofficial\nTwitter: https://twitter.com/beckyhill/\n\nFollow Goodboys:\nInstagram https://www.instagram.com/goodboysoff/\nFacebook https://www.facebook.com/goodboysoff/\nTwitter https://twitter.com/goodboysoff\n\nDirected and Edited by 'GRANDMAS' @grandmasdirectors\n\nProducer Manoela Chiabai\nDirector of Photography Nick Morris\nExecutive Producer Martin Roker\nCommissioned by John Hassay\n\n#BlackDogFilms #ridleyscottcreativegroup #azceltic\n\n\nMusic video by Meduza, Becky Hill, Goodboys performing Lose Control. © 2019 Meduza, under exclusive license to Universal Music GmbH\n\nhttp://vevo.ly/cceDfk",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-3P2USPFDcE/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 23,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-3P2USPFDcE"
        }
      },
      "contentDetails": {
        "videoId": "-3P2USPFDcE",
        "videoPublishedAt": "2019-10-24T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "UEgsVVR0LUBipOl4snSjnNW6gIk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41NkI0NEY2RDEwNTU3Q0M2",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:02Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "The Chainsmokers with Kygo - Family (Official Video)",
        "description": "“Family” with Kygo OUT NOW ON THE WORLD WAR JOY ALBUM: https://TheChainsmokers.lnk.to/WorldWarJoyky\nAmazon Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/amazonmusic\nApple Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/applemusic\niTunes: https://TheChainsmokers.lnk.to/WorldWarJoyky/itunes\nSoundcloud: https://TheChainsmokers.lnk.to/WorldWarJoyky/soundcloud \nSpotify: https://TheChainsmokers.lnk.to/WorldWarJoyky/spotify\nYouTube Music: https://TheChainsmokers.lnk.to/WorldWarJoyky/youtubemusic \n\nFollow The Chainsmokers:\nhttp://www.youtube.com/thechainsmokers\nhttp://www.twitter.com/thechainsmokers\nhttp://www.facebook.com/thechainsmokers\nhttp://www.instagram.com/thechainsmokers\nhttp://www.soundcloud.com/thechainsmokers\n\nDirected by Jeremiah Davis\nhttps://www.instagram.com/thatoneblondkid/\nhttps://www.youtube.com/thatoneblondkid\nhttps://twitter.com/thatoneblondkid\nhttps://www.facebook.com/thatoneblondkid\n\nLyrics:\n\nI know water that’s thicker than blood that’s deeper than love\nWith my friends\nPeople come and some people go and some people ride to the end\n \nWhen I am blind in my mind\nI swear they be my rescue\nMy lifeline \nI don’t know what I’d do if I, if I’d survive\nMy brothers and my sisters \nIn my life\nYeah\n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family \nFamily \nI’ll say forever my family \nI’ll say forever my family \n \nStolen dreams took our, our childish days \nStill \nAin’t nothing changed now we’re grown\nWe’re still young still got our mindless ways\nAnd our timeless phase kicking songs \n \nWhen I am blind in my mind\nI swear they be my rescue\nMy lifeline \nI don’t know what I’d do if I, if I’d survive\nMy brothers and my sisters \nIn my life\nYeah\n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family \nFamily \nFamily \nI’ll say forever my family \nFamily \nI’ll say forever my family \n \nI know some people they would die for me\nWe run together they’re my family\nWhen I get up they gon’ be high with me\nI’ll say forever my family\n\n#TheChainsmokers #Family #Kygo",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/mPbFxEGzCaM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 24,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "mPbFxEGzCaM"
        }
      },
      "contentDetails": {
        "videoId": "mPbFxEGzCaM",
        "videoPublishedAt": "2019-12-12T17:00:10Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "CS1luFq-viJ-dPJrMW3FaR9NGWQ",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yODlGNEE0NkRGMEEzMEQy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tujamo & Lukas Vane - Drop It (Official Music Video)",
        "description": "Tujamo & Lukas Vane - Drop It is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/drop-it-1!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Tujamo:\nhttp://instagram.com/tujamo\nhttp://facebook.com/tujamo\nhttp://twitter.com/itstujamo\nhttp://soundcloud.com/tujamo\nhttp://youtube.com/tujamo\nhttp://tujamo.com\n\nFollow Lukas Vane:\nhttps://www.instagram.com/lukasvane\nhttps://www.facebook.com/DJLukasVane\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Tujamo\n#LukasVane\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/2QsUBpTt-R0/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 25,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "2QsUBpTt-R0"
        }
      },
      "contentDetails": {
        "videoId": "2QsUBpTt-R0",
        "videoPublishedAt": "2019-10-30T16:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HFGVar0pFdaNB6uPFPJGqqTajd0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wMTcyMDhGQUE4NTIzM0Y5",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker, K-391, Tungevaag, Mangoo - PLAY (Alan Walker's Video)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nWalkers, \n\nIn 1999, Mangoo put out “Eurodancer” – a track considered to be one of the most iconic electronic tracks of all time.\nIt has now been revived by Mangoo and a new generation of producers from the modern day: Alan Walker, K-391 & Tungevaag.\n\nFollow the release on www.p74y.com\n\n- Alan\nLYRICS:\n\nwe used to hide under the covers \nserenade each other\nwith careless melodies \nsomething buried deep inside us \nthe major and the minor\nwe’re like piano keys\nyou played for me\nyou played for me, oooh \nyou played for me \n\ni swear it even in my sleep \ni hear it like the memory \nof everything we used to be\nyou played for me\n\nwe couldn’t stop the world from turning\nit was like a whirlwind, scattered us like leaves\nbut i’m stuck inside a feeling\nthe song that never leaves we were like a symphony\nyou played for me\nyou played for me, oooh\nyou played for me\n\ni swear it even in my sleep \ni hear it like the memory \nof everything we used to be\nyou played for me\n\n#pressplay\n\nCredits: \nConcept by:                  Alexander Zarate Frez & MER Recordings\nExecutive Producer:    MER Recordings\nDirector:                        Jarand Herdal\nProducer:                      Fredrik Wold-Hansen\nEditor:                            Alexander Zarate Frez\n                                       Mads Neset\nVFX:                               Apparat\nGrade:                           Go Electra v/Håvard Småvik\nAssistant Director:      Henrik Borge\nDOP                               Svarstad Lien\nCamera operator:        Lasse Heggen\nSteadicam operator:   Peder Torp Mathisen \nGaffer:                           Ole Kristian Nilsen\nBest boy:                       Lene Vaagland\nBoom operator            Håkon Solvsvik\nSet decorator              Stine Aas Nundal\nSet decorator ass       Brynhild Dagslott\nMake up:                      Jeanette Møller Lund\nHair                               Studio ALD w/Kathrine Stenholen\nProd. Ass                     Mai Asbjørnsen & Oda Helen Brurberg\n \nTalents: \nYoung Martin Tungevaag:    Henrik Boa Band Nes\nYoung K-391:                          Theodor Gelsdorf\nProducer 2019:                       Mai Asbjørnsen \nVocalist:                                   Torine \n\nThanks to K-391, Tungevaag, Mangoo & Torine",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/YQRHrco73g4/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 26,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "YQRHrco73g4"
        }
      },
      "contentDetails": {
        "videoId": "YQRHrco73g4",
        "videoPublishedAt": "2019-08-30T07:00:13Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "YzJz7E-qAmSztnNqm5pF9b11U1Y",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41MjE1MkI0OTQ2QzJGNzNG",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Tones And I - Dance Monkey (Alex Luciano Remix)",
        "description": "Tones And I - Dance Monkey (Alex Luciano Remix) 🎶🐒\nThank you for listening to our music, we hope you enjoy our channel & subscribe to it 🔔 : )\n🌴 Spotify: https://www.chillyourmind.com/spotify             🌴 Apple Music: http://bit.ly/cymapple   \n\n🎧 YouTube Playlist: http://bit.ly/chillyourminduploads     \n📸 Follow us on Instagram: http://bit.ly/cyminstagram\n\nTones And I - Dance Monkey - https://tonesandi.lnk.to/DanceMonkeyYT\n\nDirected by: Liam Kelly & Nick Kozakis\nDirector of Photography: Carl Allison\nProduced by Visible Studios\nhttps://www.visiblestudios.com.au/\n\n✓ Turn on the '🔔' to get notifications for new releases!\n👕 (New) ChillYourMind Shop: https://www.shopchillyourmind.com\n\n🔊 Stream/Download Tones And I - Dance Monkey (Alex Luciano Remix):\nhttps://hypeddit.com/track/dbt7gh\n\n🌴🕊 Follow ChillYourMind on:\n• Spotify: → https://www.chillyourmind.com/spotify\n  YouTube:  → http://bit.ly/cymyoutube\n• Apple Music: → http://bit.ly/cymapple\n• Instagram: →  http://bit.ly/cyminstagram\n• Facebook → http://bit.ly/facebookcym\n• VK: → https://vk.com/chillyourmindofficial\n• SoundCloud: → http://bit.ly/cymsc\n• Audiomack: →  http://bit.ly/cymaudiomack\n\n• Alex Luciano:\nFacebook : https://www.facebook.com/AlexLucianoMusic/\nInstagram : https://www.instagram.com/alexlucianomusic/\nYoutube : https://www.youtube.com/AlexLucianoMusic\nSoundcloud : https://soundcloud.com/alexlucianomusic\nSpotify: https://open.spotify.com/artist/0axUzm11mWMSfZiiZAn7C4?si=49siFNQISVe2M_jZuvuPAQ\n\nFollow Tones And I\nhttps://www.tonesandi.com\nhttps://www.facebook.com/TONESANDI\nhttps://www.instagram.com/tonesandi\n\nLYRICS:\nThey say oh my god I see the way you shine \nTake your hands my dear and place them both in mine\nYou know you stopped me dead while I was passing by\nAnd now I beg to see you dance just one more time \nOhhh I \nSee you see you seen you every time \nand oh my I, I like you style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh \nI’ve never seen anybody do the things you do before \nThey say\nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again \n\nI said \nOh my god I see you walking by \nTake my hands my dear and look me in my eyes\nJust like a monkey I’ve been dancing my whole life \nBut you just beg to see me dance just one more time \nOoh I \nSee you see you seen you every time\nAnd oh my I, I like your style \nYou, you make me make me make me wanna cry \nAnd now I beg to see you dance just one more time \n\nSo they say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\n\nOooooo\n\nThey say \nDance for me\nDance for me \nDance for me \nOh oh oh\nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nThey say \nDance for me \nDance for me \nDance for me \nOh oh oh, oh oh oh oh \nI’ve never seen anybody do the things you do before \nThey say \nMove for me \nMove for me \nMove for me \nEh eh eh \nAnd when you’re done i'll make you do it all again\nAll again\n\n\n🎧 Youtube Playlists:\n↪︎  All Uploads: http://bit.ly/chillyourminduploads\n↪︎  Chill Mixes:  http://bit.ly/chillyourmindmixes\n↪︎  Official Releases: http://bit.ly/CYMRecordsReleases\n\n🎧 Spotify\n↪︎  Official Playlist: https://www.chillyourmind.com/spotify\n\n\n•  Picture by MAVRIN:\nhttps://500px.com/mavrin\nhttps://www.facebook.com/art.mavrin\n\nGood Vibes Only.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/5TqTZP9Uy8s/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 27,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "5TqTZP9Uy8s"
        }
      },
      "contentDetails": {
        "videoId": "5TqTZP9Uy8s",
        "videoPublishedAt": "2019-11-23T13:37:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "T_TpB6A9KE-UvXpm3EyztJ7f4f4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4wOTA3OTZBNzVEMTUzOTMy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "LUM!X, Gabry Ponte - Monster (Official Music Video)",
        "description": "Austrian rising star LUM!X teams up with Gabry Ponte (known from the 1998 hit ‘Blue (Da Ba Dee)’ with his band Eiffel 65), for the powerful melbourne bounce track ‘Monster’.\n\nLUM!X, Gabry Ponte - Monster is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://spinninrecords.release.link/monster!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow LUM!X:\nhttps://soundcloud.com/lumix_music\nhttps://www.instagram.com/lumix_music/\n\nFollow Gabry Ponte:\nhttps://www.youtube.com/user/gabryponte\nhttps://www.instagram.com/gabryponte/\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#LUMIX\n#GabryPonte\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/VWNFj9rm6tc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 28,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "VWNFj9rm6tc"
        }
      },
      "contentDetails": {
        "videoId": "VWNFj9rm6tc",
        "videoPublishedAt": "2019-05-09T10:00:08Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6oC33Scit-ryCvu2aMZubNAG1h0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4xMkVGQjNCMUM1N0RFNEUx",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan x Walkers - Unity",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nFor a month now I’ve had an ongoing production process together with Walkers. This is the final result! It’s called «Unity» and is produced, written and recorded by us. Really proud of what we’ve achieved together from so many different places in the world. This is the anthem to our community!\n\nThank you to all the amazing Walkers for contributing on the different parts of the song.\n\nI hope you enjoy!\n\n- Alan\n#AlanXWalkers\n\n*Credits*\n\nPiano:\nWalker #0\n\nDrums:\nWalker #18677 \n(K4rim from Saudi Arabia)\n \nLead:\nWalker #27678 \n(Haruto Inoue from Japan)\n \nPads & Plucks:\nWalker #17210\n(Ardi Rida from Italy)\n \nHarp:\nWalker #13967\n(Natalie Lo from Hong Kong)  \n \nLyrics:\nWalker #326 #487 #817 #1295 #1862 #1990 #2339 #2436 #4064 #4199 #4348 #4355 #4684 #4744 #4832 #4832 #4852 #4934 #4946 #5060 #5062 #5105 #5107 #5160 #5195 #5202 #5207 #5208 #5235 #5677 #6079 #6145 #6172 #6316 #6356 #6409 #6455 #6851 #6930 #7101 #7400 #7457 #7898 #8598 #8627 #8658 #8711 #8974 #9086 #9343 #9383 #9428 #9979 #10152 #10668 #10702 #10731 #10754 #10781 #10796 #10886 #11132 #11203 #11293 #11325 #11327 #11364 #11404 #11545 #11695 #11719 #11818 #11836 #11993 #11998 #12016 #12176 #12236 #12263 #12270 #12315 #12345 #12597 #12660 #12774 #12834 #12894 #12941 #13006 #13178 #13276 #13292 #13300 #13371 #13598 #13718 #13815 #13899 #13910 #13984 #14058 #14064 #14161 #14183 #14192 #14197 #14251 #14354 #14388 #14435 #14529 #14706 #14714 #14731 #14732 #14791 #14805 #14812 #14897 #14898 #14913 #14984 #15035 #15185 #15247 #15259 #15298 #15338 #15521 #15524 #15572 #15618 #15626 #15680 #15857 #16123 #16153 #16165 #16223 #16230 #16285 #16304 #16396 #16404 #16449 #16513 #16757 #16778 #16895 #16938 #16980 #17058 #17121 #17194 #17196 #17423 #17434 #17559 #17560 #17580 #17652 #17654 #17719 #17733 #17745 #17781 #17795 #17820 #17993 #18028 #18073 #18098#18116#18165 #18184 #18185 #18190 #18217 #18256 #18419 #18466 #18559 #18568 #18844 #18973 #19049 #19097 #19160 #19239 #19318 #19323 #19336 #19349 #19368 #19462 #19494 #19513 #19557 #19597 #19642 #19715 #19850 #19907 #19987 #20003 #20091 #20093 #20205 #20206 #20320 #20364 #20374 #20393 #20409 #20458 #20492 #20500 #20563 #20590 #20638 #20640 #20665 #20700 #20713 #20734 #20740 #20776 #20818 #20868 #20924 #20991 #21137 #21139 #21179 #21276 #21296 #21341 #21342 #21388 #21390 #21437 #21603 #21697 #21800 #21885 #21935 #22018 #22057 #22086 #22133 #22141 #22145 #22150 #22185 #22222 #22290 #22387 #22422 #22447 #22653 #22764 #22999 #23033 #23428 #23528 #23564 #23568 #23640 #23653 #23858 #23869 #23870 #23922 #24066 #24376 #24492 #24553 #24569 #24690 #24758 #24842 #24846 #24901 #24915 #24948 #25095 #25130 #25306 #25314 #25331 #25408 #25444 #25477 #25500 #25587 #25612 #25766 #25833 #25894 #25912 #25949 #25962 #26035 #26058 #26229 #26244 #26494 #26529 #26547 #26662 #26799 #26836 #26846 #26858 #26872 #26900 #27084 #27170 #27218 #27346 #27370 #27372 #27393 #27577 #27583 #27650 #27670 #27730 #27736 #27849 #27868 #27964 #27966 #27973 #27982 #28121 #28129 #28277 #28307 #28397 #28490 #28524 #28529 #28534 #28621 #28623 #28784 #29026 #29195 #29237 #29297 #29465 #29552 #29589 #29641 #29644 #29707 #29907 #29917 #29974 #29998 #30051 #30082 #30201 #30233 #30285 #30500 #30507 #30516 #30626 #30713 #30758 #30766 #31018 #31062 #31064 #31075 #31095 #31107 #31186 #31205 #31419 #31483 #31522 #31608 #31643 #31675 #31679 #31690 #31739 #31754 #31785 #31790 #31818 #31844 #31858 #31882 #31905 #31944 #31991 #32000 #32020 #32097 #32103 #32148 #32176 #32178 #32189 #32195 #32222 #32226 #32229#32243 #32299 #32305 #32339 #32492 #32524 #32538 #32590 #32657 #32668 #32685 #32694 #32702 #32737 #33121 #33179 #33212 #33219 #33251 #33323 #33352 #33372 #33395 #33448 #33457 #33459 #33463 #33496 #33498 #33531 #33564 #33567 #33580 #33586 #33591 #33600 #33610 #33622 #33637 #33638 #33644 #33652 #33654 #33665 #33670 #33677 #33680 #33703 #33711 #33712 #33811\n\nTopline:\nWalker #32176\n(Sapphire from England)\n \nArtwork:\nWalker #7417\n(Jonathan Murray from USA)\n\nMixed by: James Njie",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/E3x_dLVTEuA/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 29,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "E3x_dLVTEuA"
        }
      },
      "contentDetails": {
        "videoId": "E3x_dLVTEuA",
        "videoPublishedAt": "2019-07-20T09:58:14Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3PVI8dv4nFjcyl1JtgJ-bepuonI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41MzJCQjBCNDIyRkJDN0VD",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker, Sabrina Carpenter & Farruko - On My Way (Da Tweekaz Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII \n\nWalkers! Here is Da Tweekaz Remix of \"On My Way\".\n\nThere’s nothing that excites me more than performing my songs live for my fans, and I think this remix really captures that feeling! This has been such a crazy journey so far, performing in every corner of the world for crazy audience! Thank you for being such amazing crowds all of you!\n\n- Alan \n\nFootage: Mohammed Sarmadawy & Erik Hem\nEdit: Mads Holm Neset",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/1JHXn0LWx50/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 30,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "1JHXn0LWx50"
        }
      },
      "contentDetails": {
        "videoId": "1JHXn0LWx50",
        "videoPublishedAt": "2019-06-25T10:02:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "3BVroe-om8e2Zg-b4ws5jMPHAUY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DQUNERDQ2NkIzRUQxNTY1",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Darkside (feat. Au/Ra and Tomine Harket)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nWalkers, it's time to finally share the second chapter of the World Of Walker trilogy with you guys. \"Darkside\" is the sequel to \"All Falls Down\" and features the amazing and talented Au/Ra and Tomine Harket. Hope you enjoy the music as well as the music video! Let me know what you think - like, share and leave a comment in the section below! (you can find lyrics at the end of the description)\n- Alan\n\nListen to the single here: https://AlanWalker.lnk.to/Darkside\n#WorldOfWalker\n\nMy debut album, “Different World\" is finally out! \nCheck it out here: https://lnk.to/AW-DW-Album\n\nCheck out the other videos in the trilogy:\nTired (Prologue) - https://www.youtube.com/watch?v=g4hGRvs6HHU\nAll Falls Down (Episode 1) - https://www.youtube.com/watch?v=6RLLOEzdxsM\n\n-\n\nCredits:\nDirector: Kristian Berg (http://www.kristianberg.com)\nConcept: Kristian Berg & MER (http://www.mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://www.viperfilm.com)\nProduced by: Niklas Røseth - iProduksjon (http://www.iproduksjon.com)\nProduced by: Ana Sikavica - Red Production (http://www.redproduction.tv)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\nEditor: Kristian Berg & Jonas Aarø\nVFX: Wirat Johannessen (Knowit Experience)\nGrade: Julien Alary\n\nCostume Designer: Elise N. Nystad\nSet Designer: Krešo Glavinić\nGaffer: Vladimir Slijepčević \n1st AC: Espen Olsen\nDrone Operator: Roger Fosaas\n\nShot on location in Croatia, Montenegro and Bosnia & Herzegovina.\n\nA special thanks to everyone involved!\n\n-\n\nLyrics:\n\n[Verse 1 - Tomine Harket]:\nWe're not in love\nWe share no stories\nJust something in your eyes\nDon't be afraid\nThe shadows know me\nLet's leave the world behind\n\n[Chorus]:\nTake me through the night\nFall into the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side\n\n[Verse 2 - Au/Ra]:\nBeneath the sky\nAs black as diamonds\nWe're running out of time\nDon't wait for truth\nTo come and blind us\nLet's just believe their lies\n\n[Pre-chorus - Au/Ra]:\nBelieve it, I see it\nI know that you can feel\nNo secrets worth keeping\nSo fool me like I'm dreaming\n\n[Chorus]:\nTake me through the night\nFall in to the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side\n\n[Chorus]:\nTake me through the night\nFall into the dark side\nWe don't need the light\nWe'll live on the dark side\nI see it\nLet's feel it\nWhile we're still young and fearless\nLet go of the light\nFall in to the dark side\nFall in to the dark side\nGive into the dark side\nLet go of the light\nFall in to the dark side",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/M-P4QBt-FWw/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 31,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "M-P4QBt-FWw"
        }
      },
      "contentDetails": {
        "videoId": "M-P4QBt-FWw",
        "videoPublishedAt": "2018-07-27T07:00:04Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "Pp1Dtr1P7gQhoMpp9VPJwbzh3V4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NDk1REZENzhEMzU5MDQz",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Diamond Heart (feat. Sophia Somajo)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nWalkers! I really can´t believe this is happening. It's finally time for me to share the third and final chapter of the World Of Walker trilogy with you all. «Diamond Heart» features the very talented Sophia Somajo. \n\nThis has been such an amazing and crazy journey – thank you to each and everyone of you for the support along the way. Let me know what you think by liking, sharing and commenting in the section below! \n\n- Alan 💎❤️\n\nListen to the single here: https://lnk.to/DiamondHeart \n#DiamondHeart\n\nListen to Spotify: https://spoti.fi/2O2kGZX\n\nCheck out the other videos in the trilogy:\nTired (Prologue) - https://www.youtube.com/watch?v=g4hGR...\nAll Falls Down (Chapter 1) - https://youtu.be/6RLLOEzdxsM\nDarkside (Chapter 2) - https://youtu.be/M-P4QBt-FWw\n\n-\n\nCredits:\nDirector: Kristian Berg (http://kristianberg.com)\nConcept: Kristian Berg & MER (http://mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://viperfilm.com)\n\nProduced by: Guðfinnur Ýmir Harðarson - Hero Productions Iceland (http://hero.is)\n\nProduced by: Roger Pritzke - M for Media (http://mformedia.com)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\n\nEditor: Kristian Berg \nVFX: Erik Ferguson \nGrade: Comany 3\n\nCostume Designer: Elise N. Nystad \nArt department: Freyja Vals Sesseljudóttir \nGaffer: Finnur Þór Hrafnsson \n1st AC: Philip Borgli \nDrone Operator: Vilius Petrikas & Mohanad Ahma\n\nShot on location in Iceland & United Arab Emirates.\n\nA special thanks to everyone involved!\n\n-\n\nLyrics:\n\nhello sweet grief\nI know you will be the death of me\nfeel like the morning after ecstasy\nI am drowning in an endless sea\n\nhello old friend\nhere’s the misery that knows no end\nso I am doing everything I can\nto make sure I never love again\n\nI wish that I did not know \nwhere all broken lovers go\nI wish that my heart was made of stone\n\nYeah if I was bulletproof\nI’d love you black and blue\nIf I was solid like a jewel\n\nIf I had a diamond heart\noh oh\nI’d give you all my love\nIf I was unbreakable\n\nIf I had a diamond heart\noh oh\nYou could shoot me with a gun of gold\nIf I was unbreakable\n\nI’d walk straight through the bullet\nbendin’ like a tulip\nblue-eyed and foolish\nnever mind the bruises\ninto the fire\nbreakin’ through the wires\ngive you all I’ve got\n \nIf I had a diamond heart\n\nI’d walk straight through the dagger\nnever break the pattern\ndiamonds don’t shatter\nbeautiful and battered\ninto the poison\ncry you an ocean\ngive you all I’ve got\n\nIf I had a diamond heart\n\ngoodbye, so long\nI don’t know if this is right or wrong\nam I giving up where I belong?\n’cause every station is playing our song\n\ngoodbye my love\nyou are everything my dreams are made of\nyou’ll be Prince and I’m the crying dove \nIf I only were unbreakable\n\nI wish that I did not know \nwhere all broken lovers go\nI wish that my heart was made of stone\n\nYeah if I was bulletproof\nI’d love you black and blue\nIf I was solid like a jewel\n\nIf I had a diamond heart\noh oh\nI’d give you all my love\nIf I was unbreakable\n\nIf I had a diamond heart\noh oh\nYou could shoot me with a gun of gold\nIf I was unbreakable\n\nI’d walk straight through the bullet\nbendin’ like a tulip\nblue-eyed and foolish\nnever mind the bruises\ninto the fire\nbreakin’ through the wires\ngive you all I’ve got\n \nIf I had a diamond heart\n\n I’d walk straight through the dagger\nnever break the pattern\ndiamonds don’t shatter\nbeautiful and battered\ninto the poison\ncry you an ocean\ngive you all I’ve got\n\nIf I had a diamond heart\n\n#WorldOfWalker",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/sJXZ9Dok7u8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 32,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "sJXZ9Dok7u8"
        }
      },
      "contentDetails": {
        "videoId": "sJXZ9Dok7u8",
        "videoPublishedAt": "2018-09-28T07:01:21Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "ghZbhEBUatFu2QOliqriljQNKTI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5GNjNDRDREMDQxOThCMDQ2",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "K-391 & Alan Walker - Ignite (feat. Julie Bergan & Seungri)",
        "description": "See the MOTi Remix of End of Time here: https://youtu.be/5rLVz20t_Ho\n---\nCheck out my new release ”End of Time” with Alan Walker and Ahrix!\nhttps://orcd.co/ENDOFTIME\n\ncheck out the next chapter in the series with my new single \"Mystery\" ft. Wyclef Jean! https://www.youtube.com/watch?v=_8HNJKdI-Sg \n\nlooking forward to seeing all your videos, remixes and covers.\nyou can find the lyrics below.\n \nIIIIXI\n \nListen to the single here: http://radi.al/K391Ignite\n \nAlso, remember to check out the Prologue: \nhttps://www.youtube.com/watch?v=3YpZpJTILuI\n \nCredits:\nDirector: Alexander Zarate Frez\nConcept: MER (www.mer.as)\nProduced by: MER (www.mer.as)\nCo Producer: Good Company (www.goodco.tv)\nD.O.P: Eirik Skarstein\nEditor: Alexander Zarate Frez\nVFX: Steamheads\nGraphics: Simon Diaz\nGrade: Jon Arne Storkås & Axel Rødningen\n \nA special thanks to all feature artists and Thomas Hayes. \n\nMER exclusively licensed to Liquid State\n\nLYRICS:\n[Verse 1 – Julie Bergan]:\nFireflies\nA million little pieces\nFeeds the dying light\nAnd breathes me back to life\n \nIn your eyes \nI see something to believe in\nYour hands are like a flame\nIt brings the sweetest pain (your palms, the sweetest pain)\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nLike a starship speeding into the night\nYou and I get lost in the infinite lights\nBaby tell me one more beautiful lie\nOne touch and I ignite [x3]\n\n[Verse 2 – Julie Bergan]:\nSo alive\nYour touch is like the daylight\nBurning on my skin\nIt turns me on again\n \nYou and I\nSurvivors of the same kind\nAnd we’re the only ones\nDancing on the sun\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nYou’re the demon in my mind             \nLike a fever, feels so right\nBaby tell me one more beautiful lie\nOne touch and I ignite [x3]\n\n[Bridge - Seungri]:\nDiamonds are forever, but all we need is just tonight\nWe’re monumental tremors that can freeze the speed of life\nJust like particles that's falling from heaven all over the stars\nHear you calling for me\nHear you calling me on from afar\n\n[Chorus – Julie Bergan]:\nLet the darkness lead us into the light\nLet our dreams get lost, feel the temperature rise\nBaby tell me one more beautiful lie\nOne touch and I ignite\n \nI feel the heat as we collide\nLike a fever that feels so right\nBaby tell me one more beautiful lie\nOne touch and I ignite [x6]",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Az-mGR-CehY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 33,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Az-mGR-CehY"
        }
      },
      "contentDetails": {
        "videoId": "Az-mGR-CehY",
        "videoPublishedAt": "2018-05-12T07:29:58Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "i6u1-kkCS6xyUWLIL094U1xmWrg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi40NzZCMERDMjVEN0RFRThB",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "JABBAWOCKEEZ x Tiësto - BOOM with Gucci Mane & Sevenn",
        "description": "In celebration of his birthday, we treated Tiësto to a special surprise performance at MGM Grand Las Vegas! Shortly afterwards, we took over Hakkasan Nightclub to continue the festivities...\n\n\"BOOM\" by Tiësto, Gucci Mane & Sevenn\nClick here to stream and download: http://tsto.co/gucciboom\n\nSpecial thanks to Hakkasan Nightclub, located within MGM Grand Las Vegas. @HakkasanLV #HakkasanLV\n\nConnect with Tiësto:\nhttps://www.facebook.com/tiesto/\nhttps://twitter.com/tiesto\nhttps://www.instagram.com/tiesto/\nhttps://soundcloud.com/tiesto\n\nJabbawockeez new show \"JREAMZ\" now playing in Las Vegas at MGM Grand. Purchase Tickets to the Show: http://www.jbwkz.com\n\nhttp://www.facebook.com/Jabbawockeez\nhttp://www.twitter.com/Jabbawockeez @Jabbawockeez\nhttp://www.instagram.com/Jabbawockeez @Jabbawockeez\n\nProduced by: Jabbawockeez\nDirected by: Joe Larot & Christian Astorga\nSpecial thanks to the efforts of the cast: Rainen Paguio, Kevin Brewer, Brandon Raphael, Austin Gutierrez, Tamasi Avei, Reece Austin, Mike Perez, Chris Buenaventura, Justin David, Brandon Roberts, Sae Cha, Janae Rosebud , Mike Urquhart, Gavin Pecson, JoJo Diggs, Stephan Evans, Xavier Berkeley, Anthony Hatmaker, Lee Ann Goff-Daudet, Richie Tayag, Raphael Hubilla, Jason Magsuci, & Christopher Pangilinan.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/QYU18mrBB54/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 34,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "QYU18mrBB54"
        }
      },
      "contentDetails": {
        "videoId": "QYU18mrBB54",
        "videoPublishedAt": "2018-02-02T14:03:56Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "59YXsQyKvf8NpUVnLx0532M2lX0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EMEEwRUY5M0RDRTU3NDJC",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Dimitri Vegas & Like Mike vs W&W & Moguai -  Arcade Mammoth (Official Music Video)",
        "description": "Win a trip to Tomorrowland; https://win.dimitrivegasandlikemike.com ❤  \n\nStream or get a free copy of Arcade Mammoth: https://summerofmadness.com\n\nEstablished from the offset with the biggest festival stage in mind, Tomorrowland residents Dimitri Vegas & Like Mike alongside W&W and Moguai present to you the seismic peak time beast that is ‘Arcade Mammoth’. A mash-up of pure ecstasy and features a pulsating crescendo that drips with power and profound intensity.\n\nEnjoy this festival 2018 favourite in all its glory. As can be seen from the mainstage scaling video, the showcases the magnitude of this gigantic record! All of the artists behind this record have achieved staggering goals within the electronic music scene, so it should come as little surprise than that this beat driven beast contains the perfect recipe for mainstage domination!\n\nreturn to the helm with 7 new ground-breaking releases which combine heavy-duty basslines, impeccable productions, spell binding drops and powerful synths ripping through the tracks throughout, transporting avid listeners to another dimension, whilst remaining true to their iconic sound. \n\n\nFollow Dimitri Vegas & Like Mike on Spotify:\nhttp://dimitrivegasandlikemike.com/spotify\n\nRelive the MADNESS with these exclusive Spotify playlists:\nThe Official Tomorrowland Playlist:\nhttp://tomorrowland.com/spotify\nThe Smash The House Radio Playlist:\nhttp://smashthehouse.com/spotify\n\nSubscribe yourself for more Tomorrowland Music on: \nhttps://www.youtube.com/user/SmashTheHouse\n\nFollow us on social media:\nhttp://www.facebook.com/dimitrivegasandlikemike\nhttp://www.twitter.com/dimitrivegas\nhttp://www.twitter.com/likemike\nhttp://www.instagram.com/dimitrivegasandlikemike\nhttp://www.soundcloud.com/dimitrivegasandlikemike\n\nFollow W&W:\nhttps://www.facebook.com/wandwofficial/\nhttps://twitter.com/WandWmusic\nhttps://www.instagram.com/wandwmusic/\n\nFollow Moguai:\nhttps://www.facebook.com/djmoguai/\nhttps://twitter.com/moguai\nhttps://www.instagram.com/moguai/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/3Qq7kNjg-KY/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 35,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "3Qq7kNjg-KY"
        }
      },
      "contentDetails": {
        "videoId": "3Qq7kNjg-KY",
        "videoPublishedAt": "2018-08-03T11:57:17Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "niopTid9OiZoM-C9tuggTCaRsy8",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45ODRDNTg0QjA4NkFBNkQy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Hardwell & Maddix - Bella Ciao (Live Video)",
        "description": "Hardwell & Maddix - Bella Ciao\nListen here ➡️ http://revr.ec/BC-YT\nJoin the 'Bigroom Drops' Spotify Playlist!🔥 https://revr.ec/BIGROOM-DROPS\n\nLabel boss Hardwell teams up with long-time Revealed key player Maddix to present ‘Bella Ciao’ on Revealed Recordings. The track samples the Italian classic ‘Bella Ciao’, made famous by the popular ‘La Casa De Papel’ series, and was premiered by Hardwell during his set at this year’s Tomorrowland, and the hype has been building ever since.\n\nThe track is introduced with the original Italian folk song kicking off proceedings, before electronic elements are added, highlighted by a synth that mirrors the original melody, gliding from note to note. That is layered with multiple stadium ready accompaniments that beef out the track on the drop. Light plucks are introduced in the main break to reduce the heat, quickly switching up as the intensity increases again, the track building towards it’s anthemic finish with a shephard tone riser and expertly programmed snares.\n\nThe anticipation for this track has reached fever pitch since it was first heard, and now fans finally have the chance to grab a copy of ‘Bella Ciao’ when it is released 17th August via Revealed Recordings.\n\nVideo credits: Tomorrowland \n\nGet connected! \nhttp://www.revealedrecordings.com\nhttp://www.facebook.com/revealedrecordings\nhttp://www.twitter.com/revealedrec\nhttp://instagram.com/revealedrec\nhttp://www.soundcloud.com/revealed-recordings\nhttp://open.spotify.com/user/revealedrec\nhttp://www.youtube.com/revealedrec",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/0bmE9XY3sOc/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 36,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "0bmE9XY3sOc"
        }
      },
      "contentDetails": {
        "videoId": "0bmE9XY3sOc",
        "videoPublishedAt": "2018-08-17T13:28:11Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "bIqK2seK-Ow6uS4W9kfonLNZys0",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41Mzk2QTAxMTkzNDk4MDhF",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Martin Garrix feat. Bonn - High On Life (Official Video)",
        "description": "Martin Garrix feat. Bonn - High On Life (Official Video)\n♫ High On Life feat. Bonn is out now: http://stmpd.co/MGHOLID\n♫ Drown is out now: http://stmpd.co/C6Rq6ID\n\nPremiered my new track High On Life featuring Bonn on Tomorrowland 2018 and the official video is also my aftermovie for this amazing festival. Hope you enjoy it!\n\nClick on subtitles to turn lyrics on/off.\n\nFollow Martin Garrix: \nFacebook: http://facebook.com/MartinGarrix\nTwitter: http://twitter.com/MartinGarrix\nInstagram: http://instagram.com/MartinGarrix\nYouTube: http://youtube.com/MartinGarrix\n\nFollow STMPD RCRDS\nYouTube: http://www.youtube.com/c/stmpdrcrds\nFacebook: https://www.facebook.com/STMPDRCRDS/\nInstagram: https://www.instagram.com/stmpdrcrds/\nTwitter: https://twitter.com/stmpdrcrds\nSpotify: http://stmpd.co/ST50SPID\n\nDirected and edited by: Damian Karsznia\n\nCinematography by: \n- Sjors Ruijters \n- Fabian de Prieëlle\n- Mathias Normann\n- Mees Roozen\n- Joris Hoevenberg\n- Damian Karsznia\n\n#HighOnLife #Garrix #Bonn\n#MartinGarrix #Tomorrowland #Aftermovie #Tomorrowland2018",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/Lpjcm1F8tY8/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 37,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "Lpjcm1F8tY8"
        }
      },
      "contentDetails": {
        "videoId": "Lpjcm1F8tY8",
        "videoPublishedAt": "2018-07-30T14:51:57Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "m9nYzYCLMAcUw2mz__fvrQdj1rg",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5EQUE1NTFDRjcwMDg0NEMz",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Stadiumx - Touch My Soul (Official Music Video)",
        "description": "Stadiumx - 'Touch My Soul' is OUT NOW on Hysteria!\n\nStream or download: https://hysteria.release.link/touch-my-soul\n\n==============\n\nBe part of the Hysteria Family! Subscribe to our channel, hit that Like button and click the bell to be the first to know when we upload a new video. Also, don't forget to share and stay connected through our socials.\n\nSubscribe to Hysteria YouTube: http://bit.ly/1nQGl3e\nHysteria Facebook: https://facebook.com/hysteriarecords\nHysteria Twitter: https://twitter.com/hysteriarecords\nHysteria Instagram: https://instagram.com/hysteriarecords\nHysteria Soundcloud: https://soundcloud.com/hysteriarecords\n\nStadiumx:\nFacebook: https://facebook.com/stadiumxofficial\nTwitter: https://twitter.com/stadiumx\nInstagram: https://instagram.com/stadiumx\nSoundcloud: https://soundcloud.com/stadiumxofficial",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/_y1iRn7ITNs/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 38,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "_y1iRn7ITNs"
        }
      },
      "contentDetails": {
        "videoId": "_y1iRn7ITNs",
        "videoPublishedAt": "2019-11-15T11:59:33Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "OC77n-YiXIhSgPlTyNcirunjrDY",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi41QTY1Q0UxMTVCODczNThE",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "KSHMR x KAAZE - Devil Inside Me (feat. KARRA) [Official Lyric Video]",
        "description": "Best of KSHMR - KSHMR MIX 2020: https://youtu.be/SKXPmV3L3Jo\nSpinnin’ Massive Monday is here to make your day a whole a lot better with a brand new energetic Dance track! Start your week off with a bang every Monday at 5 PM CEST!\n\nKSHMR x KAAZE - Devil Inside Me (feat. KARRA) is OUT NOW on Dharma! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://dharmamusic.release.link/devil-inside-me-feat-karra!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nKSHMR\nInstagram: https://www.instagram.com/kshmr/\nFacebook: https://www.facebook.com/KSHMRmusic/\nTwitter: https://twitter.com/KSHMRmusic\nSoundCloud: https://soundcloud.com/kshmr\nSpotify: https://open.spotify.com/user/kshmrmusic?si=fVfUAZZzSt-66WekFg0Eqg\nYouTube: https://www.youtube.com/user/KSHMRmusic?sub_confirmation=1\n\nKAAZE\nInstagram:  https://www.instagram.com/iamkaaze/\nFacebook: https://www.facebook.com/kaazeofficial/\nTwitter: https://twitter.com/iamkaaze\nSoundCloud: https://soundcloud.com/iamkaaze\nYouTube: https://www.youtube.com/channel/UC4YCVy0ggUoFd2NVU2z04WA\nSpotify:  https://open.spotify.com/artist/6WGE3kO8ULME2ErBcOksSR?si=RcFBP5eeTj2YCHrQNvNOWA\n\nKARRA\nInstagram: https://www.instagram.com/iamkarramusic/\nFacebook: https://www.facebook.com/karramusic/\nTwitter: https://twitter.com/IAMKarraMusic\nSoundCloud: https://soundcloud.com/iamkarramusic\nYouTube: https://www.youtube.com/user/iamkarramusic\nSpotify: https://open.spotify.com/artist/24CzPFC4y3bM4AkUnZfuAU?si=hs-_O7moTFehqxvJogko0w\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#KSHMR\n#KAAZE\n#DevilInsideMe\n#KARRA\n#SpinninMassiveMonday\n#MassiveMonday\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/96n2gRDPWyM/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 39,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "96n2gRDPWyM"
        }
      },
      "contentDetails": {
        "videoId": "96n2gRDPWyM",
        "videoPublishedAt": "2019-05-27T15:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "D5nBKJPbIo6SZuqnj9Kcm5HOYFk",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yMUQyQTQzMjRDNzMyQTMy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - Faded",
        "description": "Walkers! Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://youtu.be/cYxAr_NZF9E\n\n#Faded #AlanWalker #EDM #House #YouAreNotAlone\n\n_____________________\n\n// LYRICS // Alan Walker - Faded // LYRICS //\n\nYou were the shadow to my light\nDid you feel us\nAnother start\nYou fade away\nAfraid our aim is out of sight\nWanna see us\nAlive\nWhere are you now\nWhere are you now\nWhere are you now\nWas it all in my fantasy\nWhere are you now\nWere you only imaginary\nWhere are you now\nAtlantis\nUnder the sea\nUnder the sea\nWhere are you now\nAnother dream\nThe monsters running wild inside of me\nI'm faded\nI'm faded\nSo lost\nI'm faded\nI'm faded\nSo lost\nI'm faded\nThese shallow waters, never met\nWhat I needed\nI'm letting go\nA deeper dive\nEternal silence of the sea\nI'm breathing\nAlive\nWhere are you now\nWhere are you now\nUnder the bright\nBut faded lights\nYou set my heart on fire\nWhere are you now\nWhere are you now\nWhere are you now\nAtlantis\nUnder the sea\nUnder the sea\nWhere are you now\nAnother dream\nThe monsters running wild inside of me\nI'm faded\nI'm faded\nSo lost\nI'm faded\nI'm faded\nSo lost\nI'm faded\n\n/////////////////////////////////////////\n\nFrom the beginning. Check out my other earlier songs here: https://www.youtube.com/watch?v=nO77w5KJL3s&list=PLYT4vq6pQVSuiFwl8Vv4XmCpdBDc8HeO6\n\nAlso, BTS footage here, like from my recent Aviation Tour in China: https://www.youtube.com/watch?v=UsprGgsLQNs&list=PLYT4vq6pQVSv_jFjvsMuxr6poP4yBU0VE\n\n/////////////////////////////////////////\n\nCREDITS:\nVocalist: Iselin Solheim\nVideo Location: Tallinn, Estonia\nVideo produced by: Bror Bror\nDirectors: Rikkard & Tobias Häggbom\nD.O.P: Rikkard Häggbom\nEdit and grading: Bror Bror\nActor: Shahab Salehi\n\n_____________________________________\n\nFacebook: http://bit.ly/AlanWalker_Facebook\nInstagram: http://bit.ly/AlanWalker_Instagram\nTwitter: http://bit.ly/AlanWalker_Twitter\n\n______________________________________\n\nVocalist: Iselin Solheim\nVideo Location: Tallinn, Estonia\nVideo produced by: Bror Bror\nDirectors: Rikkard & Tobias Häggbom\nD.O.P: Rikkard Häggbom\nEdit and grading: Bror Bror\nActor: Shahab Salehi\n\n© 2015 Alan Walker & MER Musikk\n℗ 2015 Sony Music Entertainment Sweden AB",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/60ItHLz5WEA/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 40,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "60ItHLz5WEA"
        }
      },
      "contentDetails": {
        "videoId": "60ItHLz5WEA",
        "videoPublishedAt": "2015-12-04T07:00:30Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "7w1BRp1jcULBOdKA8h4-dLZqve4",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45RTgxNDRBMzUwRjQ0MDhC",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Alan Walker - All Falls Down (feat. Noah Cyrus with Digital Farm Animals)",
        "description": "Thanks for listening. If you want to hear my newest single and the last video in the World of Walker trilogy, \"Heading Home,\" check out the official music video here: https://youtu.be/mfSU_XwEnZA & the LIVE performance here: https://www.youtube.com/watch?v=cYxAr_NZF9E\n\nI’m extremely excited to finally release the music video for my new single All Falls Down. Let me know what you think - like, share and leave a comment in the section below!\n- Alan\n\n#WorldOfWalker\n\nListen to the single here: https://AlanWalker.lnk.to/AllFallsDown\n\nAlso remember to check out these videos:\n- Tired: https://youtu.be/g4hGRvs6HHU\n- All Falls Down (trailer): https://youtu.be/74EOvSjXrgY\n\nMerch available at http://bit.ly/AlanWalkerMerch\n\n---\nCredits:\nDirector: Kristian Berg (http://www.kristianberg.com)\nConcept: Kristian Berg & MER (http://www.mer.as)\n\nProduced by: Synne Seltveit - Viper Film (http://www.viperfilm.com)\nProduced by: Niklas Røseth - iProduksjon (http://www.iproduksjon.com)\nProduced by: Ana Sikavica - Red Production (http://www.redproduction.tv)\n\nD.O.P: Jakob Ingimundarson (http://www.jakobingimundarson.com)\nEditor: Jonas Aarø\nVFX: Wirat Johannessen (Knowit Experience)\nAdditional flag design: Audun Notevarp\nGrade: Julien Alary\nSound design: Fredrik Borch Olsen (http://www.mer.as)\n\nCostume Designer: Elise N. Nystad\nSet Designer: Krešo Glavinić\nGaffer: Vladimir Slijepčević \n1st AC: Espen Olsen\nDrone operator: Roger Fosaas\n\nShot on location in Croatia, Montenegro and Bosnia & Herzegovina\n\nA special thanks to everyone involved!\n\n---\n\nLyrics:\nWhat's the trick I wish I knew \nI'm so done with thinking through \nAll the things I could've been\nAnd I know you wonder too,\nAll it takes is that one look you do\nand I run right back to you\nu crossed the line \n& it's time to say f-u!\n\nWhat’s the point in saying that \nwhen u know how I’ll react \nU think u can just take it back\nbut shit just don’t work like that\nyou’re the drug that I’m addicted to\nAnd I want you so bad\nGuess I’m stuck \nwith you\nand that’s that\n\nCus when it all falls down, then whatever \nWhen it don’t work out for the better\nIf we just ain’t right and it’s time to say goodbye \nwhen it all falls down,\nwhen it all falls down\nI’ll be fine \nI’ll be fine \nI’ll be fine\n\nYou’re the drug that I’m addicted to\nAnd I want you so bad\nBut I’ll be fine\n\nWhy we fight, I don’t know\nWe say what hurts the most \nOh, I try \nstaying cold,\nBut you take it personal, \nAll this firing shots,\nand making grounder \nIt’s way too hard to cope \nBut I still \nCan’t let \nYou go\n\nAll Falls Down,\nAll Falls Down,\nAll Falls Down,\nAll Falls Down.",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/6RLLOEzdxsM/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 41,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "6RLLOEzdxsM"
        }
      },
      "contentDetails": {
        "videoId": "6RLLOEzdxsM",
        "videoPublishedAt": "2017-10-27T06:59:20Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "C6jdKbUlKH7VQrrTfBqAxp16CDE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5ENDU4Q0M4RDExNzM1Mjcy",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Ina Wroldsen - Strongest (Alan Walker Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII \n\nCheck out my remix of Ina Wroldsens awesome new single Strongest! Hope you like it and let me know what you think in the comments below.\n\n/ Alan\n\nStream the remix on Spotify: http://spoti.fi/2jC8M7f\n\nAlso don’t forget to check out my own lastest single ”All Falls Down” http://www.bit.ly/AFDVideo and make sure to turn notifications ON on YouTube so you don’t miss any of my updates!\n\n#WorldOfWalker\n\nLyrics: \nYou sit there with that look on your face like you won\nLike nothing that I say is gonna change how you feel now\nYou sit there and you tell me you fell outta love\nAnd we are in your way so you just gotta leave now\nAnd we just need to understand your reasons\nAnd you are gonna justify this treason\nBy telling me the promises that we sworn ain't enough\n\nSo now you gonna be another person?\nAnd how do I explain this shit to our son?\nHow'd you tell a toddler about a girlfriend?\nDaddy's gone\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\n\nYou sit there with your phone in your hands and you're hurt\nYou tell me that you feel like you lost me when he came\nI'm sorry but I cannot connect with your words\n'Cause right now what matters isn't yours but it is his name\nAnd we just need to find another income\n'Cause she wants you to help her with her own one\nAnd you want me to tell me that what you've done is okay\n \nSo now you gonna be another father?\nAnd I will be a different kind of mother?\nAnd you'd tell a toddler 'bout step brothers?\nDaddy's strayed\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\n\nLet's talk about family\nLet's talk about family\nLet's talk of the ties and the lies\nAnd the love that we had in this family\nLet's talk about honesty\nYou know nothing about honesty\nI'll let go of your hands and our plans\nAnd the chance that we had with this family\n\nWell, I will be the strongest that he ever knew\nAnd I will be there when he needs a love strong enough\nDon't worry I will carry your share for us\nNo matter how bad the storm\nI will be strongest that he ever knew\nAnd we'll leave you alone\nOh na na, we'll leave you alone\n\n\nVideo by: Simon Diaz Compagnet",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/-_leYftruXI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 42,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-_leYftruXI"
        }
      },
      "contentDetails": {
        "videoId": "-_leYftruXI",
        "videoPublishedAt": "2017-12-01T08:33:51Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "xYIUWrB2UKqsYtrEBsuVK4hkbyU",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4yMDhBMkNBNjRDMjQxQTg1",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Blasterjaxx & Timmy Trumpet - Narco (Official Music Video)",
        "description": "Blasterjaxx & Timmy Trumpet - Narco is OUT NOW on MAXXIMIZE! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://maxximize.lnk.to/Narco\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nBlasterjaxx teams up with the ever pleasing Timmy Trumpet for their banger Narco! Get infected with this addictive tune, bound you bring you in a trance with its massive kicks. The steel drums and mysterious trumpets are gaining curiosity as the uplifting vocals are taking over. It is preparing you for the massive drop that will blast through the sound barrier with immense power. This tune is too hard to handle! \n\nFollow Blasterjaxx:\nhttp://www.facebook.com/BlasterjaxxOfficial\nhttps://www.twitter.com/blasterjaxx \nhttps://www.soundcloud.com/blasterjaxx \nhttps://www.blasterjaxx.com\n\nFollow Timmy Trumpet\nhttp://www.timmytrumpet.com\nhttps://www.facebook.com/timmytrumpet\nhttps://twitter.com/timmytrumpet\n\nPatrick Davelaar\nPatrick Davelaar\n#Hekje\nNetherlands\n---\n\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve and many, many more! Expect daily uploads of official music videos, lyric videos and artwork videos across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Blasterjaxx\n#TimmyTrumpet\n#SpinninRecords\n#Spinnin\n#MAXXIMIZE",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/S73zDvMgGmI/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 43,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "S73zDvMgGmI"
        }
      },
      "contentDetails": {
        "videoId": "S73zDvMgGmI",
        "videoPublishedAt": "2017-11-23T20:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "k_p5afie8bVd5JCKXn-4bD-dFuM",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5GM0Q3M0MzMzY5NTJFNTdE",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Kygo - Stranger Things ft. OneRepublic (Alan Walker Remix)",
        "description": "My new single \"Alone, Pt. II\" with Ava Max is out now! \nCheck out the song here:  https://lnk.to/AWAlonePtII\n\nI made a remix of “Stranger Things” for my good friend Kygo & One Republic, what do you guys think? Make sure to leave me a message in the comment section, and share with your friends!\n\n/ Alan\n\nVideo: Simon Compagnet",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/-35jibKqbEo/hqdefault.jpg",
            "width": 480,
            "height": 360
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 44,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "-35jibKqbEo"
        }
      },
      "contentDetails": {
        "videoId": "-35jibKqbEo",
        "videoPublishedAt": "2018-02-14T17:00:49Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "6vWD8XiZKn5RXFuHTC1tcisJ7Rs",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi4zRjM0MkVCRTg0MkYyQTM0",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Dimitri Vegas & Like Mike vs Hardwell - Unity (Official Music Video)",
        "description": "Win a trip to Tomorrowland; https://win.dimitrivegasandlikemike.com ❤  \n\nStream or get a free copy of Unity: https://summerofmadness.com\n\nAs we head full swing into the engrossing festival season, label heads Dimitri Vegas & Like Mike kicked off their recent Tomorrowland EP, 8 tracks spread over the festival’s two weekends, with Hardwell collaboration ‘Unity’. The Belgian brothers and Hardwell both premiered the track at the festival to an unbelievable response, and now fans can watch that moment back with the official video, which spans the festival grounds and soaks up the highlights of both artists sets, individually and collectively, as Dimitri Vegas & Like Mike bring out Hardwell to reveal the track first to the Tomorrowland revellers. \n\nFollow Dimitri Vegas & Like Mike on Spotify:\nhttp://dimitrivegasandlikemike.com/spotify\n\nRelive the MADNESS with these exclusive Spotify playlists:\nThe Official Tomorrowland Playlist:\nhttp://tomorrowland.com/spotify\nThe Smash The House Radio Playlist:\nhttp://smashthehouse.com/spotify\n\nSubscribe yourself for more Tomorrowland Music on: \nhttps://www.youtube.com/user/SmashTheHouse\n\nFollow us on social media:\nhttp://www.facebook.com/dimitrivegasandlikemike\nhttp://www.twitter.com/dimitrivegas\nhttp://www.twitter.com/likemike\nhttp://www.instagram.com/dimitrivegasandlikemike\nhttp://www.soundcloud.com/dimitrivegasandlikemike\n\nFollow Hardwell:\nhttps://www.facebook.com/djhardwell/\nhttps://twitter.com/HARDWELL\nhttps://www.instagram.com/hardwell/",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/rLlZE_G_fXo/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 45,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "rLlZE_G_fXo"
        }
      },
      "contentDetails": {
        "videoId": "rLlZE_G_fXo",
        "videoPublishedAt": "2018-08-07T14:12:42Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "HupUIeakLLXCSjV7WBUWMAWZDqE",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi45NzUwQkI1M0UxNThBMkU0",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Moska & Brooke Evers - Dance (Official Music Video)",
        "description": "Moska and Brooke Evers join each other on this energetic piece of dance music, aptly titled ‘Dance’. \n\nMoska & Brooke Evers - Dance is OUT NOW on Musical Freedom! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://www.musicalfreedom.com/dance\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nVideo by Cody Desmond | Urban Platform\n\nConnect with Moska:\nhttps://www.instagram.com/moskahouse\nhttps://www.facebook.com/moskahouse/\nhttps://www.twitter.com/MoskaHouse\nhttps://soundcloud.com/moskahouse\n\nConnect with Brooke Evers:\nhttps://www.instagram.com/brookeevers\nhttps://www.facebook.com/brookeevers/\nhttps://twitter.com/Brookeevers\nhttps://www.soundcloud.com/djbrookeevers\n\nConnect with Musical Freedom:\nhttps://www.twitter.com/musicalfreedom\nhttps://www.facebook.com/musicalfreedom/\nhttps://www.instagram.com/musicalfreedom/\nhttps://www.youtube.com/user/musicalfreedomrecs\n@musical-freedom\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#Moska\n#BrookeEvers\n#Spinnin\n#SpinninRecords\n#MusicalFreedom",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/21mSKE_3uhU/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 46,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "21mSKE_3uhU"
        }
      },
      "contentDetails": {
        "videoId": "21mSKE_3uhU",
        "videoPublishedAt": "2018-11-03T10:00:00Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "9jW4EYqrtyZB0QX472qc83vmu40",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DNzE1RjZEMUZCMjA0RDBB",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Ummet Ozcan x Arem Ozguc x Arman Aydin – IZMIR (Official Music Video)",
        "description": "Ummet Ozcan x Arem Ozguc x Arman Aydin – IZMIR is OUT NOW! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: http://release.spinninrecords.com/izmir!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Ummet Ozcan:\nhttp://www.ummetozcan.com\nhttps://www.facebook.com/Ummetozcanofficial\nhttp://twitter.com/UmmetOzcan\nhttp://www.instagram.com/ummetozcan\n\nFollow Arem Ozguc:\nhttps://instagram.com/aremozguc\n\nFollow Arman Aydin:\nhttps://instagram.com/armanaydin\n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve, Throttle and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#UmmetOzcan\n#ArmanAydin\n#AremOzguc\n#izmirmarsi\n#Spinnin\n#SpinninRecords",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/RQZQmW-_w5U/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 47,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "RQZQmW-_w5U"
        }
      },
      "contentDetails": {
        "videoId": "RQZQmW-_w5U",
        "videoPublishedAt": "2019-08-30T08:59:48Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "n-dOIGWFqSA9FJYaGE18FAJ81qI",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi43MTI1NDIwOTMwQjIxMzNG",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Timmy Trumpet & JETFIRE - Flamenco (feat. Rage) [Official Audio]",
        "description": "Exotic new sounds on KSHMR's Dharma imprint, as Timmy Trumpet and JETFIRE deliver their 'Flamenco', featuring Rage.\n\nTimmy Trumpet & JETFIRE - Flamenco (feat. Rage) is OUT NOW on Dharma! Like this track? Download on Beatport or add it to your favourite Spotify/Apple Music playlist by clicking HERE: https://dharmamusic.release.link/flamenco-feat-rage!YT\n\nMake sure to subscribe to Spinnin' Records: http://bit.do/spinnintv \n..and turn on notifications to stay updated with all new uploads!🔔\n\nJoin our Spinnin' Records Top 100 Playlist ► https://spinninrecords.lnk.to/top100!YT\n\nFollow Timmy Trumpet: \nhttp://www.timmytrumpet.com\nhttps://www.facebook.com/timmytrumpet\nhttps://twitter.com/timmytrumpet\n\nFollow JETFIRE:\nhttp://www.jetfiremusic.com\nhttp://www.facebook.com/jetfiremusic\nhttp://www.twitter.com/jetfiremusic\nhttp://www.instagram.com/jetfiremusic \nhttp://www.soundcloud.com/jetfiremusic \nhttp://www.youtube.com/jetfiremusic \n\n---\nThe Spinnin’ Records YouTube channel is the home for all music videos of the world’s leading dance record label!\n\nWe feature the latest music videos by Spinnin’ artists like Oliver Heldens, Sam Feldt, KSHMR, Ummet Ozcan, Blasterjaxx, Merk & Kremont, Timmy Trumpet, Tujamo, Alok, Curbi, Mike Williams, Lucas & Steve and many, many more! Expect daily uploads of official music videos, lyric videos and official audio across genres like dance, house, electro house, future house, deep house, big room and trap.\n\nFollow Spinnin’ Records:\nhttps://open.spotify.com/user/spinninrecordsofficial\nhttps://soundcloud.com/spinninrecords\nhttps://facebook.com/SpinninRecords\nhttps://instagram.com/spinninrecords\nhttps://twitter.com/SpinninRecords\nhttps://spinninrecords.com\n\n#TimmyTrumpet\n#JETFIRE\n#Spinnin\n#SpinninRecords\n#Dharma",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "maxres": {
            "url": "https://i.ytimg.com/vi/JMIAQiYGbfI/maxresdefault.jpg",
            "width": 1280,
            "height": 720
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 48,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "JMIAQiYGbfI"
        }
      },
      "contentDetails": {
        "videoId": "JMIAQiYGbfI",
        "videoPublishedAt": "2018-04-28T09:00:01Z"
      }
    },
    {
      "kind": "youtube#playlistItem",
      "etag": "mWeiLmqeFzJfF1PxKxfxPfXd_vA",
      "id": "UExqaUIxR20xQlVtX2hNNEhBcmxhOGtFN0MtaGRYc01BSi5DQ0MyQ0Y4Mzg0M0VGOEYw",
      "snippet": {
        "publishedAt": "2019-12-22T05:03:21Z",
        "channelId": "UCpp-s54pZQRMpCl29_7s93Q",
        "title": "Hardwell & Blasterjaxx feat. Mitch Crown - Bigroom Never Dies (Official Music Video)",
        "description": "Hardwell & Blasterjaxx feat. Mitch Crown - Bigroom Never Dies (Official Music Video) \nListen here ➡️ http://revr.ec/BND-YT\n\nRevealed label boss Hardwell leads by example with the long awaited release of his collaboration with fellow dance music titans BlasterJaxx for ‘Bigroom Never Dies’, featuring the vocal talents of Mitch Crown, who has worked with the biggest names in electronic music, including Tiësto as well as their previous hook-up on Hardwell’s hugely successful ‘Call Me A Spaceman’. The triumvirate of talents combine to create the anthem you’d expect, a track premiered by Hardwell at Ultra Music Festival 2018 which has been a standout staple in all his sets since. \n\n‘Bigroom Never Dies’  kicks things off with a chunky stab that gets the ball rolling, quickly joined by a reverse vocal breath that demonstrates the production skills of both Hardwell and Blasterjaxx. Mitch joins the action during the first breakdown, urging fans to put their hands up and building the hype before the first drop, where a gritty bass enters proceedings and turns up the tempo, culminating in a track that is set to be one of the top bigroom anthems this year. \n\nHardwell continues to show why he is consistently in the highest tier of dance music superstars, and after the success of previous collaborations with Blasterjaxx such as ‘Going Crazy’ and Hardwell’s edit of ‘Fifteen’ on Revealed, this combination results in a bigroom track that is set to stick around for a while, proof if ever needed that ‘Bigroom Never Dies’. Grab your copy when it is released 13th July via Revealed Recordings!\n\nFor more information check socials:\nhttp://www.djhardwell.com\nhttp://www.instagram.com/hardwell\nhttp://www.facebook.com/djhardwell\nhttp://www.twitter.com/hardwell\nhttp://www.soundcloud.com/hardwell\n\nhttp://www.revealedrecordings.com\nhttp://www.facebook.com/revealedrecor...\nhttp://www.twitter.com/revealedrec\nhttp://instagram.com/revealedrec\nhttp://soundcloud.com/revealed-record...\nhttp://open.spotify.com/user/revealedrec\nhttp://www.youtube.com/revealedrec\n\nVideo directed by Tom van den Berg\nhttp://instagram.com/tmvdbrg\n\nLyrics by KBK Visuals: \nhttp://www.kbkvisuals.com",
        "thumbnails": {
          "default": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/default.jpg",
            "width": 120,
            "height": 90
          },
          "medium": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/mqdefault.jpg",
            "width": 320,
            "height": 180
          },
          "high": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/hqdefault.jpg",
            "width": 480,
            "height": 360
          },
          "standard": {
            "url": "https://i.ytimg.com/vi/BqzBT2jqQYg/sddefault.jpg",
            "width": 640,
            "height": 480
          }
        },
        "channelTitle": "Hype Vibes",
        "playlistId": "PLjiB1Gm1BUm_hM4HArla8kE7C-hdXsMAJ",
        "position": 49,
        "resourceId": {
          "kind": "youtube#video",
          "videoId": "BqzBT2jqQYg"
        }
      },
      "contentDetails": {
        "videoId": "BqzBT2jqQYg",
        "videoPublishedAt": "2018-07-13T16:19:12Z"
      }
    }
  ],
  "pageInfo": {
    "totalResults": 80,
    "resultsPerPage": 50
  }
}

  recorded_at: Thu, 09 Jul 2020 06:34:42 GMT
recorded_with: VCR 6.0.0
